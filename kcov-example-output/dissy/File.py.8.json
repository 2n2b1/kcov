var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'dissy', 'date' : '2014-06-09 19:17:46', 'instrumented' : 251, 'covered' : 68,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Simon Kagstrom <simon.kagstrom@gmail.com>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   Describes one file','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'import cgi, os, sys, re','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'import cPickle as pickle','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   15','line':'','coverage':'           : ',},
{'lineNum':'   16','line':'sys.path.append(".")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   17','line':'import dissy, dissy.architecture','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'','coverage':'           : ',},
{'lineNum':'   19','line':'from dissy.Function import *','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'from dissy.Instruction import *','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   21','line':'from dissy.Data import *','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'from dissy.Entity import AddressableEntity','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   23','line':'','coverage':'           : ',},
{'lineNum':'   24','line':'ADDRESS_REGEXP  = "[0-9,a-f,A-F]+"','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   25','line':'FUNCTION_REGEXP = "(?:[.]*)[_,0-9,a-z,A-Z,\\:,\\*,\\,\\(,\\), ,<,>,~,\\.,&,=,\\[,\\],\\+,\\-,\\*,\\/,\\|,\\^,\\%]+"','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   26','line':'','coverage':'           : ',},
{'lineNum':'   27','line':'symbolRegexp = re.compile("(" + ADDRESS_REGEXP + ")* *(" + ADDRESS_REGEXP + ")* ([A,B,C,D,G,I,N,R,S,T,U,V,W,a,b,c,d,g,i,n,r,s,t,u,v,w,-,?]{1}) ("+ FUNCTION_REGEXP + "){1}")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   28','line':'','coverage':'           : ',},
{'lineNum':'   29','line':'# Followed by size, but let\'s just skip it','coverage':'           : ',},
{'lineNum':'   30','line':'linuxKernelCrashRegexp = re.compile("(" + FUNCTION_REGEXP + "){1}" + "\\+[0x]*(" + ADDRESS_REGEXP + "){1}")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   31','line':'','coverage':'           : ',},
{'lineNum':'   32','line':'TYPE_UNDEFINED = 0','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   33','line':'TYPE_TEXT = 1','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'TYPE_RODATA = 2','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   35','line':'TYPE_DATA = 3','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   36','line':'TYPE_BSS  = 4','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   37','line':'','coverage':'           : ',},
{'lineNum':'   38','line':'typeToClass = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   39','line':'    TYPE_TEXT : Function,','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'    TYPE_RODATA : RoData,','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   41','line':'    TYPE_DATA : Data,','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   42','line':'    TYPE_BSS : Bss,','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   43','line':'}','coverage':'           : ',},
{'lineNum':'   44','line':'','coverage':'           : ',},
{'lineNum':'   45','line':'def shouldFilter(name):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   46','line':'    forbidden = ["_Jv_RegisterClasses", "__gmon_start__"]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   47','line':'','coverage':'           : ',},
{'lineNum':'   48','line':'    if name in forbidden:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   49','line':'        return True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   50','line':'','coverage':'           : ',},
{'lineNum':'   51','line':'    return False','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   52','line':'','coverage':'           : ',},
{'lineNum':'   53','line':'def getObjType(s):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   54','line':'    if s in (\'u\', \'U\', \'N\'):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   55','line':'        return TYPE_UNDEFINED','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   56','line':'    elif s in (\'d\', \'D\'):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   57','line':'        return TYPE_DATA','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   58','line':'    elif s in (\'r\', \'R\'):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   59','line':'        return TYPE_RODATA','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   60','line':'    elif s in (\'b\', \'B\', \'s\', \'S\', \'c\', \'C\'):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   61','line':'        return TYPE_BSS','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   62','line':'    elif s in (\'t\', \'T\', \'W\', \'w\'):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   63','line':'        return TYPE_TEXT','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   64','line':'    return TYPE_DATA','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'','coverage':'           : ',},
{'lineNum':'   66','line':'','coverage':'           : ',},
{'lineNum':'   67','line':'class BaseFile(AddressableEntity):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   68','line':'    def __init__(self, baseAddress = 0):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   69','line':'        global global_file','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   70','line':'        AddressableEntity.__init__(self, baseAddress = baseAddress)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   71','line':'        self.symbols = []','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   72','line':'        self.functions = []','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   73','line':'        self.data = []','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   74','line':'        self.arch = "intel"','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   75','line':'        global_file = self','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   76','line':'','coverage':'           : ',},
{'lineNum':'   77','line':'    def lookup_int(self, address):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   78','line':'        for sym in self.symbols:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   79','line':'            extents = sym.getExtents()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'            if address >= extents[0] and address < extents[1]:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   81','line':'                return sym','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   82','line':'        return None','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   83','line':'','coverage':'           : ',},
{'lineNum':'   84','line':'    def link(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   85','line':'        for fn in self.functions:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   86','line':'            unresolved = fn.link()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   87','line':'            for insn in unresolved:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   88','line':'                other = self.lookup(insn.address)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   89','line':'                if other:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   90','line':'                    insn.linkTo(other)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   91','line':'','coverage':'           : ',},
{'lineNum':'   92','line':'    def lookup_str(self, label):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   93','line':'        for sym in self.symbols:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   94','line':'            if label == sym.getLabel():','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   95','line':'                return sym','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   96','line':'        return None','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   97','line':'','coverage':'           : ',},
{'lineNum':'   98','line':'    def lookup(self, param):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   99','line':'        "Lookup a label or an address"','coverage':'           : ',},
{'lineNum':'  100','line':'        if isinstance(param, long):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  101','line':'            return self.lookup_int(param)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  102','line':'        return self.lookup_str(param)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  103','line':'','coverage':'           : ',},
{'lineNum':'  104','line':'    def getArch(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  105','line':'        return self.arch','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  106','line':'','coverage':'           : ',},
{'lineNum':'  107','line':'    def hasSymbols(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  108','line':'        return True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  109','line':'','coverage':'           : ',},
{'lineNum':'  110','line':'    def parse(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  111','line':'        """Parses the output of \'nm\', to get the list of symbols"""','coverage':'           : ',},
{'lineNum':'  112','line':'        lines = self.getNmLines()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  113','line':'        for line in lines:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  114','line':'            r = symbolRegexp.match(line)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  115','line':'            if r == None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  116','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  117','line':'            address = 0','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  118','line':'            size = 0','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  119','line':'            if r.group(1) != None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  120','line':'                address = long("0x" + r.group(1), 16)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  121','line':'            if r.group(2) != None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  122','line':'                size = long("0x" + r.group(2), 16)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  123','line':'            objType = getObjType(r.group(3))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  124','line':'            label = cgi.escape(r.group(4))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  125','line':'','coverage':'           : ',},
{'lineNum':'  126','line':'            if size == 0:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  127','line':'                idx = lines.index(line) + 1','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  128','line':'                if idx < len(lines)-1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  129','line':'                    # The size is the next real symbol\'s line.adr - this line.adr','coverage':'           : ',},
{'lineNum':'  130','line':'                    s = symbolRegexp.match(lines[idx])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  131','line':'                    if s == None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  132','line':'                        continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  133','line':'','coverage':'           : ',},
{'lineNum':'  134','line':'                    while idx < len(lines)-1 and s == None or (s and s.group(1) == None) or \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  135','line':'                        (s and s.group(3) in (\'t\', \'W\')):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  136','line':'                        #ignore symbols with type \'t\' and \'W\', this helps some procs on e.g. ATMEL','coverage':'           : ',},
{'lineNum':'  137','line':'                        idx = idx + 1','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  138','line':'                        s = symbolRegexp.match(lines[idx])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  139','line':'','coverage':'           : ',},
{'lineNum':'  140','line':'                    nextAdr = long("0x" + s.group(1), 16)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  141','line':'                    size = nextAdr - address','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  142','line':'                else:','coverage':'           : ',},
{'lineNum':'  143','line':'                    # FIXME: This is a bug - the last symbol will be too small.','coverage':'           : ',},
{'lineNum':'  144','line':'                    # This can be fixed by e.g., using the section size','coverage':'           : ',},
{'lineNum':'  145','line':'                    size = 0','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  146','line':'','coverage':'           : ',},
{'lineNum':'  147','line':'            if objType == TYPE_UNDEFINED:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  148','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  149','line':'','coverage':'           : ',},
{'lineNum':'  150','line':'            if shouldFilter(label):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  151','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  152','line':'','coverage':'           : ',},
{'lineNum':'  153','line':'            if objType == TYPE_TEXT:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  154','line':'                sym = typeToClass[objType](self, address, label, size)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  155','line':'                self.functions.append(sym)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  156','line':'                self.symbols.append(sym)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  157','line':'#            else:','coverage':'           : ',},
{'lineNum':'  158','line':'#                sym = typeToClass[objType](self, address, label, size)','coverage':'           : ',},
{'lineNum':'  159','line':'#                self.data.append(sym)','coverage':'           : ',},
{'lineNum':'  160','line':'','coverage':'           : ',},
{'lineNum':'  161','line':'    def parseNoSymbols(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  162','line':'        """Parses the output of objdump, and create the functions"""','coverage':'           : ',},
{'lineNum':'  163','line':'        lines = self.getObjdumpLines()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  164','line':'        callDests = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  165','line':'        for line in lines:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  166','line':'            r = insnRegExp.match(line)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  167','line':'            if r != None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  168','line':'                if self.arch.isCall(r.group(3)):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  169','line':'                    dst = self.arch.getJumpDestination(r.group(1), r.group(3), r.group(4))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  170','line':'                    if dst != None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  171','line':'                        callDests.append(dst)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  172','line':'        # Sort the calls','coverage':'           : ',},
{'lineNum':'  173','line':'        callDests.sort()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  174','line':'        count = 0','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  175','line':'        for call in callDests[:-1]:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  176','line':'            next = callDests[callDests.index(call)+1]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  177','line':'            if next-call == 0:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  178','line':'                # Empty','coverage':'           : ',},
{'lineNum':'  179','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  180','line':'            fn = Function(self, call, "func%d" % (count), next-call)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  181','line':'            # This has not been prepared yet...','coverage':'           : ',},
{'lineNum':'  182','line':'            fn.stream = None','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  183','line':'            self.functions.append(fn)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  184','line':'            count = count + 1','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  185','line':'','coverage':'           : ',},
{'lineNum':'  186','line':'    def getFunctions(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  187','line':'        return self.functions','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  188','line':'','coverage':'           : ',},
{'lineNum':'  189','line':'    def getData(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  190','line':'        return self.functions','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  191','line':'','coverage':'           : ',},
{'lineNum':'  192','line':'class File(BaseFile):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  193','line':'    def __init__(self, filename=None, baseAddress = 0):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  194','line':'        BaseFile.__init__(self, baseAddress = baseAddress)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  195','line':'        self.filename = filename','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  196','line':'','coverage':'           : ',},
{'lineNum':'  197','line':'        if filename != None:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  198','line':'            self.arch = dissy.architecture.getArchitecture(self.getArchStr())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  199','line':'            if self.hasSymbols():','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  200','line':'                self.parse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  201','line':'            else:','coverage':'           : ',},
{'lineNum':'  202','line':'                self.parseNoSymbols()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  203','line':'','coverage':'           : ',},
{'lineNum':'  204','line':'    def getArchStr(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  205','line':'        "Get the architecture of the file"','coverage':'           : ',},
{'lineNum':'  206','line':'        arch = "intel" # Assume Intel architecture','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  207','line':'        f = os.popen("%s -h --wide \'%s\'" % (config.readelf, self.filename))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  208','line':'        for line in f:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  209','line':'            words = line.split()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  210','line':'            if len(words) >= 2 and words[0] == "Machine:":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  211','line':'                arch = words[1].lower()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  212','line':'                break','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  213','line':'        f.close()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  214','line':'        return arch','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  215','line':'','coverage':'           : ',},
{'lineNum':'  216','line':'    def getNmLines(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  217','line':'        f = os.popen("%s --numeric-sort --demangle --print-size \'%s\'" % (config.nm, self.filename))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  218','line':'        lines = f.readlines()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  219','line':'        f.close()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  220','line':'        return lines','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  221','line':'','coverage':'           : ',},
{'lineNum':'  222','line':'    def getObjdumpLines(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  223','line':'        "Parse the functions from this file (without symbols)"','coverage':'           : ',},
{'lineNum':'  224','line':'        f = os.popen("%s --disassemble --demangle --disassemble-zeroes \'%s\'" % (config.objdump, self.filename))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  225','line':'        for line in f:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  226','line':'            yield line','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  227','line':'        f.close()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  228','line':'','coverage':'           : ',},
{'lineNum':'  229','line':'    def getFunctionObjdump(self, funclabel, start, end):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  230','line':'        s = "%s --wide --demangle --disassemble-zeroes --source --start-address=0x%Lx --stop-address=0x%Lx \'%s\'" % (config.objdump, start, end, self.filename)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  231','line':'        f = os.popen(s)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  232','line':'        for line in f:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  233','line':'            yield line','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  234','line':'        f.close()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  235','line':'','coverage':'           : ',},
{'lineNum':'  236','line':'    def getObjdumpSourceLines(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  237','line':'        s = "%s --wide --demangle --disassemble-zeroes --source \'%s\'" % (config.objdump, self.filename)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  238','line':'        f = os.popen(s)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  239','line':'        for line in f:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  240','line':'            yield line','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  241','line':'        f.close()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  242','line':'','coverage':'           : ',},
{'lineNum':'  243','line':'    def __str__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  244','line':'        out = "%s: " % (self.filename)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  245','line':'        for fn in self.functions:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  246','line':'            out = out + str(fn)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  247','line':'        return out','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  248','line':'','coverage':'           : ',},
{'lineNum':'  249','line':'    def toExportedFile(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  250','line':'        expfile = ExportedFile()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  251','line':'        expfile.archStr = self.getArchStr()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  252','line':'        expfile.objdumpLines = list(self.getObjdumpLines())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  253','line':'        expfile.objdumpSourceLines = list(self.getObjdumpSourceLines())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  254','line':'        expfile.nmLines = list(self.getNmLines())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  255','line':'        return expfile','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  256','line':'','coverage':'           : ',},
{'lineNum':'  257','line':'class ExportedFile(BaseFile):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  258','line':'    def __init__(self, filename=None, baseAddress = 0):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  259','line':'        BaseFile.__init__(self, baseAddress = baseAddress)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  260','line':'        self.filename = filename','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  261','line':'','coverage':'           : ',},
{'lineNum':'  262','line':'        self.archStr = "intel"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  263','line':'        self.objdumpLines = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  264','line':'        self.nmLines = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  265','line':'        self.objdumpSourceLines = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  266','line':'','coverage':'           : ',},
{'lineNum':'  267','line':'        if filename != None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  268','line':'            f = open(filename, \'rb\')','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  269','line':'            self.archStr = pickle.load(f)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  270','line':'            self.nmLines = pickle.load(f)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  271','line':'            self.objdumpLines = pickle.load(f)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  272','line':'            self.objdumpSourceLines = pickle.load(f)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  273','line':'            f.close()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  274','line':'','coverage':'           : ',},
{'lineNum':'  275','line':'            self.arch = dissy.architecture.getArchitecture(self.getArchStr())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  276','line':'            if self.hasSymbols():','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  277','line':'                self.parse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  278','line':'            else:','coverage':'           : ',},
{'lineNum':'  279','line':'                self.parseNoSymbols()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  280','line':'','coverage':'           : ',},
{'lineNum':'  281','line':'    def getArchStr(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  282','line':'        return self.archStr','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  283','line':'','coverage':'           : ',},
{'lineNum':'  284','line':'    def getNmLines(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  285','line':'        return self.nmLines','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  286','line':'','coverage':'           : ',},
{'lineNum':'  287','line':'    def getObjdumpLines(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  288','line':'        return self.objdumpLines','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  289','line':'','coverage':'           : ',},
{'lineNum':'  290','line':'    def getFunctionObjdump(self, funclabel, start, end):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  291','line':'        infunc = False','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  292','line':'        startlinere = re.compile("^[0]*%Lx <%s>:" % (start, funclabel))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  293','line':'        endlinere = re.compile("^[0]*%Lx <.*>:" % (end))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  294','line':'        lastline = None','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  295','line':'        for line in self.objdumpSourceLines:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  296','line':'            if not infunc:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  297','line':'                r = startlinere.match(line)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  298','line':'                if r != None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  299','line':'                    infunc = True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  300','line':'                    lastline = line','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  301','line':'            elif infunc:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  302','line':'                r = endlinere.match(line)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  303','line':'                if r != None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  304','line':'                    return','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  305','line':'                else:','coverage':'           : ',},
{'lineNum':'  306','line':'                    yield lastline','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  307','line':'                    lastline = line','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  308','line':'        #this means we reached the end of the dump, also yield the last line','coverage':'           : ',},
{'lineNum':'  309','line':'        if lastline:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  310','line':'            yield lastline','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  311','line':'','coverage':'           : ',},
{'lineNum':'  312','line':'    def saveTo(self, f):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  313','line':'        pickle.dump(self.archStr, f, -1)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  314','line':'        pickle.dump(self.nmLines, f, -1)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  315','line':'        pickle.dump(self.objdumpLines, f, -1)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  316','line':'        pickle.dump(self.objdumpSourceLines, f, -1)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  317','line':'','coverage':'           : ',},
{'lineNum':'  318','line':'    def __str__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  319','line':'        out = "%s: " % (self.filename)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  320','line':'        for fn in self.functions:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  321','line':'            out = out + str(fn)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  322','line':'        return out','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  323','line':'','coverage':'           : ',},
{'lineNum':'  324','line':'if __name__ == "__main__":','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  325','line':'    if len(sys.argv) < 2:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  326','line':'        print "Arg: filename (ELF)"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  327','line':'        sys.exit(1)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  328','line':'    f = File(sys.argv[1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  329','line':'    f.parse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  330','line':'','coverage':'           : ',},
{'lineNum':'  331','line':'','coverage':'           : ',},
{'lineNum':'  332','line':'# Module-global file object','coverage':'           : ',},
{'lineNum':'  333','line':'global_file = None','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  334','line':'','coverage':'           : ',},
{'lineNum':'  335','line':'def getArchStr(): return global_file.getArchStr()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  336','line':'','coverage':'           : ',},
{'lineNum':'  337','line':'def lookup(param): return global_file.lookup(param)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  338','line':'','coverage':'           : ',},
{'lineNum':'  339','line':'def getFunctions(): return global_file.getFunctions()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  340','line':'','coverage':'           : ',},
{'lineNum':'  341','line':'def getData(): return global_file.getData()','class':'lineCov','coverage':'  1 /   1  : ',},
];
var merged_data = [];
