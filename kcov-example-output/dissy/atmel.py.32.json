var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'dissy', 'date' : '2014-06-09 19:17:46', 'instrumented' : 160, 'covered' : 95,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Mads Chr. Olesen <mchro@cs.aau.dk>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   ATMEL AVR 8-bit arch specific stuff','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'import sys, architecture','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'from dissy.architecture import Architecture','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   15','line':'','coverage':'           : ',},
{'lineNum':'   16','line':'','coverage':'           : ',},
{'lineNum':'   17','line':'atmel_calls = [\'rcall\', \'icall\', \'call\', \'eicall\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'atmel_conditionflag_setters = [\'cp\', \'cpi\', \'cpc\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   19','line':'atmel_conditionflag_users = [\'\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'','coverage':'           : ',},
{'lineNum':'   21','line':'atmel_instr_descriptions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'    \'ld\': """Load Indirect','coverage':'           : ',},
{'lineNum':'   23','line':'Note that:','coverage':'           : ',},
{'lineNum':'   24','line':'X = r26:r27','coverage':'           : ',},
{'lineNum':'   25','line':'Y = r28:r29','coverage':'           : ',},
{'lineNum':'   26','line':'Z = r30:r31""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   27','line':'    \'ldi\': \'Load Immediate\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   28','line':'    \'ldd\': """Load Indirect with Displacement','coverage':'           : ',},
{'lineNum':'   29','line':'Note that:','coverage':'           : ',},
{'lineNum':'   30','line':'X = r26:r27','coverage':'           : ',},
{'lineNum':'   31','line':'Y = r28:r29','coverage':'           : ',},
{'lineNum':'   32','line':'Z = r30:r31""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   33','line':'    \'lds\': \'Load Indirect from Data Space\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'','coverage':'           : ',},
{'lineNum':'   35','line':'    \'st\': """Store Indirect','coverage':'           : ',},
{'lineNum':'   36','line':'Note that:','coverage':'           : ',},
{'lineNum':'   37','line':'X = r26:r27','coverage':'           : ',},
{'lineNum':'   38','line':'Y = r28:r29','coverage':'           : ',},
{'lineNum':'   39','line':'Z = r30:r31""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'    \'std\': """Store Indirect with Displacement','coverage':'           : ',},
{'lineNum':'   41','line':'Note that:','coverage':'           : ',},
{'lineNum':'   42','line':'X = r26:r27','coverage':'           : ',},
{'lineNum':'   43','line':'Y = r28:r29','coverage':'           : ',},
{'lineNum':'   44','line':'Z = r30:r31""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   45','line':'    \'sts\': \'Store Direct to Data Space\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   46','line':'','coverage':'           : ',},
{'lineNum':'   47','line':'    \'in\': """In from I/O Location','coverage':'           : ',},
{'lineNum':'   48','line':'','coverage':'           : ',},
{'lineNum':'   49','line':'Note that:','coverage':'           : ',},
{'lineNum':'   50','line':'0x3d = Stack pointer low byte','coverage':'           : ',},
{'lineNum':'   51','line':'0x3e = Stack pointer high byte""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   52','line':'    \'out\': """Out to I/O Location','coverage':'           : ',},
{'lineNum':'   53','line':'','coverage':'           : ',},
{'lineNum':'   54','line':'Note that:','coverage':'           : ',},
{'lineNum':'   55','line':'0x3d = Stack pointer low byte','coverage':'           : ',},
{'lineNum':'   56','line':'0x3e = Stack pointer high byte','coverage':'           : ',},
{'lineNum':'   57','line':'0x3f = Status register accumulator""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   58','line':'    \'rcall\': """Relative Call Subroutine','coverage':'           : ',},
{'lineNum':'   59','line':'','coverage':'           : ',},
{'lineNum':'   60','line':'Note on <tt>rcall .+0</tt>: this is sometimes used to atomically decrement the stack pointer, \\','coverage':'           : ',},
{'lineNum':'   61','line':'in order to allocate space on the stack for later use.""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   62','line':'    \'ret\': \'Subroutine return\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   63','line':'    \'rjmp\': \'Relative Jump\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   64','line':'    \'sbrc\': \'Skip if Bit in Register Cleared\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   65','line':'    \'sbrs\': \'Skip if Bit in Register Set\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   66','line':'','coverage':'           : ',},
{'lineNum':'   67','line':'    \'add\': \'Add without Carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   68','line':'    \'adc\': \'Add with Carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   69','line':'    \'adiw\': """Add Immediate to Word','coverage':'           : ',},
{'lineNum':'   70','line':'Only possible for the register pairs:','coverage':'           : ',},
{'lineNum':'   71','line':'    r24:r25','coverage':'           : ',},
{'lineNum':'   72','line':'X = r26:r27','coverage':'           : ',},
{'lineNum':'   73','line':'Y = r28:r29','coverage':'           : ',},
{'lineNum':'   74','line':'Z = r30:r31""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   75','line':'    \'inc\': \'Increment\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   76','line':'','coverage':'           : ',},
{'lineNum':'   77','line':'    \'sub\': \'Subtract without Carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   78','line':'    \'sbc\': \'Subtract with Carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   79','line':'    \'subi\': \'Subtract Immediate\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   80','line':'    \'sbci\': \'Subtract Immediate with Carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   81','line':'    \'sbiw\': """Subtract Immediate from Word','coverage':'           : ',},
{'lineNum':'   82','line':'Only possible for the register pairs:','coverage':'           : ',},
{'lineNum':'   83','line':'    r24:r25','coverage':'           : ',},
{'lineNum':'   84','line':'X = r26:r27','coverage':'           : ',},
{'lineNum':'   85','line':'Y = r28:r29','coverage':'           : ',},
{'lineNum':'   86','line':'Z = r30:r31""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   87','line':'    \'dec\': \'Decrement\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   88','line':'','coverage':'           : ',},
{'lineNum':'   89','line':'    \'lsl\': \'Logical Shift Left\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   90','line':'    \'lsr\': \'Logical Shift Right\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   91','line':'    \'rol\': \'Rotate Left Through Carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   92','line':'    \'ror\': \'Rotate Right Through Carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   93','line':'    \'asr\': \'Arithmetic Shift Right\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   94','line':'','coverage':'           : ',},
{'lineNum':'   95','line':'    \'and\': \'Logical AND\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   96','line':'    \'andi\': \'Logical AND with Immediate\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   97','line':'    \'or\': \'Logical OR\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   98','line':'    \'ori\': \'Logical ORwith Immediate\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   99','line':'    \'eor\': \'Exclusive OR\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  100','line':'    \'com\': \'One\\\'s Complement\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  101','line':'    \'neg\': \'Two\\\'s Complement\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  102','line':'','coverage':'           : ',},
{'lineNum':'  103','line':'    \'cp\': \'Compare\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  104','line':'    \'cpc\': """Compare with Carry','coverage':'           : ',},
{'lineNum':'  105','line':'Compares two registers, also taking the previously set carry bit into account.""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  106','line':'    \'cpi\': \'Compare with Immediate\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  107','line':'','coverage':'           : ',},
{'lineNum':'  108','line':'    \'mov\': \'Copy Register\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  109','line':'    \'swap\': \'Swap Nibbles\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  110','line':'    \'bst\': \'Bit Store from Register to T\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  111','line':'    \'bld\': \'Bit Load from T to Register\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  112','line':'','coverage':'           : ',},
{'lineNum':'  113','line':'    \'push\': \'Push Register on Stack\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  114','line':'    \'pop\': \'Pop Register from Stack\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  115','line':'','coverage':'           : ',},
{'lineNum':'  116','line':'    \'sec\': \'Set Carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  117','line':'','coverage':'           : ',},
{'lineNum':'  118','line':'    \'cli\': \'Global Interrupt Disable\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  119','line':'    }','coverage':'           : ',},
{'lineNum':'  120','line':'','coverage':'           : ',},
{'lineNum':'  121','line':'atmel_conditions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  122','line':'    \'eq\': \'Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  123','line':'    \'ne\': \'Not Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  124','line':'    \'ge\': \'Greater or Equal, Signed\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  125','line':'    \'lt\': \'Less Than, Signed\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  126','line':'    \'pl\': \'Positive (Plus)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  127','line':'    \'mi\': \'Negative (Minus)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  128','line':'    \'tc\': \'T Flag Cleared\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  129','line':'    \'ts\': \'T Flag Set\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  130','line':'    \'cs\': \'Carry Set\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  131','line':'    \'cc\': \'Carry Cleared\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  132','line':'    }','coverage':'           : ',},
{'lineNum':'  133','line':'','coverage':'           : ',},
{'lineNum':'  134','line':'def crossproduct(s1, s2):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  135','line':'    ans = []','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  136','line':'    for a in s1:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  137','line':'        for b in s2:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  138','line':'            ans += [a + b]','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  139','line':'    return ans','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  140','line':'','coverage':'           : ',},
{'lineNum':'  141','line':'atmel_lists_inited = False','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  142','line':'if not atmel_lists_inited:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  143','line':'    conditional_instructions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  144','line':'        \'br\': """Branch if %s','coverage':'           : ',},
{'lineNum':'  145','line':'PC := PC + k + 2""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  146','line':'        }','coverage':'           : ',},
{'lineNum':'  147','line':'','coverage':'           : ',},
{'lineNum':'  148','line':'    for i in conditional_instructions:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  149','line':'        for c in atmel_conditions:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  150','line':'            atmel_instr_descriptions[i + c] = conditional_instructions[i] % (atmel_conditions[c])','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  151','line':'            atmel_conditionflag_users += [i + c]','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  152','line':'    atmel_lists_inited = True','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  153','line':'','coverage':'           : ',},
{'lineNum':'  154','line':'atmel_jumps = [\'rjmp\', \'jmp\'] + list(crossproduct([\'br\'], atmel_conditions.keys())) + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  155','line':'    atmel_calls + [\'sbrc\', \'sbrs\', \'sbic\', \'sbis\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  156','line':'','coverage':'           : ',},
{'lineNum':'  157','line':'atmel_branches = list(crossproduct([\'br\'], atmel_conditions.keys()) + \\','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  158','line':'    [\'sbrc\', \'sbrs\', \'sbic\', \'sbis\'])','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  159','line':'','coverage':'           : ',},
{'lineNum':'  160','line':'class AtmelArchitecture(architecture.Architecture):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  161','line':'    def __init__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  162','line':'        architecture.Architecture.__init__(self, atmel_jumps, atmel_calls,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  163','line':'            atmel_conditionflag_setters, atmel_conditionflag_users)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  164','line':'','coverage':'           : ',},
{'lineNum':'  165','line':'    def getJumpDestination(self, address, insn, args):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  166','line':'        #example:','coverage':'           : ',},
{'lineNum':'  167','line':'        #address = 84L','coverage':'           : ',},
{'lineNum':'  168','line':'        #insn = \'brge\'','coverage':'           : ',},
{'lineNum':'  169','line':'        #args = \'.+6     \'','coverage':'           : ',},
{'lineNum':'  170','line':'','coverage':'           : ',},
{'lineNum':'  171','line':'        if insn in [\'sbrc\', \'sbrs\']: #skip instructions','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  172','line':'            #TODO XXX: this depends on the size of the instruction skipped!','coverage':'           : ',},
{'lineNum':'  173','line':'            # (can be 16 or 32 bits (jmp, call, lds, sts))','coverage':'           : ',},
{'lineNum':'  174','line':'            return long(address + 4)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  175','line':'        if args[0] == \'.\': #relative jump','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  176','line':'            offset = long(args[1:])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  177','line':'            return long(address + offset + 2)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  178','line':'        else: #absolute jump?','coverage':'           : ',},
{'lineNum':'  179','line':'            return Architecture.getJumpDestination(self, address, insn, args)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  180','line':'','coverage':'           : ',},
{'lineNum':'  181','line':'    def getInstructionInfo(self, instruction):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  182','line':'        opcode = instruction.opcode','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  183','line':'        args = str(instruction.getArgs())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  184','line':'','coverage':'           : ',},
{'lineNum':'  185','line':'        args_list = args.split(", ")','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  186','line':'        args_dict = dict(','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  187','line':'            zip([\'arg\' + str(i) for i in range(1, len(args_list)+1)],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  188','line':'                args_list))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  189','line':'        description = atmel_instr_descriptions.get(instruction.opcode, \'\')','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  190','line':'','coverage':'           : ',},
{'lineNum':'  191','line':'        return {\'shortinfo\': opcode + " " + args,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  192','line':'                \'description\': description % args_dict,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  193','line':'                }','coverage':'           : ',},
{'lineNum':'  194','line':'','coverage':'           : ',},
{'lineNum':'  195','line':'    def isReturn(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  196','line':'        if insn.opcode == \'ret\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  197','line':'            return True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  198','line':'        return False','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  199','line':'','coverage':'           : ',},
{'lineNum':'  200','line':'    def isBranch(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  201','line':'        """Returns true if this instruction is a branch, that is it can either','coverage':'           : ',},
{'lineNum':'  202','line':'        be taken or not be taken."""','coverage':'           : ',},
{'lineNum':'  203','line':'        return insn.opcode in atmel_branches','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  204','line':'','coverage':'           : ',},
{'lineNum':'  205','line':'    parseArguments_opcodelook = {}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  206','line':'    def parseArguments(self, instr):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  207','line':'        """Parses an argument string, into a tuple, containing:','coverage':'           : ',},
{'lineNum':'  208','line':'            * A list of the registers read in this instruction','coverage':'           : ',},
{'lineNum':'  209','line':'            * A list of the registers written to in this instruction','coverage':'           : ',},
{'lineNum':'  210','line':'            * A list of the values used in this instruction"""','coverage':'           : ',},
{'lineNum':'  211','line':'        #XXX','coverage':'           : ',},
{'lineNum':'  212','line':'        return ([], [], [])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  213','line':'','coverage':'           : ',},
{'lineNum':'  214','line':'    def getInstructionEffect(self, ins, func):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  215','line':'        """','coverage':'           : ',},
{'lineNum':'  216','line':'        Returns a string describing the effects on the registers, of this','coverage':'           : ',},
{'lineNum':'  217','line':'        instruction. An example of such a string is:','coverage':'           : ',},
{'lineNum':'  218','line':'        "r1 = 5 ; r2 = r3 + r4 ; r7 = top"','coverage':'           : ',},
{'lineNum':'  219','line':'','coverage':'           : ',},
{'lineNum':'  220','line':'        Used for the value analysis.','coverage':'           : ',},
{'lineNum':'  221','line':'        """','coverage':'           : ',},
{'lineNum':'  222','line':'        #XXX','coverage':'           : ',},
{'lineNum':'  223','line':'        return ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  224','line':'','coverage':'           : ',},
{'lineNum':'  225','line':'    def getInstructionStackEffect(self, ins, func):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  226','line':'        #XXX, can only push/pop one reg.','coverage':'           : ',},
{'lineNum':'  227','line':'        opc = ins.opcode','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  228','line':'        if opc == \'push\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  229','line':'            (regsread, regswrite, values) = self.parseArguments(ins)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  230','line':'            return "push " + " ; ".join([self.normalize_regname(a) for a in regsread if a != \'sp\'])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  231','line':'        elif opc == \'pop\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  232','line':'            (regsread, regswrite, values) = self.parseArguments(ins)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  233','line':'            regstopop = [self.normalize_regname(a) for a in regswrite if a != \'sp\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  234','line':'            regstopop.reverse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  235','line':'            return "pop " + " ; ".join(regstopop)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  236','line':'        return ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  237','line':'','coverage':'           : ',},
{'lineNum':'  238','line':'    def get_ins_type(self, opcode):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  239','line':'        """','coverage':'           : ',},
{'lineNum':'  240','line':'        Returns the type of instruction.','coverage':'           : ',},
{'lineNum':'  241','line':'        One of: XXX TODO','coverage':'           : ',},
{'lineNum':'  242','line':'        """','coverage':'           : ',},
{'lineNum':'  243','line':'        if opcode in [\'sts\', \'st\', \'std\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  244','line':'            return \'INSTR_STORE\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  245','line':'        elif opcode in [\'lds\', \'ld\', \'ldd\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  246','line':'            return \'INSTR_LOAD\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  247','line':'        elif opcode == \'push\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  248','line':'            return \'INSTR_PUSH\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  249','line':'        elif opcode == \'pop\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  250','line':'            return \'INSTR_POP\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  251','line':'        #"common" instructions','coverage':'           : ',},
{'lineNum':'  252','line':'        elif opcode in [\'add\', \'adc\', \'sub\', \'subi\', \'sbc\', \'sbci\', \'and\', \'andi\', \'or\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  253','line':'            \'ori\', \'eor\', \'com\', \'neg\', \'sbr\', \'cbr\', \'inc\', \'dec\', \'tst\', \'clr\', \'ser\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  254','line':'            \'cp\', \'cpc\', \'cpi\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  255','line':'            \'mov\', \'movw\', \'ldi\', \'lsl\', \'lsr\', \'rol\', \'ror\', \'asr\', \'swap\', \'sbi\', \'cbi\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  256','line':'            \'sec\', \'bst\', \'bld\', \'cli\', \'in\', \'out\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  257','line':'            return "INSTR_OTHER"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  258','line':'        elif opcode in [\'sbiw\', \'adiw\', \'mul\', \'muls\', \'mulsu\', \'fmul\', \'fmuls\', \'fmulsu\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  259','line':'            return "INSTR_WORD_ARITH"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  260','line':'        #branches to static locations','coverage':'           : ',},
{'lineNum':'  261','line':'        elif opcode in [\'rjmp\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  262','line':'            return "INSTR_JUMP"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  263','line':'        elif opcode in list(crossproduct([\'br\'], atmel_conditions.keys())) + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  264','line':'            [\'sbrc\', \'sbrs\', \'sbic\', \'sbis\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  265','line':'            return "INSTR_BRANCH"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  266','line':'        elif opcode in [\'rcall\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  267','line':'            return "INSTR_RCALL"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  268','line':'        elif opcode in [\'call\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  269','line':'            return "INSTR_CALL"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  270','line':'        elif opcode in [\'ret\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  271','line':'            return "INSTR_RET"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  272','line':'        else:','coverage':'           : ',},
{'lineNum':'  273','line':'            print "Unhandled opcode \'" + opcode + "\'"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  274','line':'            return "INSTR_OTHER"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  275','line':'','coverage':'           : ',},
{'lineNum':'  276','line':'    def normalize_regname(self, regname):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  277','line':'        #XXX','coverage':'           : ',},
{'lineNum':'  278','line':'        return regname','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  279','line':'','coverage':'           : ',},
{'lineNum':'  280','line':'    def denormalize_regname(self, regname):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  281','line':'        #XXX','coverage':'           : ',},
{'lineNum':'  282','line':'        return regname','class':'lineNoCov','coverage':'  0 /   1  : ',},
];
var merged_data = [];
