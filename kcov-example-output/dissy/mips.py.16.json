var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'dissy', 'date' : '2014-06-09 19:17:46', 'instrumented' : 50, 'covered' : 39,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Simon Kagstrom <simon.kagstrom@gmail.com>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   MIPS arch specific stuff','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'import dissy.architecture, re','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'from dissy.architecture import Architecture','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   15','line':'','coverage':'           : ',},
{'lineNum':'   16','line':'REGISTER_REGEXP = "(?:[tsakv]{1}[0-9]{1})|sp|ra|fp|gp|at"','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   17','line':'ADDRESS_REGEXP  = "[0-9,a-f,A-F]+"','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'','coverage':'           : ',},
{'lineNum':'   19','line':'mips_jumps = [\'bgez\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'              \'bnez\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   21','line':'              \'beqz\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'              \'blez\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   23','line':'              \'bgez\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   24','line':'              \'bltz\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   25','line':'              \'bgtz\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   26','line':'              \'bc1f\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   27','line':'              \'bc1t\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   28','line':'              \'beq\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   29','line':'              \'bne\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   30','line':'              \'b\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   31','line':'              \'jal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   32','line':'              \'j\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   33','line':'              ]','coverage':'           : ',},
{'lineNum':'   34','line':'','coverage':'           : ',},
{'lineNum':'   35','line':'mips_calls = [\'jal\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   36','line':'','coverage':'           : ',},
{'lineNum':'   37','line':'instr_descriptions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   38','line':'    \'lbu\': \'Load Unsigned Byte\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   39','line':'    \'lb\': \'Load signed Byte\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'    \'li\': \'Load Immediate value to destination register\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   41','line':'    \'lui\' : \'Load Upper Immediate (set destination to v << 16)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   42','line':'    \'move\' : \'Copy between registers\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   43','line':'    \'jal\' : \'Jump And Link, jump to destination and store return address in ra (r31)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   44','line':'    \'or\' : \'Bitwise or\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   45','line':'    \'sb\' : \'Store Byte to memory\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   46','line':'    \'sw\' : \'Store 32-bit word to memory\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   47','line':'    \'sh\' : \'Store 16-bit word to memory\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   48','line':'    \'lb\' : \'Load Byte from memory, signed\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   49','line':'    \'lw\' : \'Load 32-bit value from memory\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   50','line':'    \'lh\' : \'Load 16-bit value from memory, signed\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   51','line':'    \'lbu\' : \'Load 16-bit value from memory, unsigned\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   52','line':'    \'lhu\' : \'Load 16-bit value from memory, unsigned\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   53','line':'}','coverage':'           : ',},
{'lineNum':'   54','line':'','coverage':'           : ',},
{'lineNum':'   55','line':'','coverage':'           : ',},
{'lineNum':'   56','line':'class MipsArchitecture(Architecture):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   57','line':'    def __init__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   58','line':'        Architecture.__init__(self, mips_jumps, mips_calls)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   59','line':'        self.jumpRegexp = re.compile("(?:(" + REGISTER_REGEXP + "),)+" + "(" + ADDRESS_REGEXP + ")");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   60','line':'','coverage':'           : ',},
{'lineNum':'   61','line':'    def getJumpDestination(self, address, insn, args):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   62','line':'        r = self.jumpRegexp.match(args)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   63','line':'        if r == None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   64','line':'            return Architecture.getJumpDestination(self, address, insn, args)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'        return Architecture.getJumpDestination(self, address, insn, r.group(2))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   66','line':'','coverage':'           : ',},
{'lineNum':'   67','line':'    def getInstructionInfo(self, instruction):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   68','line':'        opcode = instruction.getOpcode()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   69','line':'        args = str(instruction.getArgs())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   70','line':'        description = instr_descriptions.get(instruction.getOpcode(), \'\')','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   71','line':'','coverage':'           : ',},
{'lineNum':'   72','line':'        return {\'shortinfo\': opcode + " " + args,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   73','line':'                \'description\': description,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   74','line':'                }','coverage':'           : ',},
];
var merged_data = [];
