var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'dissy', 'date' : '2014-06-09 19:17:46', 'instrumented' : 382, 'covered' : 97,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Simon Kagstrom <simon.kagstrom@gmail.com>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   Arm arch specific stuff','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'import sys, architecture','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'from dissy.architecture import Architecture','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   15','line':'','coverage':'           : ',},
{'lineNum':'   16','line':'','coverage':'           : ',},
{'lineNum':'   17','line':'arm_calls = [\'bl\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'arm_conditionflag_setters = [\'cmp\', \'cmn\', \'tst\'] + \\','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   19','line':'    [i + "s" for i in','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'    [\'asr\', \'lsl\', \'lsr\', \'mla\', \'mov\', \'mul\', \'mvn\', \'ror\', \'rrx\', \'smlal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   21','line':'     \'smull\', \'umlal\', \'umull\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'    ]','coverage':'           : ',},
{'lineNum':'   23','line':'arm_conditionflag_users = [\'\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   24','line':'','coverage':'           : ',},
{'lineNum':'   25','line':'arm_instr_descriptions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   26','line':'    \'adc\': \'Add with carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   27','line':'    \'add\': \'Add\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   28','line':'    \'and\': \'Logical and\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   29','line':'    \'asr\': \'Arithmetic Shift Right\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   30','line':'    \'asrs\': \'Arithmetic Shift Right and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   31','line':'    \'bal\': \'Unconditional Branch\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   32','line':'    \'bic\': \'Bit Clear\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   33','line':'    \'blal\': \'Unconditional Branch and Link\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'    \'bl\': """Branch with Link','coverage':'           : ',},
{'lineNum':'   35','line':'LR := Address of next instruction, PC := label""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   36','line':'    \'bx\': """Branch and eXchange','coverage':'           : ',},
{'lineNum':'   37','line':'PC := Rm""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   38','line':'    \'cmn\': \'Compare (negative) two values and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   39','line':'    \'cmp\': \'Compare two values and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'    \'eor\': \'Bitwise Exclusive OR\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   41','line':'    \'eors\': \'Bitwise Exclusive OR and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   42','line':'    \'ldm\': \'Load Multiple\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   43','line':'    \'ldr\': \'Load Register\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   44','line':'    \'ldrb\': \'Load Register Byte\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   45','line':'    \'ldrh\': \'Load Register Halfword\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   46','line':'    \'ldrsh\': \'Load Register Halfword and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   47','line':'    \'lsl\': \'Logical Shift Left\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   48','line':'    \'lsls\': \'Logical Shift Left and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   49','line':'    \'lsr\': \'Logical Shift Right\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   50','line':'    \'lsrs\': \'Logical Shift Right and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   51','line':'    \'mla\': \'Multiply and Accumulate\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   52','line':'    \'mls\': \'Multiply and Subtract\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   53','line':'    \'mov\': \'Move\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   54','line':'    \'mul\': \'Multiply\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   55','line':'    \'muls\': \'Multiply and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   56','line':'    \'mvn\': \'Move and negate (XOR 0xFFFFFFFF)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   57','line':'    \'orr\': \'Bitwise OR\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   58','line':'    \'orrs\': \'Bitwise OR and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   59','line':'    \'pop\': """Pop from the stack.','coverage':'           : ',},
{'lineNum':'   60','line':'Canonical form of "ldm SP!, &lt;reglist&gt;\\"""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   61','line':'    \'push\': """Push on the stack.','coverage':'           : ',},
{'lineNum':'   62','line':'Canonical form of "stmdb SP!, &lt;reglist&gt;\\"""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   63','line':'    \'rsb\': \'Reverse Subtract\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   64','line':'    \'rsbs\': \'Reverse Subtract and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   65','line':'    \'smull\': """Signed Multiply Long','coverage':'           : ',},
{'lineNum':'   66','line':'%(arg1)s,%(arg2)s := signed(%(arg3)s * %(arg4)s)""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   67','line':'    \'stm\': \'Store Multiple\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   68','line':'    \'str\': \'Store Register\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   69','line':'    \'strb\': \'Store Register Byte\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   70','line':'    \'strh\': \'Store Register Halfword\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   71','line':'    \'strsh\': \'Store Register Halfword and set condition flags\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   72','line':'    \'sub\': \'Subtract\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   73','line':'    \'tst\': \'Test\'','coverage':'           : ',},
{'lineNum':'   74','line':'    }','coverage':'           : ',},
{'lineNum':'   75','line':'','coverage':'           : ',},
{'lineNum':'   76','line':'arm_conditions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   77','line':'    \'cc\': \'Carry Clear\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   78','line':'    \'cs\': \'Carry Set\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   79','line':'    \'eq\': \'Equal (Zero Set)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   80','line':'    \'ge\': \'Signed Greater than or Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   81','line':'    \'gt\': \'Signed Greater Than\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   82','line':'    \'hi\': \'Unsigned Higher Than\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   83','line':'    \'hs\': \'Unsigned Higher or Same\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   84','line':'    \'le\': \'Signed Less than or Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   85','line':'    \'lo\': \'Unsigned Lower Than\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   86','line':'    \'ls\': \'Unsigned Lower or Same\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   87','line':'    \'lt\': \'Signed Less Than\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   88','line':'    \'mi\': \'Minus (Negative)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   89','line':'    \'ne\': \'Not Equal (Zero Clear)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   90','line':'    \'pl\': \'Plus (Positive)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   91','line':'    \'vc\': \'Overflow Clear\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   92','line':'    \'vs\': \'Overflow Set\'','coverage':'           : ',},
{'lineNum':'   93','line':'    }','coverage':'           : ',},
{'lineNum':'   94','line':'','coverage':'           : ',},
{'lineNum':'   95','line':'arm_lists_inited = False','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   96','line':'if not arm_lists_inited:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   97','line':'    conditional_instructions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   98','line':'        \'add\': """Add on %s""",','coverage':'           : ',},
{'lineNum':'   99','line':'        \'b\': """Branch on %s','coverage':'           : ',},
{'lineNum':'  100','line':'PC := label, label is this instruction +/-32Mb""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  101','line':'        \'bl\': """Branch and Link on %s""",','coverage':'           : ',},
{'lineNum':'  102','line':'        \'bx\': """Branch and eXchange on %s','coverage':'           : ',},
{'lineNum':'  103','line':'PC := Rm','coverage':'           : ',},
{'lineNum':'  104','line':'Change to Thumb mode if Rm[0] is 1, change to ARM mode if Rm[0] is 0""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  105','line':'        \'eor\': """Bitwise Exclusive OR on %s""",','coverage':'           : ',},
{'lineNum':'  106','line':'        \'mov\': """Move on %s""",','coverage':'           : ',},
{'lineNum':'  107','line':'        \'orr\': """Bitwise OR on %s""",','coverage':'           : ',},
{'lineNum':'  108','line':'        \'sub\': """Subtract on %s"""','coverage':'           : ',},
{'lineNum':'  109','line':'        }','coverage':'           : ',},
{'lineNum':'  110','line':'','coverage':'           : ',},
{'lineNum':'  111','line':'    for i in conditional_instructions:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  112','line':'        for c in arm_conditions:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  113','line':'            arm_instr_descriptions[i + c] = conditional_instructions[i] % (arm_conditions[c])','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  114','line':'            arm_conditionflag_users += [i + c]','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  115','line':'    arm_lists_inited = True','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  116','line':'','coverage':'           : ',},
{'lineNum':'  117','line':'def crossproduct(s1, s2):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  118','line':'    ans = []','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  119','line':'    for a in s1:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  120','line':'        for b in s2:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  121','line':'            ans += [a + b]','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  122','line':'    return ans','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  123','line':'','coverage':'           : ',},
{'lineNum':'  124','line':'','coverage':'           : ',},
{'lineNum':'  125','line':'','coverage':'           : ',},
{'lineNum':'  126','line':'arm_jumps = list(crossproduct([\'b\', \'bl\'], arm_conditions.keys() + [\'\']))','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  127','line':'','coverage':'           : ',},
{'lineNum':'  128','line':'arm_branches = list(crossproduct([\'b\', \'bl\'], arm_conditions.keys()))','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  129','line':'','coverage':'           : ',},
{'lineNum':'  130','line':'class ArmArchitecture(architecture.Architecture):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  131','line':'    def __init__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  132','line':'        architecture.Architecture.__init__(self, arm_jumps, arm_calls,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  133','line':'            arm_conditionflag_setters, arm_conditionflag_users)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  134','line':'','coverage':'           : ',},
{'lineNum':'  135','line':'    def getInstructionInfo(self, instruction):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  136','line':'        opcode = instruction.opcode','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  137','line':'        args = str(instruction.getArgs())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  138','line':'','coverage':'           : ',},
{'lineNum':'  139','line':'        args_list = args.split(", ")','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  140','line':'        args_dict = dict(','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  141','line':'            zip([\'arg\' + str(i) for i in range(1, len(args_list)+1)],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  142','line':'                args_list))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  143','line':'        description = arm_instr_descriptions.get(instruction.opcode, \'\')','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  144','line':'','coverage':'           : ',},
{'lineNum':'  145','line':'        return {\'shortinfo\': opcode + " " + args,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  146','line':'                \'description\': description % args_dict,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  147','line':'                }','coverage':'           : ',},
{'lineNum':'  148','line':'','coverage':'           : ',},
{'lineNum':'  149','line':'    def isReturn(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  150','line':'        if insn.opcode == \'bx\' and insn.getArgs() == \'lr\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  151','line':'            return True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  152','line':'        return False','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  153','line':'','coverage':'           : ',},
{'lineNum':'  154','line':'    def isBranch(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  155','line':'        """Returns true if this instruction is a branch, that is it can either','coverage':'           : ',},
{'lineNum':'  156','line':'        be taken or not be taken."""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  157','line':'        return insn.opcode in arm_branches','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  158','line':'','coverage':'           : ',},
{'lineNum':'  159','line':'    parseArguments_opcodelook = {}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  160','line':'    def parseArguments(self, instr):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  161','line':'        """Parses an argument string, into a tuple, containing:','coverage':'           : ',},
{'lineNum':'  162','line':'            * A list of the registers read in this instruction','coverage':'           : ',},
{'lineNum':'  163','line':'            * A list of the registers written to in this instruction','coverage':'           : ',},
{'lineNum':'  164','line':'            * A list of the values used in this instruction"""','coverage':'           : ',},
{'lineNum':'  165','line':'','coverage':'           : ',},
{'lineNum':'  166','line':'        def parseComSepList(lstr):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  167','line':'            if not \'[\' in lstr and not \'{\' in lstr:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  168','line':'                return lstr.replace(\' \', \'\').split(\',\')','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  169','line':'            ret = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  170','line':'            tmp = ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  171','line':'            stack = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  172','line':'            for c in lstr:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  173','line':'                if c in "{[":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  174','line':'                    stack += [c]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  175','line':'                    tmp += c','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  176','line':'                elif c in "]}":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  177','line':'                    tmp += c','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  178','line':'                    c2 = stack.pop()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  179','line':'                    if c == "]" and c2 == "[" or \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  180','line':'                        c == "}" and c2 == "{":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  181','line':'                        ret += [tmp]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  182','line':'                        tmp = ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  183','line':'                    else:','coverage':'           : ',},
{'lineNum':'  184','line':'                        raise ValueError("unbalanced parenthesis")','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  185','line':'                elif c == \' \':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  186','line':'                    pass','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  187','line':'                elif stack == [] and c == \',\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  188','line':'                    if tmp != \'\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  189','line':'                        ret += [tmp]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  190','line':'                    tmp = ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  191','line':'                elif stack == []:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  192','line':'                    tmp += c','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  193','line':'                else:','coverage':'           : ',},
{'lineNum':'  194','line':'                    tmp += c','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  195','line':'            if tmp:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  196','line':'                ret += [tmp]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  197','line':'            return ret','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  198','line':'        def isRegister(s):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  199','line':'            if s != "" and s[0] == \'r\' and s[1:].isdigit(): #r0..r15','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  200','line':'                return True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  201','line':'            if s in [\'sl\', #r10 = gcc "got pointer"?','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  202','line':'                    \'fp\', #r11 = gcc frame pointer','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  203','line':'                    \'ip\', #r12 = gcc "scratch register"?','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  204','line':'                    \'sp\', #r13, stack pointer','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  205','line':'                    \'lr\', #r14, link register','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  206','line':'                    \'pc\']: #r15, program counter','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  207','line':'                return True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  208','line':'            return False','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  209','line':'        def isValue(s):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  210','line':'            if s != "" and s[0] == \'#\' and s[1:].isdigit():','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  211','line':'                return True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  212','line':'            return False','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  213','line':'        regwrite = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  214','line':'        regread = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  215','line':'        values = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  216','line':'        args = parseComSepList(instr.args)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  217','line':'        values = [int(a[1:]) for a in args if isValue(a)]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  218','line':'','coverage':'           : ',},
{'lineNum':'  219','line':'        #Lazy init','coverage':'           : ',},
{'lineNum':'  220','line':'        if not self.parseArguments_opcodelook:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  221','line':'            for opcode in crossproduct([\'b\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  222','line':'                self.parseArguments_opcodelook[opcode] = \'b\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  223','line':'            for opcode in crossproduct([\'bl\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  224','line':'                self.parseArguments_opcodelook[opcode] = \'bl\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  225','line':'            for opcode in crossproduct([\'bx\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  226','line':'                self.parseArguments_opcodelook[opcode] = \'bx\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  227','line':'            for opcode in crossproduct([\'blx\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  228','line':'                self.parseArguments_opcodelook[opcode] = \'blx\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  229','line':'            for opcode in crossproduct([\'ldr\', \'ldrb\', \'ldrh\', \'ldrsh\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  230','line':'                self.parseArguments_opcodelook[opcode] = \'ldr\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  231','line':'            for opcode in crossproduct([\'ldm\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  232','line':'                self.parseArguments_opcodelook[opcode] = \'ldm\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  233','line':'            for opcode in crossproduct([\'str\', \'strb\', \'strh\', \'strsh\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  234','line':'                self.parseArguments_opcodelook[opcode] = \'str\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  235','line':'            for opcode in crossproduct([\'stm\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  236','line':'                self.parseArguments_opcodelook[opcode] = \'stm\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  237','line':'            for opcode in crossproduct([\'push\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  238','line':'                self.parseArguments_opcodelook[opcode] = \'push\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  239','line':'            for opcode in crossproduct([\'pop\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  240','line':'                self.parseArguments_opcodelook[opcode] = \'pop\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  241','line':'            for opcode in crossproduct([\'stmia\', \'stmib\', \'stmda\', \'stmdb\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  242','line':'                self.parseArguments_opcodelook[opcode] = \'stm_nonstandard\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  243','line':'            for opcode in crossproduct([\'ldmia\', \'ldmib\', \'ldmda\', \'ldmdb\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  244','line':'                self.parseArguments_opcodelook[opcode] = \'ldm_nonstandard\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  245','line':'            for opcode in crossproduct([\'smull\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  246','line':'                self.parseArguments_opcodelook[opcode] = \'smull\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  247','line':'            for opcode in crossproduct([\'mla\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  248','line':'                self.parseArguments_opcodelook[opcode] = \'mla\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  249','line':'            for opcode in crossproduct([\'mul\', \'muls\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  250','line':'                self.parseArguments_opcodelook[opcode] = \'mul\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  251','line':'','coverage':'           : ',},
{'lineNum':'  252','line':'        opcode = instr.opcode','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  253','line':'        opcodetype = self.parseArguments_opcodelook.get(opcode, opcode)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  254','line':'        if opcode[:3] in [\'cmp\', \'cmn\', \'tst\', \'teq\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  255','line':'            regread = [a for a in args if isRegister(a)]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  256','line':'        elif opcode[:3] in [\'add\', \'and\', \'asr\', \'eor\', \'lsl\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  257','line':'                                       \'lsr\', \'mov\', \'mvn\', \'orr\', \'rsb\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  258','line':'                                       \'sub\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  259','line':'            regwrite = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  260','line':'            regread = [a for a in args[1:] if isRegister(a)]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  261','line':'        #branches','coverage':'           : ',},
{'lineNum':'  262','line':'        elif opcodetype == \'b\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  263','line':'            regwrite = [\'pc\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  264','line':'        elif opcodetype == \'bl\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  265','line':'            regwrite = [\'pc\', \'lr\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  266','line':'        elif opcodetype == \'bx\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  267','line':'            regwrite = [\'pc\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  268','line':'            regread = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  269','line':'        elif opcodetype == \'blx\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  270','line':'            regwrite = [\'pc\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  271','line':'            regread = isRegister(args[0]) and [args[0]] or []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  272','line':'        #load','coverage':'           : ',},
{'lineNum':'  273','line':'        elif opcodetype == \'ldr\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  274','line':'            regwrite = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  275','line':'            if args[1].startswith(\'[\'):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  276','line':'                offsetl = parseComSepList(args[1][1:-1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  277','line':'                regread = [r for r in offsetl if isRegister(r)]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  278','line':'                values = [int(r[1:]) for r in offsetl if r[0] == \'#\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  279','line':'        elif opcodetype == \'ldm\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  280','line':'            regread = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  281','line':'            regwrite = parseComSepList(args[1][1:-1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  282','line':'        #store','coverage':'           : ',},
{'lineNum':'  283','line':'        elif opcodetype == \'str\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  284','line':'            regread = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  285','line':'            if args[1].startswith(\'[\'):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  286','line':'                offsetl = parseComSepList(args[1][1:-1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  287','line':'                regread += [r for r in offsetl if isRegister(r)]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  288','line':'            #postindexing','coverage':'           : ',},
{'lineNum':'  289','line':'            if len(args) == 3:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  290','line':'                regwrite += [regread[1]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  291','line':'                if isRegister(args[2]):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  292','line':'                    regread += [args[2]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  293','line':'        elif opcodetype == \'stm\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  294','line':'            regread = [args[0]] + parseComSepList(args[1][1:-1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  295','line':'        #push','coverage':'           : ',},
{'lineNum':'  296','line':'        elif opcodetype == \'push\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  297','line':'            regwrite = [\'sp\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  298','line':'            regread = [\'sp\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  299','line':'            reglist = parseComSepList(args[0][1:-1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  300','line':'            regread += reglist','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  301','line':'        #pop','coverage':'           : ',},
{'lineNum':'  302','line':'        elif opcodetype == \'pop\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  303','line':'            regwrite = [\'sp\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  304','line':'            regread = [\'sp\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  305','line':'            reglist = parseComSepList(args[0][1:-1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  306','line':'            regwrite += reglist','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  307','line':'        #store multiple','coverage':'           : ',},
{'lineNum':'  308','line':'        elif opcodetype == \'stm_nonstandard\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  309','line':'            regwrite = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  310','line':'            regread = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  311','line':'            reglist = parseComSepList(args[1][1:-1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  312','line':'            regread += reglist','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  313','line':'        #load multiple','coverage':'           : ',},
{'lineNum':'  314','line':'        elif opcodetype == \'ldm_nonstandard\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  315','line':'            regwrite = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  316','line':'            regread = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  317','line':'            reglist = parseComSepList(args[1][1:-1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  318','line':'            regwrite += reglist','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  319','line':'        elif opcodetype == \'smull\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  320','line':'            regwrite = [args[0], args[1]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  321','line':'            regread = [args[2], args[3]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  322','line':'        elif opcodetype == \'mla\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  323','line':'            regwrite = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  324','line':'            regread = args[1:]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  325','line':'        elif opcodetype == \'mul\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  326','line':'            regwrite = [args[0]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  327','line':'            regread = [args[1], args[2]]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  328','line':'        elif opcode == \'.word\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  329','line':'            return ([], [], [])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  330','line':'        else:','coverage':'           : ',},
{'lineNum':'  331','line':'            raise ValueError("Unknown instruction opcode: " + str(instr))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  332','line':'','coverage':'           : ',},
{'lineNum':'  333','line':'        return (regread, regwrite, values)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  334','line':'','coverage':'           : ',},
{'lineNum':'  335','line':'    def getInstructionEffect(self, ins, func):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  336','line':'        """','coverage':'           : ',},
{'lineNum':'  337','line':'        Returns a string describing the effects on the registers, of this','coverage':'           : ',},
{'lineNum':'  338','line':'        instruction. An example of such a string is:','coverage':'           : ',},
{'lineNum':'  339','line':'        "r1 = 5 ; r2 = r3 + r4 ; r7 = top"','coverage':'           : ',},
{'lineNum':'  340','line':'','coverage':'           : ',},
{'lineNum':'  341','line':'        Used for the value analysis.','coverage':'           : ',},
{'lineNum':'  342','line':'        """','coverage':'           : ',},
{'lineNum':'  343','line':'        opc = ins.opcode','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  344','line':'        (regsread, regswrite, values) = self.parseArguments(ins)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  345','line':'','coverage':'           : ',},
{'lineNum':'  346','line':'        if opc == "ldr":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  347','line':'            #PC relative load','coverage':'           : ',},
{'lineNum':'  348','line':'            if regsread == [\'pc\'] and len(values) == 1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  349','line':'                #Calculate address (+8 to account for pipeline)','coverage':'           : ',},
{'lineNum':'  350','line':'                addr = ins.address + 8 + values[0]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  351','line':'                #Find data','coverage':'           : ',},
{'lineNum':'  352','line':'                data = func.lookup(addr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  353','line':'                assert data.opcode == \'.word\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  354','line':'                return self.normalize_regname(regswrite[0]) + "=" + str(int(data.getArgs(), 16))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  355','line':'                #print func.getAll()','coverage':'           : ',},
{'lineNum':'  356','line':'        elif opc in [\'mov\', \'movs\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  357','line':'            #mov rX, value','coverage':'           : ',},
{'lineNum':'  358','line':'            if len(regswrite) == 1 and regsread == [] and len(values) == 1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  359','line':'                return self.normalize_regname(regswrite[0]) + "=" + str(values[0])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  360','line':'            #mov rX, rY','coverage':'           : ',},
{'lineNum':'  361','line':'            elif len(regswrite) == 1 and len(regsread) == 1 and len(values) == 0:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  362','line':'                return self.normalize_regname(regswrite[0]) + "=" + self.normalize_regname(regsread[0])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  363','line':'        elif opc in [\'add\', \'adds\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  364','line':'            #add rX, rY, value','coverage':'           : ',},
{'lineNum':'  365','line':'            if len(regswrite) == 1 and len(regsread) == 1 and len(values) == 1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  366','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  367','line':'                    self.normalize_regname(regsread[0]) + " + " + str(values[0])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  368','line':'            #add rX, rY, rZ','coverage':'           : ',},
{'lineNum':'  369','line':'            elif len(regswrite) == 1 and len(regsread) == 2 and len(values) == 0:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  370','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  371','line':'                    self.normalize_regname(regsread[0]) + " + " + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  372','line':'                    self.normalize_regname(regsread[1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  373','line':'        elif opc in [\'sub\', \'subs\']:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  374','line':'            #sub rX, rY, value','coverage':'           : ',},
{'lineNum':'  375','line':'            if len(regswrite) == 1 and len(regsread) == 1 and len(values) == 1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  376','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  377','line':'                    self.normalize_regname(regsread[0]) + " - " + str(values[0])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  378','line':'            #sub rX, rY, rZ','coverage':'           : ',},
{'lineNum':'  379','line':'            elif len(regswrite) == 1 and len(regsread) == 2 and len(values) == 0:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  380','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  381','line':'                    self.normalize_regname(regsread[0]) + " - " + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  382','line':'                    self.normalize_regname(regsread[1])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  383','line':'        elif opc == \'rsb\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  384','line':'            #rsb rX, rY, value   (rX = value - rY)','coverage':'           : ',},
{'lineNum':'  385','line':'            if len(regswrite) == 1 and len(regsread) == 1 and len(values) == 1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  386','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  387','line':'                    str(values[0]) + " - " + self.normalize_regname(regsread[0])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  388','line':'            #rsb rX, rY, rZ','coverage':'           : ',},
{'lineNum':'  389','line':'            elif len(regswrite) == 1 and len(regsread) == 2 and len(values) == 0:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  390','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  391','line':'                    self.normalize_regname(regsread[1]) + " - " + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  392','line':'                    self.normalize_regname(regsread[0])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  393','line':'        elif opc == \'lsl\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  394','line':'            #TODO XXX - is this totally correct? See','coverage':'           : ',},
{'lineNum':'  395','line':'            #http://en.wikipedia.org/wiki/Arithmetic_shift and','coverage':'           : ',},
{'lineNum':'  396','line':'            #http://en.wikipedia.org/wiki/Logical_shift','coverage':'           : ',},
{'lineNum':'  397','line':'','coverage':'           : ',},
{'lineNum':'  398','line':'            #lsl rX, rY, value','coverage':'           : ',},
{'lineNum':'  399','line':'            if len(regswrite) == 1 and len(regsread) == 1 and len(values) == 1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  400','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  401','line':'                    self.normalize_regname(regsread[0]) + " << " + str(values[0])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  402','line':'        elif opc == \'asr\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  403','line':'            #asr rX, rY, value','coverage':'           : ',},
{'lineNum':'  404','line':'            if len(regswrite) == 1 and len(regsread) == 1 and len(values) == 1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  405','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  406','line':'                    self.normalize_regname(regsread[0]) + " >> " + str(values[0])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  407','line':'        elif opc == \'push\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  408','line':'            dataregs = [a for a in regsread if a != \'sp\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  409','line':'            return self.normalize_regname(\'sp\') + " = " + self.normalize_regname(\'sp\') + " - " + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  410','line':'                str(len(dataregs) * 4)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  411','line':'        elif opc == \'pop\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  412','line':'            dataregs = [a for a in regswrite if a != \'sp\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  413','line':'            return "".join(map(lambda x: self.normalize_regname(x) + " = top ; ", dataregs))+ \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  414','line':'                self.normalize_regname(\'sp\') + " = " + self.normalize_regname(\'sp\') + " + " + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  415','line':'                str(len(dataregs) * 4)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  416','line':'        #store with postindexing','coverage':'           : ',},
{'lineNum':'  417','line':'        elif opc == \'str\' and len(regswrite) == 1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  418','line':'            #register offset','coverage':'           : ',},
{'lineNum':'  419','line':'            if len(regsread) == 3 and len(values) == 0:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  420','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  421','line':'                    self.normalize_regname(regswrite[0]) + " + " + self.normalize_regname(regsread[2])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  422','line':'            #immediate offset','coverage':'           : ',},
{'lineNum':'  423','line':'            if len(regsread) == 2 and len(values) == 1:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  424','line':'                return self.normalize_regname(regswrite[0]) + "=" + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  425','line':'                    self.normalize_regname(regswrite[0]) + " + " + str(values[0])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  426','line':'','coverage':'           : ',},
{'lineNum':'  427','line':'        #unknown effect','coverage':'           : ',},
{'lineNum':'  428','line':'        if len(regswrite) > 0:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  429','line':'            return "".join(map(lambda x: self.normalize_regname(x) + " = top ; ", regswrite))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  430','line':'','coverage':'           : ',},
{'lineNum':'  431','line':'        #No effect','coverage':'           : ',},
{'lineNum':'  432','line':'        return ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  433','line':'','coverage':'           : ',},
{'lineNum':'  434','line':'    def getInstructionStackEffect(self, ins, func):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  435','line':'        opc = ins.opcode','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  436','line':'        if opc == \'push\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  437','line':'            (regsread, regswrite, values) = self.parseArguments(ins)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  438','line':'            return "push " + " ; ".join([self.normalize_regname(a) for a in regsread if a != \'sp\'])','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  439','line':'        elif opc == \'pop\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  440','line':'            (regsread, regswrite, values) = self.parseArguments(ins)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  441','line':'            regstopop = [self.normalize_regname(a) for a in regswrite if a != \'sp\']','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  442','line':'            regstopop.reverse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  443','line':'            return "pop " + " ; ".join(regstopop)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  444','line':'        return ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  445','line':'','coverage':'           : ',},
{'lineNum':'  446','line':'    def get_ins_type(self, opcode):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  447','line':'        """','coverage':'           : ',},
{'lineNum':'  448','line':'        Returns the type of instruction.','coverage':'           : ',},
{'lineNum':'  449','line':'        One of: XXX TODO','coverage':'           : ',},
{'lineNum':'  450','line':'        """','coverage':'           : ',},
{'lineNum':'  451','line':'        #XXX - this can be optimized _greatly_ by lazy initing the crossproducts,','coverage':'           : ',},
{'lineNum':'  452','line':'        #instead of constructing them each time.','coverage':'           : ',},
{'lineNum':'  453','line':'        if opcode in crossproduct([\'stm\', \'stmda\', \'stmdb\', \'stmia\', \'stmib\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  454','line':'                                   \'str\', \'strb\', \'strh\', \'strsh\'],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  455','line':'                                  arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  456','line':'            return \'INSTR_STORE\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  457','line':'        elif opcode in crossproduct([\'ldm\', \'ldmda\', \'ldmdb\', \'ldmia\', \'ldmib\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  458','line':'                                     \'ldr\', \'ldreq\', \'ldrls\'],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  459','line':'                                    arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  460','line':'            return \'INSTR_LOAD\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  461','line':'        elif opcode in crossproduct([\'ldrb\', \'ldrh\', \'ldrsh\'],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  462','line':'                                    arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  463','line':'            return \'INSTR_LOADROTATE\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  464','line':'        elif opcode == \'push\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  465','line':'            return \'INSTR_PUSH\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  466','line':'        elif opcode == \'pop\':','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  467','line':'            return \'INSTR_POP\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  468','line':'        #"common" instructions','coverage':'           : ',},
{'lineNum':'  469','line':'        elif opcode in crossproduct([\'add\', \'adds\', \'and\', \'asr\', \'asrs\', \'cmn\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  470','line':'                                     \'cmp\', \'eor\', \'eors\', \'lsl\', \'lsls\', \'lsr\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  471','line':'                                     \'lsrs\', \'mov\', \'mvn\', \'orr\', \'orrs\', \'rsb\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  472','line':'                                     \'rsbs\', \'sub\', \'subs\', \'tst\', \'movs\', \'teq\'],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  473','line':'                                     arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  474','line':'            return "INSTR_OTHER"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  475','line':'        elif opcode in crossproduct([\'mul\', \'mla\', \'muls\'],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  476','line':'                                    arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  477','line':'            return "INSTR_MUL1"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  478','line':'        elif opcode in crossproduct([\'smull\', \'umull\', \'smlal\', \'umlal\'],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  479','line':'                                    arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  480','line':'            return "INSTR_MUL2"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  481','line':'        #branches to static locations','coverage':'           : ',},
{'lineNum':'  482','line':'        elif opcode in crossproduct([\'b\', \'bl\', \'bx\'], arm_conditions.keys() + [\'\']):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  483','line':'            return "INSTR_OTHER"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  484','line':'        else:','coverage':'           : ',},
{'lineNum':'  485','line':'            #print "Unhandled opcode \'" + opcode + "\'"','coverage':'           : ',},
{'lineNum':'  486','line':'            return "INSTR_OTHER"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  487','line':'','coverage':'           : ',},
{'lineNum':'  488','line':'    def normalize_regname(self, regname):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  489','line':'        return {\'sl\': \'r10\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  490','line':'                \'fp\': \'r11\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  491','line':'                \'ip\': \'r12\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  492','line':'                \'sp\': \'r13\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  493','line':'                \'lr\': \'r14\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  494','line':'                #\'pc\': \'r15\'','coverage':'           : ',},
{'lineNum':'  495','line':'                }.get(regname, regname)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  496','line':'','coverage':'           : ',},
{'lineNum':'  497','line':'    def denormalize_regname(self, regname):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  498','line':'        return {\'r10\': \'sl\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  499','line':'                \'r11\': \'fp\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  500','line':'                \'r12\': \'ip\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  501','line':'                \'r13\': \'sp\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  502','line':'                \'r14\': \'lr\',','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  503','line':'                #\'r15\': \'pc\'','coverage':'           : ',},
{'lineNum':'  504','line':'                }.get(regname, regname)','class':'lineNoCov','coverage':'  0 /   1  : ',},
];
var merged_data = [];
