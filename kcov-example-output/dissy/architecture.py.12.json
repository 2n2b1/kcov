var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'dissy', 'date' : '2014-06-09 19:17:46', 'instrumented' : 50, 'covered' : 10,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Simon Kagstrom <simon.kagstrom@gmail.com>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   Base-class for architecture handling','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'class Architecture:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'    """','coverage':'           : ',},
{'lineNum':'   15','line':'    Architecture base class. Inherit this to implement','coverage':'           : ',},
{'lineNum':'   16','line':'    architecture-specific handling (see intel.py and mips.py)','coverage':'           : ',},
{'lineNum':'   17','line':'    """','coverage':'           : ',},
{'lineNum':'   18','line':'    def __init__(self, arch_jumps = [], arch_calls = [], arch_conditionflagsetters = [],','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   19','line':'        arch_conditionflagusers = []):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'        self.jumps = {}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   21','line':'        self.calls = {} # To handle reverse-engineering','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   22','line':'        self.conditionflagsetters = {}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   23','line':'        self.conditionflagusers = {}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   24','line':'        for s in arch_jumps:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   25','line':'            self.jumps[s.strip()] = True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   26','line':'        for s in arch_calls:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   27','line':'            self.calls[s.strip()] = True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   28','line':'        for s in arch_conditionflagsetters:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   29','line':'            self.conditionflagsetters[s.strip()] = True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   30','line':'        for s in arch_conditionflagusers:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   31','line':'            self.conditionflagusers[s.strip()] = True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   32','line':'','coverage':'           : ',},
{'lineNum':'   33','line':'    def isJump(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'        "Returns true if this instruction is a jump"','coverage':'           : ',},
{'lineNum':'   35','line':'        return insn in self.jumps','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   36','line':'','coverage':'           : ',},
{'lineNum':'   37','line':'    def isCall(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   38','line':'        "Returns true if this instruction is a call"','coverage':'           : ',},
{'lineNum':'   39','line':'        return insn in self.calls','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   40','line':'','coverage':'           : ',},
{'lineNum':'   41','line':'    def isConditionFlagSetter(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   42','line':'        "Returns true if this instruction sets the condition flags"','coverage':'           : ',},
{'lineNum':'   43','line':'        return insn in self.conditionflagsetters','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   44','line':'','coverage':'           : ',},
{'lineNum':'   45','line':'    def isConditionFlagUser(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   46','line':'        "Returns true if this instruction uses the condition flags"','coverage':'           : ',},
{'lineNum':'   47','line':'        return insn in self.conditionflagusers','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   48','line':'','coverage':'           : ',},
{'lineNum':'   49','line':'    def getJumpDestination(self, address, insn, args):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   50','line':'        """Parse the instruction to return the jump destination. The','coverage':'           : ',},
{'lineNum':'   51','line':'        base class only tries to convert the argument to a number. See','coverage':'           : ',},
{'lineNum':'   52','line':'        mips.py for a more advanced translation.','coverage':'           : ',},
{'lineNum':'   53','line':'        """','coverage':'           : ',},
{'lineNum':'   54','line':'        try:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   55','line':'            return long(args, 16)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   56','line':'        except ValueError:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   57','line':'            pass','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   58','line':'        return None','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   59','line':'','coverage':'           : ',},
{'lineNum':'   60','line':'from dissy import mips, intel, ppc, arm, atmel','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   61','line':'','coverage':'           : ',},
{'lineNum':'   62','line':'def getArchitecture(archStr):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   63','line':'    if archStr == "intel":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   64','line':'        return intel.IntelArchitecture()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'    elif archStr == "x86-64":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   66','line':'        return intel.IntelArchitecture()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   67','line':'    elif archStr == "i8086":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   68','line':'        return intel.IntelArchitecture()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   69','line':'    if archStr == "mips":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   70','line':'        return mips.MipsArchitecture()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   71','line':'    if archStr == "ppc":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   72','line':'        return ppc.PpcArchitecture()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   73','line':'    if archStr == "powerpc":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   74','line':'        return ppc.PpcArchitecture()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   75','line':'    if archStr == "arm":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   76','line':'        return arm.ArmArchitecture()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   77','line':'    if archStr == "arm26":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   78','line':'        return arm.ArmArchitecture()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   79','line':'    if archStr == "atmel":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'        return atmel.AtmelArchitecture()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   81','line':'    return Architecture([])','class':'lineNoCov','coverage':'  0 /   1  : ',},
];
var merged_data = [];
