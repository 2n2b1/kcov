var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'dissy', 'date' : '2014-06-09 19:17:46', 'instrumented' : 106, 'covered' : 27,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Simon Kagstrom <simon.kagstrom@gmail.com>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   A function','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'import re, os, cgi','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'','coverage':'           : ',},
{'lineNum':'   15','line':'from dissy.Config import config','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   16','line':'from dissy.Entity import Entity, AddressableEntity','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   17','line':'from dissy.Instruction import Instruction','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'from dissy.JumpStreamHandler import *','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   19','line':'from dissy.StrEntity import StrEntity','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'','coverage':'           : ',},
{'lineNum':'   21','line':'ADDRESS_REGEXP  = "[0-9,a-f,A-F]+"','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'ENCODING_REGEXP = ADDRESS_REGEXP + "[ ]"','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   23','line':'INSN_REGEXP     = "[0-9,a-z,A-Z,_,\\-,\\.,\\+]+"','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   24','line':'INSN_ARGS_REGEXP= "\\**[a-z,A-Z,0-9,_,\\,,\\(,\\),\\%,\\$,\\[,\\],!,#,\\-, ,&,{,},\\*,\\+\\.]+"','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   25','line':'','coverage':'           : ',},
{'lineNum':'   26','line':'insnRegExp = re.compile("[ ]*(" + ADDRESS_REGEXP + "):[ \\t]+((?:" + ENCODING_REGEXP +")*)[ \\t]+(" + INSN_REGEXP + ")+[ \\t]*(" + INSN_ARGS_REGEXP + ")*")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   27','line':'','coverage':'           : ',},
{'lineNum':'   28','line':'class Function(AddressableEntity):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   29','line':'    def __init__(self, fileContainer, address, label, size=0):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   30','line':'        AddressableEntity.__init__(self, address = address, endAddress = address + size, baseAddress = fileContainer.baseAddress)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   31','line':'        self.label = label','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   32','line':'        self.all = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   33','line':'        self.insns = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   34','line':'        self.addressToIns = {}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   35','line':'        self.file = fileContainer','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   36','line':'','coverage':'           : ',},
{'lineNum':'   37','line':'    def addInstruction(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   38','line':'        """Add an instruction to this function"""','coverage':'           : ',},
{'lineNum':'   39','line':'        self.insns.append(insn)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   40','line':'        self.addressToIns[insn.address] = insn','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   41','line':'        self.all.append(insn)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   42','line':'        if insn.address > self.endAddress:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   43','line':'            self.setSize(insn.address - self.address)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   44','line':'','coverage':'           : ',},
{'lineNum':'   45','line':'    def getFile(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   46','line':'        return self.file','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   47','line':'','coverage':'           : ',},
{'lineNum':'   48','line':'    def addOther(self, other):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   49','line':'        self.all.append(StrEntity(self, other))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   50','line':'','coverage':'           : ',},
{'lineNum':'   51','line':'    def __getInstructionByOffset(self, insn, dir):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   52','line':'        idx = self.all.index(insn)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   53','line':'        return self.insns[ idx + dir ]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   54','line':'','coverage':'           : ',},
{'lineNum':'   55','line':'    def getPrevInstruction(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   56','line':'        """Return the previous instruction from @a insn"""','coverage':'           : ',},
{'lineNum':'   57','line':'        return self.__getInstructionByOffset(insn, -1)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   58','line':'','coverage':'           : ',},
{'lineNum':'   59','line':'    def getNextInstruction(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   60','line':'        """Return the next instruction from @a insn"""','coverage':'           : ',},
{'lineNum':'   61','line':'        return self.__getInstructionByOffset(insn, 1)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   62','line':'','coverage':'           : ',},
{'lineNum':'   63','line':'    def lookup(self, address):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   64','line':'        return self.addressToIns.get(address, None)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'','coverage':'           : ',},
{'lineNum':'   66','line':'    def parse(self, try64bitWorkaround=False):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   67','line':'        """Parse the function."""','coverage':'           : ',},
{'lineNum':'   68','line':'        count = 0','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   69','line':'        start, end = self.getExtents()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   70','line':'        if try64bitWorkaround:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   71','line':'            if start & (1<<31):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   72','line':'                start = long(start) | 0xffffffff00000000','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   73','line':'            if end & (1<<31):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   74','line':'                end = long(end) | 0xffffffff00000000','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   75','line':'','coverage':'           : ',},
{'lineNum':'   76','line':'        lines = self.file.getFunctionObjdump(self.label, start, end)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   77','line':'','coverage':'           : ',},
{'lineNum':'   78','line':'        self.insns = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   79','line':'        self.all = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'        firstNonEmpty=False','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   81','line':'        for line in lines:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   82','line':'            # Weed away some unneeded stuff','coverage':'           : ',},
{'lineNum':'   83','line':'            if line.startswith("Disassembly of section ") or line.startswith("%s: " % (self.file.filename)):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   84','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   85','line':'            if not firstNonEmpty and line.strip() == "":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   86','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   87','line':'','coverage':'           : ',},
{'lineNum':'   88','line':'            firstNonEmpty=True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   89','line':'            r = insnRegExp.match(line)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   90','line':'            if r != None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   91','line':'                insn = Instruction(self, long("0x" + r.group(1),16), r.group(2), r.group(3), r.group(4))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   92','line':'                self.addInstruction(insn)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   93','line':'                count = count + 1','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   94','line':'            else:','coverage':'           : ',},
{'lineNum':'   95','line':'                self.addOther(cgi.escape(line))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   96','line':'','coverage':'           : ',},
{'lineNum':'   97','line':'        if count == 0 and try64bitWorkaround == False:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   98','line':'            # If we couldn\'t add anything interesting, try the 64-bit','coverage':'           : ',},
{'lineNum':'   99','line':'            # workaround (for e.g., MIPS). See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=369343','coverage':'           : ',},
{'lineNum':'  100','line':'            return self.parse(try64bitWorkaround = True)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  101','line':'','coverage':'           : ',},
{'lineNum':'  102','line':'    def link(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  103','line':'        """','coverage':'           : ',},
{'lineNum':'  104','line':'        Link the local jumps in this function. External jumps are','coverage':'           : ',},
{'lineNum':'  105','line':'        linked to the function they reside in.','coverage':'           : ',},
{'lineNum':'  106','line':'        """','coverage':'           : ',},
{'lineNum':'  107','line':'        unresolved = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  108','line':'        for insn in self.insns:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  109','line':'            if insn.hasLink() and not insn.link():','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  110','line':'                unresolved.append(insn)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  111','line':'','coverage':'           : ',},
{'lineNum':'  112','line':'        positive, negative = self.getJumpDicts()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  113','line':'','coverage':'           : ',},
{'lineNum':'  114','line':'        # Fill in the jumps, forwards...','coverage':'           : ',},
{'lineNum':'  115','line':'        self.fillInJumpStreams(positive, False)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  116','line':'        # ... and backwards','coverage':'           : ',},
{'lineNum':'  117','line':'        self.all.reverse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  118','line':'        self.fillInJumpStreams(negative, True)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  119','line':'        self.all.reverse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  120','line':'','coverage':'           : ',},
{'lineNum':'  121','line':'        return unresolved','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  122','line':'','coverage':'           : ',},
{'lineNum':'  123','line':'    def getInstructions(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  124','line':'        return self.insns','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  125','line':'','coverage':'           : ',},
{'lineNum':'  126','line':'    def getAll(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  127','line':'        return self.all','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  128','line':'','coverage':'           : ',},
{'lineNum':'  129','line':'    def getJumpDicts(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  130','line':'        """','coverage':'           : ',},
{'lineNum':'  131','line':'        Get jump dictionaries for the forward and backward jumps.','coverage':'           : ',},
{'lineNum':'  132','line':'        """','coverage':'           : ',},
{'lineNum':'  133','line':'        positive = {}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  134','line':'        negative = {}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  135','line':'        for insn in self.insns:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  136','line':'            other = insn.getOutLink()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  137','line':'            if isinstance(other, Instruction) and other != insn:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  138','line':'                if other.address < insn.address:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  139','line':'                    # Jump from insn to other BACKWARDS','coverage':'           : ',},
{'lineNum':'  140','line':'                    negative[insn.address] = (insn, other)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  141','line':'                else:','coverage':'           : ',},
{'lineNum':'  142','line':'                    # Jump from insn to other FORWARDS','coverage':'           : ',},
{'lineNum':'  143','line':'                    positive[insn.address] = (insn, other)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  144','line':'        return positive, negative','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  145','line':'','coverage':'           : ',},
{'lineNum':'  146','line':'    def fillInJumpStreams(self, jumpDict, left):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  147','line':'        """','coverage':'           : ',},
{'lineNum':'  148','line':'        Fill in the jump streams for a dictionary of start','coverage':'           : ',},
{'lineNum':'  149','line':'        addresses. Specify if the left or right streams should be','coverage':'           : ',},
{'lineNum':'  150','line':'        generated.','coverage':'           : ',},
{'lineNum':'  151','line':'        """','coverage':'           : ',},
{'lineNum':'  152','line':'        jumpStreamHandler = JumpStreamHandler()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  153','line':'        for insn in self.all:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  154','line':'            if isinstance(insn, Instruction):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  155','line':'                # Something starts on this address','coverage':'           : ',},
{'lineNum':'  156','line':'                if jumpDict.has_key(insn.address):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  157','line':'                    stream = jumpStreamHandler.alloc()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  158','line':'                    if stream != None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  159','line':'                        stream.start(jumpDict[insn.address] )','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  160','line':'            jumpStreamHandler.update(insn)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  161','line':'            if left == True:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  162','line':'                insn.left_state = jumpStreamHandler.getStateTuple()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  163','line':'            else:','coverage':'           : ',},
{'lineNum':'  164','line':'                insn.right_state = jumpStreamHandler.getStateTuple()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  165','line':'','coverage':'           : ',},
{'lineNum':'  166','line':'','coverage':'           : ',},
{'lineNum':'  167','line':'    def __str__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  168','line':'        out = str("0x%08x" % self.address) + " " + str(self.label) + ":\\n"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  169','line':'        for insn in self.insns:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  170','line':'            out = out + str(insn) + "\\n"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  171','line':'        return out','class':'lineNoCov','coverage':'  0 /   1  : ',},
];
var merged_data = [];
