var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'dissy', 'date' : '2014-06-09 19:17:46', 'instrumented' : 49, 'covered' : 19,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Simon Kagstrom <simon.kagstrom@gmail.com>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   Jump streams','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'INVALID=0','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'START=1','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   15','line':'RUNNING=2','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   16','line':'END=3','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   17','line':'EXTRA=4','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'EXTRA2=5','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   19','line':'','coverage':'           : ',},
{'lineNum':'   20','line':'class JumpStream:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   21','line':'    def __init__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'        self.state = INVALID','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   23','line':'        self.insnTuple = (None,None)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   24','line':'    def start(self, insnTuple):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   25','line':'        self.state = START','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   26','line':'        self.insnTuple = insnTuple','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   27','line':'    def running(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   28','line':'        self.state = RUNNING','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   29','line':'    def end(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   30','line':'        self.state = END','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   31','line':'    def invalid(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   32','line':'        self.state = INVALID','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   33','line':'    def extra(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'        self.state = EXTRA','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   35','line':'    def extra2(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   36','line':'        self.state = EXTRA2','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   37','line':'','coverage':'           : ',},
{'lineNum':'   38','line':'class JumpStreamHandler:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   39','line':'    def __init__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'        self.streams = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   41','line':'        for i in range(0,3):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   42','line':'            self.streams.append(JumpStream())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   43','line':'    def alloc(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   44','line':'        for stream in self.streams:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   45','line':'            if stream.state == INVALID or stream.state == END:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   46','line':'                return stream','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   47','line':'        for stream in self.streams:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   48','line':'            stream.extra()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   49','line':'        return None','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   50','line':'    def update(self, insn):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   51','line':'        for stream in self.streams:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   52','line':'            if stream.state == START and insn != stream.insnTuple[0]:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   53','line':'                stream.running()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   54','line':'            elif stream.state == END:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   55','line':'                stream.invalid()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   56','line':'            elif stream.state == EXTRA:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   57','line':'                stream.extra2()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   58','line':'            elif stream.state == EXTRA2:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   59','line':'                stream.running()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   60','line':'            # If this is the destination, switch to the end state','coverage':'           : ',},
{'lineNum':'   61','line':'            if insn == stream.insnTuple[1]:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   62','line':'                stream.end()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   63','line':'    def getStateTuple(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   64','line':'        return (self.streams[0].state, self.streams[1].state, self.streams[2].state)','class':'lineNoCov','coverage':'  0 /   1  : ',},
];
var merged_data = [];
