var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 293, 'covered' : 102,};
var data = [
{'lineNum':'    1','line':'','coverage':'           : ',},
{'lineNum':'    2','line':'#include <sched.h>','coverage':'           : ',},
{'lineNum':'    3','line':'#include <sys/types.h>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <string.h>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <stdio.h>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <stdint.h>','coverage':'           : ',},
{'lineNum':'    7','line':'#include <sys/types.h>','coverage':'           : ',},
{'lineNum':'    8','line':'#include <sys/stat.h>','coverage':'           : ',},
{'lineNum':'    9','line':'#include <fcntl.h>','coverage':'           : ',},
{'lineNum':'   10','line':'#include <stdarg.h>','coverage':'           : ',},
{'lineNum':'   11','line':'#include <unistd.h>','coverage':'           : ',},
{'lineNum':'   12','line':'#include <limits.h>','coverage':'           : ',},
{'lineNum':'   13','line':'#include <time.h>','coverage':'           : ',},
{'lineNum':'   14','line':'#include <zlib.h>','coverage':'           : ',},
{'lineNum':'   15','line':'','coverage':'           : ',},
{'lineNum':'   16','line':'#include <utils.hh>','coverage':'           : ',},
{'lineNum':'   17','line':'','coverage':'           : ',},
{'lineNum':'   18','line':'#include <sstream>','coverage':'           : ',},
{'lineNum':'   19','line':'#include <stdexcept>','coverage':'           : ',},
{'lineNum':'   20','line':'#include <algorithm>','coverage':'           : ',},
{'lineNum':'   21','line':'#include <unordered_map>','coverage':'           : ',},
{'lineNum':'   22','line':'','coverage':'           : ',},
{'lineNum':'   23','line':'int g_kcov_debug_mask = STATUS_MSG;','coverage':'           : ',},
{'lineNum':'   24','line':'static void* (*mocked_read_callback)(size_t* out_size, const char* path);','coverage':'           : ',},
{'lineNum':'   25','line':'static int (*mocked_write_callback)(const void* data, size_t size, const char* path);','coverage':'           : ',},
{'lineNum':'   26','line':'static bool (*mocked_file_exists_callback)(const std::string &path);','coverage':'           : ',},
{'lineNum':'   27','line':'static uint64_t (*mocked_get_file_timestamp_callback)(const std::string &path);','coverage':'           : ',},
{'lineNum':'   28','line':'','coverage':'           : ',},
{'lineNum':'   29','line':'void msleep(uint64_t ms)','coverage':'           : ',},
{'lineNum':'   30','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   31','line':'	struct timespec ts;','coverage':'           : ',},
{'lineNum':'   32','line':'	uint64_t ns = ms * 1000 * 1000;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   33','line':'','coverage':'           : ',},
{'lineNum':'   34','line':'	ts.tv_sec = ns / (1000 * 1000 * 1000);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   35','line':'	ts.tv_nsec = ns % (1000 * 1000 * 1000);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   36','line':'','coverage':'           : ',},
{'lineNum':'   37','line':'	nanosleep(&ts, NULL);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   38','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   39','line':'','coverage':'           : ',},
{'lineNum':'   40','line':'static void *read_file_int(size_t *out_size, uint64_t timeout, const char *path)','coverage':'           : ',},
{'lineNum':'   41','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   42','line':'	uint8_t *data = NULL;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   43','line':'	int fd;','coverage':'           : ',},
{'lineNum':'   44','line':'	size_t pos = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   45','line':'	const size_t chunk = 1024;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   46','line':'	fd_set rfds;','coverage':'           : ',},
{'lineNum':'   47','line':'	struct timeval tv;','coverage':'           : ',},
{'lineNum':'   48','line':'	int ret;','coverage':'           : ',},
{'lineNum':'   49','line':'	int n;','coverage':'           : ',},
{'lineNum':'   50','line':'','coverage':'           : ',},
{'lineNum':'   51','line':'	if (mocked_read_callback)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   52','line':'		return mocked_read_callback(out_size, path);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   53','line':'','coverage':'           : ',},
{'lineNum':'   54','line':'	fd = open(path, O_RDONLY | O_NONBLOCK);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   55','line':'	if (fd < 0 && (errno == ENXIO || errno == EWOULDBLOCK)) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   56','line':'		msleep(timeout);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   57','line':'','coverage':'           : ',},
{'lineNum':'   58','line':'		fd = open(path, O_RDONLY | O_NONBLOCK);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   59','line':'	}','coverage':'           : ',},
{'lineNum':'   60','line':'','coverage':'           : ',},
{'lineNum':'   61','line':'	if (fd < 0)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   62','line':'		return NULL;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   63','line':'','coverage':'           : ',},
{'lineNum':'   64','line':'	tv.tv_sec = timeout / 1000;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'	tv.tv_usec = (timeout % 1000) * 10;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   66','line':'','coverage':'           : ',},
{'lineNum':'   67','line':'	FD_ZERO(&rfds);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   68','line':'	FD_SET(fd, &rfds);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   69','line':'','coverage':'           : ',},
{'lineNum':'   70','line':'	do {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   71','line':'		ret = select(fd + 1, &rfds, NULL, NULL, &tv);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   72','line':'		if (ret == -1) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   73','line':'			close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   74','line':'			free(data);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   75','line':'','coverage':'           : ',},
{'lineNum':'   76','line':'			return NULL;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   77','line':'		} else if (ret == 0) { // Timeout','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   78','line':'			close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   79','line':'			free(data);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'','coverage':'           : ',},
{'lineNum':'   81','line':'			return NULL;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   82','line':'		}','coverage':'           : ',},
{'lineNum':'   83','line':'		data = (uint8_t *)xrealloc(data, pos + chunk);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   84','line':'		memset(data + pos, 0, chunk);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   85','line':'','coverage':'           : ',},
{'lineNum':'   86','line':'		n = read(fd, data + pos, chunk);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   87','line':'		if (n < 0) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   88','line':'			close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   89','line':'			free(data);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   90','line':'','coverage':'           : ',},
{'lineNum':'   91','line':'			return NULL;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   92','line':'		}','coverage':'           : ',},
{'lineNum':'   93','line':'','coverage':'           : ',},
{'lineNum':'   94','line':'		pos += n;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   95','line':'	} while (n == (int)chunk);','coverage':'           : ',},
{'lineNum':'   96','line':'','coverage':'           : ',},
{'lineNum':'   97','line':'	*out_size = pos;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   98','line':'','coverage':'           : ',},
{'lineNum':'   99','line':'	close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  100','line':'','coverage':'           : ',},
{'lineNum':'  101','line':'	return data;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  102','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  103','line':'','coverage':'           : ',},
{'lineNum':'  104','line':'void *read_file(size_t *out_size, const char *fmt, ...)','coverage':'           : ',},
{'lineNum':'  105','line':'{','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  106','line':'	char path[2048];','coverage':'           : ',},
{'lineNum':'  107','line':'	va_list ap;','coverage':'           : ',},
{'lineNum':'  108','line':'	int r;','coverage':'           : ',},
{'lineNum':'  109','line':'','coverage':'           : ',},
{'lineNum':'  110','line':'	/* Create the filename */','coverage':'           : ',},
{'lineNum':'  111','line':'	va_start(ap, fmt);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  112','line':'	r = vsnprintf(path, 2048, fmt, ap);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  113','line':'	va_end(ap);','coverage':'           : ',},
{'lineNum':'  114','line':'','coverage':'           : ',},
{'lineNum':'  115','line':'	panic_if (r >= 2048,','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  116','line':'			"Too long string!");','coverage':'           : ',},
{'lineNum':'  117','line':'','coverage':'           : ',},
{'lineNum':'  118','line':'	return read_file_int(out_size, 0, path);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  119','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  120','line':'','coverage':'           : ',},
{'lineNum':'  121','line':'static int write_file_int(const void *data, size_t len, uint64_t timeout, const char *path)','coverage':'           : ',},
{'lineNum':'  122','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  123','line':'	int fd;','coverage':'           : ',},
{'lineNum':'  124','line':'	fd_set wfds;','coverage':'           : ',},
{'lineNum':'  125','line':'	struct timeval tv;','coverage':'           : ',},
{'lineNum':'  126','line':'	int ret = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  127','line':'','coverage':'           : ',},
{'lineNum':'  128','line':'	tv.tv_sec = timeout / 1000;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  129','line':'	tv.tv_usec = (timeout % 1000) * 10;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  130','line':'','coverage':'           : ',},
{'lineNum':'  131','line':'	fd = open(path, O_WRONLY | O_CREAT | O_TRUNC | O_NONBLOCK, S_IWUSR | S_IRUSR | S_IRGRP | S_IROTH);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  132','line':'	if (fd < 0 && (errno == ENXIO || errno == EWOULDBLOCK)) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  133','line':'		msleep(timeout);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  134','line':'','coverage':'           : ',},
{'lineNum':'  135','line':'		fd = open(path, O_WRONLY | O_CREAT | O_TRUNC | O_NONBLOCK, S_IWUSR | S_IRUSR | S_IRGRP | S_IROTH);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  136','line':'		if (fd < 0 && (errno == ENXIO || errno == EWOULDBLOCK))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  137','line':'			return -2;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  138','line':'	}','coverage':'           : ',},
{'lineNum':'  139','line':'	if (fd < 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  140','line':'		return fd;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  141','line':'','coverage':'           : ',},
{'lineNum':'  142','line':'	FD_ZERO(&wfds);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  143','line':'	FD_SET(fd, &wfds);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  144','line':'','coverage':'           : ',},
{'lineNum':'  145','line':'	ret = select(fd + 1, NULL, &wfds, NULL, &tv);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  146','line':'	if (ret == -1) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  147','line':'		close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  148','line':'','coverage':'           : ',},
{'lineNum':'  149','line':'		return ret;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  150','line':'	} else if (ret == 0) { // Timeout','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  151','line':'		close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  152','line':'','coverage':'           : ',},
{'lineNum':'  153','line':'		return -2;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  154','line':'	}','coverage':'           : ',},
{'lineNum':'  155','line':'','coverage':'           : ',},
{'lineNum':'  156','line':'	if (write(fd, data, len) != (int)len)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  157','line':'		return -3;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  158','line':'','coverage':'           : ',},
{'lineNum':'  159','line':'	close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  160','line':'','coverage':'           : ',},
{'lineNum':'  161','line':'	return 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  162','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  163','line':'','coverage':'           : ',},
{'lineNum':'  164','line':'int write_file(const void *data, size_t len, const char *fmt, ...)','coverage':'           : ',},
{'lineNum':'  165','line':'{','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  166','line':'	char path[2048];','coverage':'           : ',},
{'lineNum':'  167','line':'	va_list ap;','coverage':'           : ',},
{'lineNum':'  168','line':'','coverage':'           : ',},
{'lineNum':'  169','line':'	/* Create the filename */','coverage':'           : ',},
{'lineNum':'  170','line':'	va_start(ap, fmt);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  171','line':'	vsnprintf(path, 2048, fmt, ap);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  172','line':'	va_end(ap);','coverage':'           : ',},
{'lineNum':'  173','line':'','coverage':'           : ',},
{'lineNum':'  174','line':'	if (mocked_write_callback)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  175','line':'		return mocked_write_callback(data, len, path);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  176','line':'','coverage':'           : ',},
{'lineNum':'  177','line':'	return write_file_int(data, len, 0, path);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  178','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  179','line':'','coverage':'           : ',},
{'lineNum':'  180','line':'','coverage':'           : ',},
{'lineNum':'  181','line':'std::string dir_concat(const std::string &dir, const std::string &filename)','coverage':'           : ',},
{'lineNum':'  182','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  183','line':'	if (dir == "")','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  184','line':'		return filename;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  185','line':'','coverage':'           : ',},
{'lineNum':'  186','line':'	return fmt("%s/%s", dir.c_str(), filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  187','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  188','line':'','coverage':'           : ',},
{'lineNum':'  189','line':'const char *get_home(void)','coverage':'           : ',},
{'lineNum':'  190','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  191','line':'	return getenv("HOME");','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  192','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  193','line':'','coverage':'           : ',},
{'lineNum':'  194','line':'bool file_readable(FILE *fp, unsigned int ms)','coverage':'           : ',},
{'lineNum':'  195','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  196','line':'	fd_set rfds;','coverage':'           : ',},
{'lineNum':'  197','line':'	struct timeval tv;','coverage':'           : ',},
{'lineNum':'  198','line':'	int rv;','coverage':'           : ',},
{'lineNum':'  199','line':'','coverage':'           : ',},
{'lineNum':'  200','line':'	int fd = fileno(fp);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  201','line':'','coverage':'           : ',},
{'lineNum':'  202','line':'	FD_ZERO(&rfds);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  203','line':'	FD_SET(fd, &rfds);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  204','line':'','coverage':'           : ',},
{'lineNum':'  205','line':'	tv.tv_sec = ms / 1000;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  206','line':'	tv.tv_usec = (ms % 1000) * 1000;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  207','line':'','coverage':'           : ',},
{'lineNum':'  208','line':'	rv = select(fd + 1, &rfds, NULL, NULL, &tv);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  209','line':'','coverage':'           : ',},
{'lineNum':'  210','line':'	return rv > 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  211','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  212','line':'','coverage':'           : ',},
{'lineNum':'  213','line':'static std::unordered_map<std::string, bool> nonExistingFiles;','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  214','line':'','coverage':'           : ',},
{'lineNum':'  215','line':'bool file_exists(const std::string &path)','coverage':'           : ',},
{'lineNum':'  216','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  217','line':'	if (mocked_file_exists_callback)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  218','line':'		return mocked_file_exists_callback(path);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  219','line':'','coverage':'           : ',},
{'lineNum':'  220','line':'	if (nonExistingFiles.find(path) != nonExistingFiles.end())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  221','line':'		return 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  222','line':'','coverage':'           : ',},
{'lineNum':'  223','line':'	struct stat st;','coverage':'           : ',},
{'lineNum':'  224','line':'','coverage':'           : ',},
{'lineNum':'  225','line':'	bool out = lstat(path.c_str(), &st) == 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  226','line':'','coverage':'           : ',},
{'lineNum':'  227','line':'	if (out == false)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  228','line':'		nonExistingFiles[path] = true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  229','line':'','coverage':'           : ',},
{'lineNum':'  230','line':'	return out;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  231','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  232','line':'','coverage':'           : ',},
{'lineNum':'  233','line':'void mock_read_file(void *(*callback)(size_t *out_size, const char *path))','coverage':'           : ',},
{'lineNum':'  234','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  235','line':'	mocked_read_callback = callback;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  236','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  237','line':'','coverage':'           : ',},
{'lineNum':'  238','line':'void mock_write_file(int (*callback)(const void *data, size_t size, const char *path))','coverage':'           : ',},
{'lineNum':'  239','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  240','line':'	mocked_write_callback = callback;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  241','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  242','line':'','coverage':'           : ',},
{'lineNum':'  243','line':'void mock_file_exists(bool (*callback)(const std::string &path))','coverage':'           : ',},
{'lineNum':'  244','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  245','line':'	mocked_file_exists_callback = callback;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  246','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  247','line':'','coverage':'           : ',},
{'lineNum':'  248','line':'','coverage':'           : ',},
{'lineNum':'  249','line':'void mock_get_file_timestamp(uint64_t (*callback)(const std::string &path))','coverage':'           : ',},
{'lineNum':'  250','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  251','line':'	mocked_get_file_timestamp_callback = callback;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  252','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  253','line':'','coverage':'           : ',},
{'lineNum':'  254','line':'uint64_t get_file_timestamp(const std::string &path)','coverage':'           : ',},
{'lineNum':'  255','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  256','line':'	if (mocked_get_file_timestamp_callback)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  257','line':'		return mocked_get_file_timestamp_callback(path);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  258','line':'','coverage':'           : ',},
{'lineNum':'  259','line':'	struct stat st;','coverage':'           : ',},
{'lineNum':'  260','line':'','coverage':'           : ',},
{'lineNum':'  261','line':'	// "Fail"','coverage':'           : ',},
{'lineNum':'  262','line':'	if (lstat(path.c_str(), &st) != 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  263','line':'		return 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  264','line':'','coverage':'           : ',},
{'lineNum':'  265','line':'	return st.st_mtim.tv_sec;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  266','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  267','line':'','coverage':'           : ',},
{'lineNum':'  268','line':'static void read_write(FILE *dst, FILE *src)','coverage':'           : ',},
{'lineNum':'  269','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  270','line':'	char buf[1024];','coverage':'           : ',},
{'lineNum':'  271','line':'','coverage':'           : ',},
{'lineNum':'  272','line':'	while (!feof(src)) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  273','line':'		int n = fread(buf, sizeof(char), sizeof(buf), src);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  274','line':'','coverage':'           : ',},
{'lineNum':'  275','line':'		fwrite(buf, sizeof(char), n, dst);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  276','line':'	}','coverage':'           : ',},
{'lineNum':'  277','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  278','line':'','coverage':'           : ',},
{'lineNum':'  279','line':'int concat_files(const char *dst_name, const char *file_a, const char *file_b)','coverage':'           : ',},
{'lineNum':'  280','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  281','line':'	FILE *dst;','coverage':'           : ',},
{'lineNum':'  282','line':'	FILE *s1, *s2;','coverage':'           : ',},
{'lineNum':'  283','line':'	int ret = -1;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  284','line':'','coverage':'           : ',},
{'lineNum':'  285','line':'	dst = fopen(dst_name, "w");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  286','line':'	if (!dst)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  287','line':'		return -1;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  288','line':'	s1 = fopen(file_a, "r");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  289','line':'	if (!s1)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  290','line':'		goto out_dst;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  291','line':'	s2 = fopen(file_b, "r");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  292','line':'	if (!s2)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  293','line':'		goto out_s1;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  294','line':'','coverage':'           : ',},
{'lineNum':'  295','line':'	read_write(dst, s1);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  296','line':'	read_write(dst, s2);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  297','line':'','coverage':'           : ',},
{'lineNum':'  298','line':'	fclose(s2);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  299','line':'out_s1:','coverage':'           : ',},
{'lineNum':'  300','line':'	fclose(s1);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  301','line':'out_dst:','coverage':'           : ',},
{'lineNum':'  302','line':'	fclose(dst);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  303','line':'','coverage':'           : ',},
{'lineNum':'  304','line':'	return ret;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  305','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  306','line':'','coverage':'           : ',},
{'lineNum':'  307','line':'unsigned long get_aligned(unsigned long addr)','coverage':'           : ',},
{'lineNum':'  308','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  309','line':'	return (addr / sizeof(long)) * sizeof(long);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  310','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  311','line':'','coverage':'           : ',},
{'lineNum':'  312','line':'unsigned long get_aligned_4b(unsigned long addr)','coverage':'           : ',},
{'lineNum':'  313','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  314','line':'	return addr & ~3;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  315','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  316','line':'','coverage':'           : ',},
{'lineNum':'  317','line':'std::string fmt(const char *fmt, ...)','coverage':'           : ',},
{'lineNum':'  318','line':'{','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  319','line':'	char buf[4096];','coverage':'           : ',},
{'lineNum':'  320','line':'	va_list ap;','coverage':'           : ',},
{'lineNum':'  321','line':'	int res;','coverage':'           : ',},
{'lineNum':'  322','line':'','coverage':'           : ',},
{'lineNum':'  323','line':'	va_start(ap, fmt);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  324','line':'	res = vsnprintf(buf, sizeof(buf), fmt, ap);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  325','line':'	va_end(ap);','coverage':'           : ',},
{'lineNum':'  326','line':'','coverage':'           : ',},
{'lineNum':'  327','line':'	panic_if(res >= (int)sizeof(buf),','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  328','line':'			"Buffer overflow");','coverage':'           : ',},
{'lineNum':'  329','line':'','coverage':'           : ',},
{'lineNum':'  330','line':'	return std::string(buf);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  331','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  332','line':'','coverage':'           : ',},
{'lineNum':'  333','line':'','coverage':'           : ',},
{'lineNum':'  334','line':'int kcov_get_current_cpu(void)','coverage':'           : ',},
{'lineNum':'  335','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  336','line':'	return sched_getcpu();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  337','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  338','line':'','coverage':'           : ',},
{'lineNum':'  339','line':'void kcov_tie_process_to_cpu(pid_t pid, int cpu)','coverage':'           : ',},
{'lineNum':'  340','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  341','line':'	// Switching CPU while running will cause icache','coverage':'           : ',},
{'lineNum':'  342','line':'	// conflicts. So let\'s just forbid that.','coverage':'           : ',},
{'lineNum':'  343','line':'','coverage':'           : ',},
{'lineNum':'  344','line':'	cpu_set_t *set = CPU_ALLOC(1);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  345','line':'	panic_if (!set,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  346','line':'			"Can\'t allocate CPU set!\\n");','coverage':'           : ',},
{'lineNum':'  347','line':'	CPU_ZERO_S(CPU_ALLOC_SIZE(1), set);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  348','line':'	CPU_SET(cpu, set);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  349','line':'	panic_if (sched_setaffinity(pid, CPU_ALLOC_SIZE(1), set) < 0,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  350','line':'			"Can\'t set CPU affinity. Coincident won\'t work");','coverage':'           : ',},
{'lineNum':'  351','line':'	CPU_FREE(set);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  352','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  353','line':'','coverage':'           : ',},
{'lineNum':'  354','line':'void mdelay(unsigned int ms)','coverage':'           : ',},
{'lineNum':'  355','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  356','line':'	struct timespec ts;','coverage':'           : ',},
{'lineNum':'  357','line':'	ts.tv_sec = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  358','line':'	ts.tv_nsec = ms * 1000 * 1000;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  359','line':'','coverage':'           : ',},
{'lineNum':'  360','line':'	nanosleep(&ts, NULL);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  361','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  362','line':'','coverage':'           : ',},
{'lineNum':'  363','line':'uint64_t get_ms_timestamp(void)','coverage':'           : ',},
{'lineNum':'  364','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  365','line':'	return ((uint64_t)time(NULL)) * 1000;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  366','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  367','line':'','coverage':'           : ',},
{'lineNum':'  368','line':'bool machine_is_64bit(void)','coverage':'           : ',},
{'lineNum':'  369','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  370','line':'	return sizeof(unsigned long) == 8;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  371','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  372','line':'','coverage':'           : ',},
{'lineNum':'  373','line':'','coverage':'           : ',},
{'lineNum':'  374','line':'// http://stackoverflow.com/questions/236129/how-to-split-a-string-in-c','coverage':'           : ',},
{'lineNum':'  375','line':'static std::list<std::string> &split(const std::string &s, char delim,','coverage':'           : ',},
{'lineNum':'  376','line':'		std::list<std::string> &elems)','coverage':'           : ',},
{'lineNum':'  377','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  378','line':'    std::stringstream ss(s);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  379','line':'    std::string item;','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  380','line':'','coverage':'           : ',},
{'lineNum':'  381','line':'    while (std::getline(ss, item, delim)) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  382','line':'        elems.push_back(item);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  383','line':'    }','coverage':'           : ',},
{'lineNum':'  384','line':'','coverage':'           : ',},
{'lineNum':'  385','line':'    return elems;','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  386','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  387','line':'','coverage':'           : ',},
{'lineNum':'  388','line':'','coverage':'           : ',},
{'lineNum':'  389','line':'std::list<std::string> split_string(const std::string &s, const char *delims)','coverage':'           : ',},
{'lineNum':'  390','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  391','line':'    std::list<std::string> elems;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  392','line':'    split(s, *delims, elems);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  393','line':'','coverage':'           : ',},
{'lineNum':'  394','line':'    return elems;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  395','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  396','line':'','coverage':'           : ',},
{'lineNum':'  397','line':'std::string trim_string(const std::string &strIn)','coverage':'           : ',},
{'lineNum':'  398','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  399','line':'	std::string str = strIn;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  400','line':'	size_t endpos = str.find_last_not_of(" \\t\\n\\r");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  401','line':'','coverage':'           : ',},
{'lineNum':'  402','line':'	if (std::string::npos != endpos)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  403','line':'		str = str.substr( 0, endpos+1 );','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  404','line':'','coverage':'           : ',},
{'lineNum':'  405','line':'	// trim leading spaces','coverage':'           : ',},
{'lineNum':'  406','line':'	size_t startpos = str.find_first_not_of(" \\t");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  407','line':'	if (std::string::npos != startpos)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  408','line':'		str = str.substr( startpos );','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  409','line':'	else','coverage':'           : ',},
{'lineNum':'  410','line':'		str = "";','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  411','line':'','coverage':'           : ',},
{'lineNum':'  412','line':'	return str;','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  413','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  414','line':'','coverage':'           : ',},
{'lineNum':'  415','line':'// Cache for ::realpath - it\'s apparently one of the reasons why kcov is slow','coverage':'           : ',},
{'lineNum':'  416','line':'static std::unordered_map<std::string, std::string> realPathCache;','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  417','line':'const std::string &get_real_path(const std::string &path)','coverage':'           : ',},
{'lineNum':'  418','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  419','line':'	const auto &it = realPathCache.find(path);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  420','line':'	if (it != realPathCache.end())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  421','line':'		return it->second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  422','line':'','coverage':'           : ',},
{'lineNum':'  423','line':'	char *rp = NULL;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  424','line':'','coverage':'           : ',},
{'lineNum':'  425','line':'	rp = ::realpath(path.c_str(), nullptr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  426','line':'','coverage':'           : ',},
{'lineNum':'  427','line':'	if (!rp)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  428','line':'		return path;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  429','line':'','coverage':'           : ',},
{'lineNum':'  430','line':'	realPathCache[path] = rp;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  431','line':'','coverage':'           : ',},
{'lineNum':'  432','line':'	return realPathCache[path];','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  433','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  434','line':'','coverage':'           : ',},
{'lineNum':'  435','line':'','coverage':'           : ',},
{'lineNum':'  436','line':'bool string_is_integer(const std::string &str, unsigned base)','coverage':'           : ',},
{'lineNum':'  437','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  438','line':'	size_t pos;','coverage':'           : ',},
{'lineNum':'  439','line':'','coverage':'           : ',},
{'lineNum':'  440','line':'	try','coverage':'           : ',},
{'lineNum':'  441','line':'	{','coverage':'           : ',},
{'lineNum':'  442','line':'		stoull(str, &pos, base);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  443','line':'	}','coverage':'           : ',},
{'lineNum':'  444','line':'	catch(std::invalid_argument &e)','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  445','line':'	{','coverage':'           : ',},
{'lineNum':'  446','line':'		return false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  447','line':'	}','coverage':'           : ',},
{'lineNum':'  448','line':'	catch(std::out_of_range &e)','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  449','line':'	{','coverage':'           : ',},
{'lineNum':'  450','line':'		return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  451','line':'	}','coverage':'           : ',},
{'lineNum':'  452','line':'','coverage':'           : ',},
{'lineNum':'  453','line':'	return pos == str.size();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  454','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  455','line':'','coverage':'           : ',},
{'lineNum':'  456','line':'int64_t string_to_integer(const std::string &str, unsigned base)','coverage':'           : ',},
{'lineNum':'  457','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  458','line':'	size_t pos;','coverage':'           : ',},
{'lineNum':'  459','line':'','coverage':'           : ',},
{'lineNum':'  460','line':'	return (int64_t)stoull(str, &pos, base);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  461','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  462','line':'','coverage':'           : ',},
{'lineNum':'  463','line':'','coverage':'           : ',},
{'lineNum':'  464','line':'','coverage':'           : ',},
{'lineNum':'  465','line':'static char *escape_helper(char *dst, const char *what)','coverage':'           : ',},
{'lineNum':'  466','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  467','line':'	int len = strlen(what);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  468','line':'','coverage':'           : ',},
{'lineNum':'  469','line':'	strcpy(dst, what);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  470','line':'','coverage':'           : ',},
{'lineNum':'  471','line':'	return dst + len;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  472','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  473','line':'','coverage':'           : ',},
{'lineNum':'  474','line':'std::string escape_html(const std::string &str)','coverage':'           : ',},
{'lineNum':'  475','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  476','line':'	const char *s = str.c_str();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  477','line':'	char buf[4096];','coverage':'           : ',},
{'lineNum':'  478','line':'	char *dst = buf;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  479','line':'	size_t len = strlen(s);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  480','line':'	bool truncated = false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  481','line':'	size_t i;','coverage':'           : ',},
{'lineNum':'  482','line':'','coverage':'           : ',},
{'lineNum':'  483','line':'	// Truncate long lines (or entries)','coverage':'           : ',},
{'lineNum':'  484','line':'	if (len > 512) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  485','line':'		len = 512;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  486','line':'		truncated = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  487','line':'	}','coverage':'           : ',},
{'lineNum':'  488','line':'','coverage':'           : ',},
{'lineNum':'  489','line':'	memset(buf, 0, sizeof(buf));','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  490','line':'	for (i = 0; i < len; i++) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  491','line':'		char c = s[i];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  492','line':'','coverage':'           : ',},
{'lineNum':'  493','line':'		switch (c) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  494','line':'		case \'<\':','coverage':'           : ',},
{'lineNum':'  495','line':'			dst = escape_helper(dst, "&lt;");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  496','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  497','line':'		case \'>\':','coverage':'           : ',},
{'lineNum':'  498','line':'			dst = escape_helper(dst, "&gt;");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  499','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  500','line':'		case \'&\':','coverage':'           : ',},
{'lineNum':'  501','line':'			dst = escape_helper(dst, "&amp;");','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  502','line':'			break;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  503','line':'		case \'\\"\':','coverage':'           : ',},
{'lineNum':'  504','line':'			dst = escape_helper(dst, "&quot;");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  505','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  506','line':'		case \'\\\'\':','coverage':'           : ',},
{'lineNum':'  507','line':'			dst = escape_helper(dst, "&#039;");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  508','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  509','line':'		case \'/\':','coverage':'           : ',},
{'lineNum':'  510','line':'			dst = escape_helper(dst, "&#047;");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  511','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  512','line':'		case \'\\\\\':','coverage':'           : ',},
{'lineNum':'  513','line':'			dst = escape_helper(dst, "&#092;");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  514','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  515','line':'		case \'\\n\': case \'\\r\':','coverage':'           : ',},
{'lineNum':'  516','line':'			dst = escape_helper(dst, " ");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  517','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  518','line':'		default:','coverage':'           : ',},
{'lineNum':'  519','line':'			*dst = c;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  520','line':'			dst++;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  521','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  522','line':'		}','coverage':'           : ',},
{'lineNum':'  523','line':'	}','coverage':'           : ',},
{'lineNum':'  524','line':'','coverage':'           : ',},
{'lineNum':'  525','line':'	if (truncated)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  526','line':'		return std::string(buf) + "...";','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  527','line':'','coverage':'           : ',},
{'lineNum':'  528','line':'	return std::string(buf);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  529','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  530','line':'','coverage':'           : ',},
{'lineNum':'  531','line':'std::string escape_json(const std::string &str)','coverage':'           : ',},
{'lineNum':'  532','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  533','line':'	size_t n_escapes = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  534','line':'','coverage':'           : ',},
{'lineNum':'  535','line':'	for (unsigned i = 0; i < str.size(); i++) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  536','line':'		if (str[i] == \'\\\'\' || str[i] == \'\\\\\')','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  537','line':'			n_escapes++;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  538','line':'	}','coverage':'           : ',},
{'lineNum':'  539','line':'','coverage':'           : ',},
{'lineNum':'  540','line':'	std::string out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  541','line':'	out.resize(str.size() + n_escapes);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  542','line':'	unsigned cur = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  543','line':'','coverage':'           : ',},
{'lineNum':'  544','line':'	for (unsigned i = 0; i < str.size(); i++) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  545','line':'		out[cur] = str[i];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  546','line':'','coverage':'           : ',},
{'lineNum':'  547','line':'		// Quote single-quotes and backslashes','coverage':'           : ',},
{'lineNum':'  548','line':'		if (str[i] == \'\\\'\' || str[i] == \'\\\\\') {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  549','line':'			out[cur] = \'\\\\\';','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  550','line':'			cur++;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  551','line':'			out[cur] = str[i];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  552','line':'		}','coverage':'           : ',},
{'lineNum':'  553','line':'		cur++;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  554','line':'	}','coverage':'           : ',},
{'lineNum':'  555','line':'','coverage':'           : ',},
{'lineNum':'  556','line':'	return out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  557','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  558','line':'','coverage':'           : ',},
{'lineNum':'  559','line':'uint32_t crc32(const void *buf, size_t len)','coverage':'           : ',},
{'lineNum':'  560','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  561','line':'	return crc32(0, (const Bytef *)buf, len);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  562','line':'}','class':'lineCov','coverage':'  7 /   7  : ',},
];
var merged_data = [];
