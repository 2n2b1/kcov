var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 10, 'covered' : 0,};
var data = [
{'lineNum':'    1','line':'#pragma once','coverage':'           : ',},
{'lineNum':'    2','line':'','coverage':'           : ',},
{'lineNum':'    3','line':'#include <manager.hh>','coverage':'           : ',},
{'lineNum':'    4','line':'','coverage':'           : ',},
{'lineNum':'    5','line':'#include <stdint.h>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <stdlib.h>','coverage':'           : ',},
{'lineNum':'    7','line':'','coverage':'           : ',},
{'lineNum':'    8','line':'#include <string>','coverage':'           : ',},
{'lineNum':'    9','line':'','coverage':'           : ',},
{'lineNum':'   10','line':'namespace kcov','coverage':'           : ',},
{'lineNum':'   11','line':'{','coverage':'           : ',},
{'lineNum':'   12','line':'	enum event_type','coverage':'           : ',},
{'lineNum':'   13','line':'	{','coverage':'           : ',},
{'lineNum':'   14','line':'		ev_error       = -1,','coverage':'           : ',},
{'lineNum':'   15','line':'		ev_breakpoint  =  1,','coverage':'           : ',},
{'lineNum':'   16','line':'		ev_signal      =  2,','coverage':'           : ',},
{'lineNum':'   17','line':'		ev_exit        =  3,','coverage':'           : ',},
{'lineNum':'   18','line':'		ev_exit_first_process = 4,','coverage':'           : ',},
{'lineNum':'   19','line':'		ev_signal_exit =  5,','coverage':'           : ',},
{'lineNum':'   20','line':'	};','coverage':'           : ',},
{'lineNum':'   21','line':'','coverage':'           : ',},
{'lineNum':'   22','line':'	class IEngine','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   23','line':'	{','coverage':'           : ',},
{'lineNum':'   24','line':'	public:','coverage':'           : ',},
{'lineNum':'   25','line':'		class Event','coverage':'           : ',},
{'lineNum':'   26','line':'		{','coverage':'           : ',},
{'lineNum':'   27','line':'		public:','coverage':'           : ',},
{'lineNum':'   28','line':'			Event(enum event_type type = ev_signal, int data = 0, uint64_t address = 0) :','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   29','line':'				type(type),','coverage':'           : ',},
{'lineNum':'   30','line':'				data(data),','coverage':'           : ',},
{'lineNum':'   31','line':'				addr(address)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   32','line':'			{','coverage':'           : ',},
{'lineNum':'   33','line':'			}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   34','line':'','coverage':'           : ',},
{'lineNum':'   35','line':'			enum event_type type;','coverage':'           : ',},
{'lineNum':'   36','line':'','coverage':'           : ',},
{'lineNum':'   37','line':'			int data; // Typically the breakpoint','coverage':'           : ',},
{'lineNum':'   38','line':'			uint64_t addr;','coverage':'           : ',},
{'lineNum':'   39','line':'		};','coverage':'           : ',},
{'lineNum':'   40','line':'','coverage':'           : ',},
{'lineNum':'   41','line':'		class IEventListener','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   42','line':'		{','coverage':'           : ',},
{'lineNum':'   43','line':'		public:','coverage':'           : ',},
{'lineNum':'   44','line':'			virtual void onEvent(const Event &ev) = 0;','coverage':'           : ',},
{'lineNum':'   45','line':'		};','coverage':'           : ',},
{'lineNum':'   46','line':'','coverage':'           : ',},
{'lineNum':'   47','line':'','coverage':'           : ',},
{'lineNum':'   48','line':'		virtual ~IEngine() {}','class':'lineNoCov','coverage':'  0 /   5  : ',},
{'lineNum':'   49','line':'','coverage':'           : ',},
{'lineNum':'   50','line':'		/**','coverage':'           : ',},
{'lineNum':'   51','line':'		 * Set a breakpoint','coverage':'           : ',},
{'lineNum':'   52','line':'		 *','coverage':'           : ',},
{'lineNum':'   53','line':'		 * @param addr the address to set the breakpoint on','coverage':'           : ',},
{'lineNum':'   54','line':'		 *','coverage':'           : ',},
{'lineNum':'   55','line':'		 * @return the ID of the breakpoint, or -1 on failure','coverage':'           : ',},
{'lineNum':'   56','line':'		 */','coverage':'           : ',},
{'lineNum':'   57','line':'		virtual int registerBreakpoint(unsigned long addr) = 0;','coverage':'           : ',},
{'lineNum':'   58','line':'','coverage':'           : ',},
{'lineNum':'   59','line':'		virtual void setupAllBreakpoints() = 0;','coverage':'           : ',},
{'lineNum':'   60','line':'','coverage':'           : ',},
{'lineNum':'   61','line':'		virtual bool clearBreakpoint(int id) = 0;','coverage':'           : ',},
{'lineNum':'   62','line':'','coverage':'           : ',},
{'lineNum':'   63','line':'','coverage':'           : ',},
{'lineNum':'   64','line':'		/**','coverage':'           : ',},
{'lineNum':'   65','line':'		 * For a new process and attach to it with ptrace','coverage':'           : ',},
{'lineNum':'   66','line':'		 *','coverage':'           : ',},
{'lineNum':'   67','line':'		 * @return true if OK, false otherwise','coverage':'           : ',},
{'lineNum':'   68','line':'		 */','coverage':'           : ',},
{'lineNum':'   69','line':'		virtual bool start(IEventListener &listener, const std::string &executable) = 0;','coverage':'           : ',},
{'lineNum':'   70','line':'','coverage':'           : ',},
{'lineNum':'   71','line':'		/**','coverage':'           : ',},
{'lineNum':'   72','line':'		 * Kill child with signal','coverage':'           : ',},
{'lineNum':'   73','line':'		 *','coverage':'           : ',},
{'lineNum':'   74','line':'		 * @param sig the signal to send to the child','coverage':'           : ',},
{'lineNum':'   75','line':'		 */','coverage':'           : ',},
{'lineNum':'   76','line':'		virtual void kill(int sig) = 0;','coverage':'           : ',},
{'lineNum':'   77','line':'','coverage':'           : ',},
{'lineNum':'   78','line':'		/**','coverage':'           : ',},
{'lineNum':'   79','line':'		 * Continue execution with an event','coverage':'           : ',},
{'lineNum':'   80','line':'		 *','coverage':'           : ',},
{'lineNum':'   81','line':'		 * @return true if the process should continue, false otherwise','coverage':'           : ',},
{'lineNum':'   82','line':'		 */','coverage':'           : ',},
{'lineNum':'   83','line':'		virtual bool continueExecution() = 0;','coverage':'           : ',},
{'lineNum':'   84','line':'','coverage':'           : ',},
{'lineNum':'   85','line':'','coverage':'           : ',},
{'lineNum':'   86','line':'		virtual unsigned int matchFile(const std::string &filename, uint8_t *data, size_t dataSize) = 0;','coverage':'           : ',},
{'lineNum':'   87','line':'	};','coverage':'           : ',},
{'lineNum':'   88','line':'','coverage':'           : ',},
{'lineNum':'   89','line':'	/**','coverage':'           : ',},
{'lineNum':'   90','line':'	 * Factory class for getting one of multiple engines, which can','coverage':'           : ',},
{'lineNum':'   91','line':'	 * match different file types.','coverage':'           : ',},
{'lineNum':'   92','line':'	 */','coverage':'           : ',},
{'lineNum':'   93','line':'	class IEngineFactory','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   94','line':'	{','coverage':'           : ',},
{'lineNum':'   95','line':'	public:','coverage':'           : ',},
{'lineNum':'   96','line':'		virtual ~IEngineFactory()','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   97','line':'		{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   98','line':'		}','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   99','line':'','coverage':'           : ',},
{'lineNum':'  100','line':'		virtual void registerEngine(IEngine &engine) = 0;','coverage':'           : ',},
{'lineNum':'  101','line':'','coverage':'           : ',},
{'lineNum':'  102','line':'		virtual IEngine *matchEngine(const std::string &file) = 0;','coverage':'           : ',},
{'lineNum':'  103','line':'','coverage':'           : ',},
{'lineNum':'  104','line':'		static IEngineFactory &getInstance();','coverage':'           : ',},
{'lineNum':'  105','line':'	};','coverage':'           : ',},
{'lineNum':'  106','line':'}','coverage':'           : ',},
];
var merged_data = [];
