var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 242, 'covered' : 14,};
var data = [
{'lineNum':'    1','line':'#include <file-parser.hh>','coverage':'           : ',},
{'lineNum':'    2','line':'#include <engine.hh>','coverage':'           : ',},
{'lineNum':'    3','line':'#include <utils.hh>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <phdr_data.h>','coverage':'           : ',},
{'lineNum':'    5','line':'','coverage':'           : ',},
{'lineNum':'    6','line':'#include <sys/types.h>','coverage':'           : ',},
{'lineNum':'    7','line':'#include <sys/stat.h>','coverage':'           : ',},
{'lineNum':'    8','line':'#include <fcntl.h>','coverage':'           : ',},
{'lineNum':'    9','line':'#include <unistd.h>','coverage':'           : ',},
{'lineNum':'   10','line':'#include <libelf.h>','coverage':'           : ',},
{'lineNum':'   11','line':'#include <dwarf.h>','coverage':'           : ',},
{'lineNum':'   12','line':'#include <elfutils/libdw.h>','coverage':'           : ',},
{'lineNum':'   13','line':'#include <map>','coverage':'           : ',},
{'lineNum':'   14','line':'#include <vector>','coverage':'           : ',},
{'lineNum':'   15','line':'#include <string>','coverage':'           : ',},
{'lineNum':'   16','line':'#include <configuration.hh>','coverage':'           : ',},
{'lineNum':'   17','line':'#ifndef _GNU_SOURCE','coverage':'           : ',},
{'lineNum':'   18','line':'# define _GNU_SOURCE','coverage':'           : ',},
{'lineNum':'   19','line':'#endif','coverage':'           : ',},
{'lineNum':'   20','line':'#include <link.h>','coverage':'           : ',},
{'lineNum':'   21','line':'','coverage':'           : ',},
{'lineNum':'   22','line':'using namespace kcov;','coverage':'           : ',},
{'lineNum':'   23','line':'','coverage':'           : ',},
{'lineNum':'   24','line':'enum SymbolType','coverage':'           : ',},
{'lineNum':'   25','line':'{','coverage':'           : ',},
{'lineNum':'   26','line':'	SYM_NORMAL = 0,','coverage':'           : ',},
{'lineNum':'   27','line':'	SYM_DYNAMIC = 1,','coverage':'           : ',},
{'lineNum':'   28','line':'};','coverage':'           : ',},
{'lineNum':'   29','line':'','coverage':'           : ',},
{'lineNum':'   30','line':'class ElfInstance : public IFileParser','coverage':'           : ',},
{'lineNum':'   31','line':'{','coverage':'           : ',},
{'lineNum':'   32','line':'public:','coverage':'           : ',},
{'lineNum':'   33','line':'	ElfInstance()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'	{','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   35','line':'		m_elf = nullptr;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   36','line':'		m_filename = "";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   37','line':'		m_checksum = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   38','line':'		m_elfIs32Bit = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   39','line':'		m_isMainFile = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'		m_initialized = false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   41','line':'','coverage':'           : ',},
{'lineNum':'   42','line':'		IParserManager::getInstance().registerParser(*this);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   43','line':'	}','class':'linePartCov','coverage':'  2 /   3  : ',},
{'lineNum':'   44','line':'','coverage':'           : ',},
{'lineNum':'   45','line':'	virtual ~ElfInstance()','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   46','line':'	{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   47','line':'	}','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   48','line':'','coverage':'           : ',},
{'lineNum':'   49','line':'	uint64_t getChecksum()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   50','line':'	{','coverage':'           : ',},
{'lineNum':'   51','line':'		return m_checksum;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   52','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   53','line':'','coverage':'           : ',},
{'lineNum':'   54','line':'	bool elfIs64Bit()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   55','line':'	{','coverage':'           : ',},
{'lineNum':'   56','line':'		return !m_elfIs32Bit;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   57','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   58','line':'','coverage':'           : ',},
{'lineNum':'   59','line':'	unsigned int matchParser(const std::string &filename, uint8_t *data, size_t dataSize)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   60','line':'	{','coverage':'           : ',},
{'lineNum':'   61','line':'		Elf32_Ehdr *hdr = (Elf32_Ehdr *)data;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   62','line':'','coverage':'           : ',},
{'lineNum':'   63','line':'		if (memcmp(hdr->e_ident, ELFMAG, strlen(ELFMAG)) == 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   64','line':'			return match_perfect;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'','coverage':'           : ',},
{'lineNum':'   66','line':'		return match_none;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   67','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   68','line':'','coverage':'           : ',},
{'lineNum':'   69','line':'	bool addFile(const std::string &filename, struct phdr_data_entry *data)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   70','line':'	{','coverage':'           : ',},
{'lineNum':'   71','line':'		if (!m_initialized) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   72','line':'			/******* Swap debug source root with runtime source root *****/','coverage':'           : ',},
{'lineNum':'   73','line':'			m_origRoot = IConfiguration::getInstance().getOriginalPathPrefix();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   74','line':'			m_newRoot  = IConfiguration::getInstance().getNewPathPrefix();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   75','line':'','coverage':'           : ',},
{'lineNum':'   76','line':'			m_fixedAddresses = IConfiguration::getInstance().getFixedBreakpoints();','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   77','line':'','coverage':'           : ',},
{'lineNum':'   78','line':'			panic_if(elf_version(EV_CURRENT) == EV_NONE,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   79','line':'					"ELF version failed\\n");','coverage':'           : ',},
{'lineNum':'   80','line':'			m_initialized = true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   81','line':'		}','coverage':'           : ',},
{'lineNum':'   82','line':'','coverage':'           : ',},
{'lineNum':'   83','line':'','coverage':'           : ',},
{'lineNum':'   84','line':'		m_filename = filename;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   85','line':'','coverage':'           : ',},
{'lineNum':'   86','line':'		m_buildId.clear();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   87','line':'','coverage':'           : ',},
{'lineNum':'   88','line':'		m_curSegments.clear();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   89','line':'		m_executableSegments.clear();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   90','line':'		for (uint32_t i = 0; data && i < data->n_segments; i++) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   91','line':'			struct phdr_data_segment *seg = &data->segments[i];','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   92','line':'','coverage':'           : ',},
{'lineNum':'   93','line':'			m_curSegments.push_back(Segment(seg->paddr, seg->vaddr, seg->size));','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   94','line':'		}','coverage':'           : ',},
{'lineNum':'   95','line':'','coverage':'           : ',},
{'lineNum':'   96','line':'		return checkFile();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   97','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   98','line':'','coverage':'           : ',},
{'lineNum':'   99','line':'	bool checkFile()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  100','line':'	{','coverage':'           : ',},
{'lineNum':'  101','line':'		struct Elf *elf;','coverage':'           : ',},
{'lineNum':'  102','line':'		bool out = true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  103','line':'		int fd;','coverage':'           : ',},
{'lineNum':'  104','line':'','coverage':'           : ',},
{'lineNum':'  105','line':'		fd = ::open(m_filename.c_str(), O_RDONLY, 0);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  106','line':'		if (fd < 0) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  107','line':'				error("Cannot open %s\\n", m_filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  108','line':'				return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  109','line':'		}','coverage':'           : ',},
{'lineNum':'  110','line':'','coverage':'           : ',},
{'lineNum':'  111','line':'		if (!(elf = elf_begin(fd, ELF_C_READ, nullptr)) ) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  112','line':'				error("elf_begin failed on %s\\n", m_filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  113','line':'				out = false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  114','line':'				goto out_open;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  115','line':'		}','coverage':'           : ',},
{'lineNum':'  116','line':'		if (elf_kind(elf) == ELF_K_NONE)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  117','line':'			out = false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  118','line':'','coverage':'           : ',},
{'lineNum':'  119','line':'		if (m_isMainFile) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  120','line':'			char *raw;','coverage':'           : ',},
{'lineNum':'  121','line':'			size_t sz;','coverage':'           : ',},
{'lineNum':'  122','line':'','coverage':'           : ',},
{'lineNum':'  123','line':'			raw = elf_getident(elf, &sz);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  124','line':'','coverage':'           : ',},
{'lineNum':'  125','line':'			if (raw && sz > EI_CLASS) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  126','line':'				m_elfIs32Bit = raw[EI_CLASS] == ELFCLASS32;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  127','line':'','coverage':'           : ',},
{'lineNum':'  128','line':'				if (elfIs64Bit() != machine_is_64bit())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  129','line':'					IConfiguration::getInstance().setParseSolibs(false);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  130','line':'			}','coverage':'           : ',},
{'lineNum':'  131','line':'','coverage':'           : ',},
{'lineNum':'  132','line':'			m_checksum = m_elfIs32Bit ? elf32_checksum(elf) : elf64_checksum(elf);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  133','line':'		}','coverage':'           : ',},
{'lineNum':'  134','line':'','coverage':'           : ',},
{'lineNum':'  135','line':'		elf_end(elf);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  136','line':'','coverage':'           : ',},
{'lineNum':'  137','line':'out_open:','coverage':'           : ',},
{'lineNum':'  138','line':'		close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  139','line':'','coverage':'           : ',},
{'lineNum':'  140','line':'		return out;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  141','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  142','line':'','coverage':'           : ',},
{'lineNum':'  143','line':'	bool parse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  144','line':'	{','coverage':'           : ',},
{'lineNum':'  145','line':'		struct stat st;','coverage':'           : ',},
{'lineNum':'  146','line':'','coverage':'           : ',},
{'lineNum':'  147','line':'		if (lstat(m_filename.c_str(), &st) < 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  148','line':'			return 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  149','line':'','coverage':'           : ',},
{'lineNum':'  150','line':'		parseOneElf();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  151','line':'		parseOneDwarf();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  152','line':'','coverage':'           : ',},
{'lineNum':'  153','line':'		for (const auto &it : m_fileListeners)','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  154','line':'			it->onFile(m_filename.c_str(), m_isMainFile ? IFileParser::FLG_NONE : IFileParser::FLG_TYPE_SOLIB);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  155','line':'','coverage':'           : ',},
{'lineNum':'  156','line':'		// After the first, all other are solibs','coverage':'           : ',},
{'lineNum':'  157','line':'		m_isMainFile = false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  158','line':'','coverage':'           : ',},
{'lineNum':'  159','line':'		// One-time setup of fixed breakpoints','coverage':'           : ',},
{'lineNum':'  160','line':'		for (const auto &it : m_fixedAddresses) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  161','line':'			for (const auto &itL : m_lineListeners)','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  162','line':'				itL->onLine("", 0, it);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  163','line':'		}','coverage':'           : ',},
{'lineNum':'  164','line':'		m_fixedAddresses.clear();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  165','line':'','coverage':'           : ',},
{'lineNum':'  166','line':'		return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  167','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  168','line':'','coverage':'           : ',},
{'lineNum':'  169','line':'	bool parseOneDwarf()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  170','line':'	{','coverage':'           : ',},
{'lineNum':'  171','line':'		Dwarf_Off offset = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  172','line':'		Dwarf_Off last_offset = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  173','line':'		size_t hdr_size;','coverage':'           : ',},
{'lineNum':'  174','line':'		Dwarf *dbg;','coverage':'           : ',},
{'lineNum':'  175','line':'		int fd;','coverage':'           : ',},
{'lineNum':'  176','line':'','coverage':'           : ',},
{'lineNum':'  177','line':'		fd = ::open(m_filename.c_str(), O_RDONLY, 0);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  178','line':'		if (fd < 0) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  179','line':'				error("Cannot open %s\\n", m_filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  180','line':'				return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  181','line':'		}','coverage':'           : ',},
{'lineNum':'  182','line':'','coverage':'           : ',},
{'lineNum':'  183','line':'		/* Initialize libdwarf */','coverage':'           : ',},
{'lineNum':'  184','line':'		dbg = dwarf_begin(fd, DWARF_C_READ);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  185','line':'','coverage':'           : ',},
{'lineNum':'  186','line':'		if (!dbg && m_buildId.length() > 0) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  187','line':'			/* Look for separate debug info */','coverage':'           : ',},
{'lineNum':'  188','line':'			std::string debug_file = std::string("/usr/lib/debug/.build-id/" +','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  189','line':'							     m_buildId.substr(0,2) +','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  190','line':'							     "/" +','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  191','line':'							     m_buildId.substr(2, std::string::npos) +','coverage':'           : ',},
{'lineNum':'  192','line':'							     ".debug");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  193','line':'','coverage':'           : ',},
{'lineNum':'  194','line':'			close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  195','line':'			fd = ::open(debug_file.c_str(), O_RDONLY, 0);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  196','line':'			if (fd < 0) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  197','line':'				// Some shared libraries have neither symbols nor build-id files','coverage':'           : ',},
{'lineNum':'  198','line':'				if (m_isMainFile)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  199','line':'					error("Cannot open %s\\n", debug_file.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  200','line':'				return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  201','line':'			}','coverage':'           : ',},
{'lineNum':'  202','line':'','coverage':'           : ',},
{'lineNum':'  203','line':'			dbg = dwarf_begin(fd, DWARF_C_READ);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  204','line':'		}','coverage':'           : ',},
{'lineNum':'  205','line':'','coverage':'           : ',},
{'lineNum':'  206','line':'		if (!dbg) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  207','line':'			kcov_debug(ELF_MSG, "No debug symbols in %s.\\n", m_filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  208','line':'			close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  209','line':'			return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  210','line':'		}','coverage':'           : ',},
{'lineNum':'  211','line':'','coverage':'           : ',},
{'lineNum':'  212','line':'		/* Iterate over the headers */','coverage':'           : ',},
{'lineNum':'  213','line':'		while (dwarf_nextcu(dbg, offset, &offset, &hdr_size, 0, 0, 0) == 0) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  214','line':'			Dwarf_Lines* line_buffer;','coverage':'           : ',},
{'lineNum':'  215','line':'			Dwarf_Files *file_buffer;','coverage':'           : ',},
{'lineNum':'  216','line':'			size_t line_count;','coverage':'           : ',},
{'lineNum':'  217','line':'			size_t file_count;','coverage':'           : ',},
{'lineNum':'  218','line':'			Dwarf_Die die;','coverage':'           : ',},
{'lineNum':'  219','line':'			unsigned int i;','coverage':'           : ',},
{'lineNum':'  220','line':'','coverage':'           : ',},
{'lineNum':'  221','line':'			if (dwarf_offdie(dbg, last_offset + hdr_size, &die) == nullptr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  222','line':'				goto out_err;','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  223','line':'','coverage':'           : ',},
{'lineNum':'  224','line':'			last_offset = offset;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  225','line':'','coverage':'           : ',},
{'lineNum':'  226','line':'			/* Get the source lines */','coverage':'           : ',},
{'lineNum':'  227','line':'			if (dwarf_getsrclines(&die, &line_buffer, &line_count) != 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  228','line':'				continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  229','line':'','coverage':'           : ',},
{'lineNum':'  230','line':'			/* And the files */','coverage':'           : ',},
{'lineNum':'  231','line':'			if (dwarf_getsrcfiles(&die, &file_buffer, &file_count) != 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  232','line':'				continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  233','line':'','coverage':'           : ',},
{'lineNum':'  234','line':'			/* Store them */','coverage':'           : ',},
{'lineNum':'  235','line':'			for (i = 0; i < line_count; i++) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  236','line':'				Dwarf_Line *line;','coverage':'           : ',},
{'lineNum':'  237','line':'				int line_nr;','coverage':'           : ',},
{'lineNum':'  238','line':'				const char* line_source;','coverage':'           : ',},
{'lineNum':'  239','line':'				Dwarf_Word mtime, len;','coverage':'           : ',},
{'lineNum':'  240','line':'				bool is_code;','coverage':'           : ',},
{'lineNum':'  241','line':'				Dwarf_Addr addr;','coverage':'           : ',},
{'lineNum':'  242','line':'','coverage':'           : ',},
{'lineNum':'  243','line':'				if ( !(line = dwarf_onesrcline(line_buffer, i)) )','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  244','line':'					goto out_err;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  245','line':'				if (dwarf_lineno(line, &line_nr) != 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  246','line':'					goto out_err;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  247','line':'				if (!(line_source = dwarf_linesrc(line, &mtime, &len)) )','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  248','line':'					goto out_err;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  249','line':'				if (dwarf_linebeginstatement(line, &is_code) != 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  250','line':'					goto out_err;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  251','line':'','coverage':'           : ',},
{'lineNum':'  252','line':'				if (dwarf_lineaddr(line, &addr) != 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  253','line':'					goto out_err;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  254','line':'','coverage':'           : ',},
{'lineNum':'  255','line':'				if (line_nr && is_code) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  256','line':'					const char *const *src_dirs;','coverage':'           : ',},
{'lineNum':'  257','line':'					std::string full_file_path;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  258','line':'					std::string file_path = line_source;','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  259','line':'					size_t ndirs = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  260','line':'','coverage':'           : ',},
{'lineNum':'  261','line':'					/* Lookup the compilation path */','coverage':'           : ',},
{'lineNum':'  262','line':'					if (dwarf_getsrcdirs(file_buffer, &src_dirs, &ndirs) != 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  263','line':'						continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  264','line':'','coverage':'           : ',},
{'lineNum':'  265','line':'					if (ndirs == 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  266','line':'						continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  267','line':'','coverage':'           : ',},
{'lineNum':'  268','line':'					if (!addressIsValid(addr))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  269','line':'						continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  270','line':'','coverage':'           : ',},
{'lineNum':'  271','line':'					/* Use the full compilation path unless the source already','coverage':'           : ',},
{'lineNum':'  272','line':'					 * has an absolute path */','coverage':'           : ',},
{'lineNum':'  273','line':'					std::string dir = src_dirs[0] == nullptr ? "" : src_dirs[0];','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  274','line':'					full_file_path = dir_concat(dir, line_source);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  275','line':'					if (line_source[0] != \'/\')','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  276','line':'						file_path = full_file_path;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  277','line':'','coverage':'           : ',},
{'lineNum':'  278','line':'					/******** replace the path information found in the debug symbols with *********/','coverage':'           : ',},
{'lineNum':'  279','line':'					/******** the value from in the newRoot variable.         *********/','coverage':'           : ',},
{'lineNum':'  280','line':'					std::string rp;','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  281','line':'					if (m_origRoot.length() > 0 && m_newRoot.length() > 0) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  282','line':' 					  std::string dwarfPath = file_path;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  283','line':'					  size_t dwIndex = dwarfPath.find(m_origRoot);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  284','line':'					  if (dwIndex != std::string::npos) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  285','line':'					    dwarfPath.replace(dwIndex, m_origRoot.length(), m_newRoot);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  286','line':'					    rp = get_real_path(dwarfPath);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  287','line':'					  }','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  288','line':'					}','coverage':'           : ',},
{'lineNum':'  289','line':'					else {','coverage':'           : ',},
{'lineNum':'  290','line':'					  rp = get_real_path(file_path);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  291','line':'					}','coverage':'           : ',},
{'lineNum':'  292','line':'','coverage':'           : ',},
{'lineNum':'  293','line':'					if (rp != "")','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  294','line':'					{','coverage':'           : ',},
{'lineNum':'  295','line':'						file_path = full_file_path = rp;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  296','line':'					}','coverage':'           : ',},
{'lineNum':'  297','line':'','coverage':'           : ',},
{'lineNum':'  298','line':'					for (const auto &it : m_lineListeners)','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  299','line':'						it->onLine(file_path.c_str(), line_nr, adjustAddressBySegment(addr));','class':'lineNoCov','coverage':'  0 /   4  : ',},
{'lineNum':'  300','line':'				}','coverage':'           : ',},
{'lineNum':'  301','line':'			}','coverage':'           : ',},
{'lineNum':'  302','line':'		}','coverage':'           : ',},
{'lineNum':'  303','line':'','coverage':'           : ',},
{'lineNum':'  304','line':'out_err:','coverage':'           : ',},
{'lineNum':'  305','line':'		/* Shutdown libdwarf */','coverage':'           : ',},
{'lineNum':'  306','line':'		if (dwarf_end(dbg) != 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  307','line':'			goto out_err;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  308','line':'','coverage':'           : ',},
{'lineNum':'  309','line':'		close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  310','line':'','coverage':'           : ',},
{'lineNum':'  311','line':'		return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  312','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  313','line':'','coverage':'           : ',},
{'lineNum':'  314','line':'	bool parseOneElf()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  315','line':'	{','coverage':'           : ',},
{'lineNum':'  316','line':'		Elf_Scn *scn = nullptr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  317','line':'		size_t shstrndx;','coverage':'           : ',},
{'lineNum':'  318','line':'		bool ret = false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  319','line':'		bool setupSegments = false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  320','line':'		int fd;','coverage':'           : ',},
{'lineNum':'  321','line':'		unsigned int i;','coverage':'           : ',},
{'lineNum':'  322','line':'','coverage':'           : ',},
{'lineNum':'  323','line':'		fd = ::open(m_filename.c_str(), O_RDONLY, 0);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  324','line':'		if (fd < 0) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  325','line':'				error("Cannot open %s\\n", m_filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  326','line':'				return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  327','line':'		}','coverage':'           : ',},
{'lineNum':'  328','line':'','coverage':'           : ',},
{'lineNum':'  329','line':'		if (!(m_elf = elf_begin(fd, ELF_C_READ, nullptr)) ) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  330','line':'				error("elf_begin failed on %s\\n", m_filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  331','line':'				goto out_open;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  332','line':'		}','coverage':'           : ',},
{'lineNum':'  333','line':'','coverage':'           : ',},
{'lineNum':'  334','line':'		if (elf_getshdrstrndx(m_elf, &shstrndx) < 0) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  335','line':'				error("elf_getshstrndx failed on %s\\n", m_filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  336','line':'				goto out_elf_begin;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  337','line':'		}','coverage':'           : ',},
{'lineNum':'  338','line':'','coverage':'           : ',},
{'lineNum':'  339','line':'		setupSegments = m_curSegments.size() == 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  340','line':'		while ( (scn = elf_nextscn(m_elf, scn)) != nullptr )','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  341','line':'		{','coverage':'           : ',},
{'lineNum':'  342','line':'			uint64_t sh_type;','coverage':'           : ',},
{'lineNum':'  343','line':'			uint64_t sh_addr;','coverage':'           : ',},
{'lineNum':'  344','line':'			uint64_t sh_size;','coverage':'           : ',},
{'lineNum':'  345','line':'			uint64_t sh_flags;','coverage':'           : ',},
{'lineNum':'  346','line':'			uint64_t sh_name;','coverage':'           : ',},
{'lineNum':'  347','line':'			uint64_t n_namesz;','coverage':'           : ',},
{'lineNum':'  348','line':'			uint64_t n_descsz;','coverage':'           : ',},
{'lineNum':'  349','line':'			uint64_t n_type;','coverage':'           : ',},
{'lineNum':'  350','line':'			char *n_data;','coverage':'           : ',},
{'lineNum':'  351','line':'			char *name;','coverage':'           : ',},
{'lineNum':'  352','line':'','coverage':'           : ',},
{'lineNum':'  353','line':'			if (m_elfIs32Bit) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  354','line':'				Elf32_Shdr *shdr32 = elf32_getshdr(scn);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  355','line':'','coverage':'           : ',},
{'lineNum':'  356','line':'				sh_type = shdr32->sh_type;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  357','line':'				sh_addr = shdr32->sh_addr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  358','line':'				sh_size = shdr32->sh_size;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  359','line':'				sh_flags = shdr32->sh_flags;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  360','line':'				sh_name = shdr32->sh_name;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  361','line':'			} else {','coverage':'           : ',},
{'lineNum':'  362','line':'				Elf64_Shdr *shdr64 = elf64_getshdr(scn);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  363','line':'','coverage':'           : ',},
{'lineNum':'  364','line':'				sh_type = shdr64->sh_type;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  365','line':'				sh_addr = shdr64->sh_addr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  366','line':'				sh_size = shdr64->sh_size;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  367','line':'				sh_flags = shdr64->sh_flags;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  368','line':'				sh_name = shdr64->sh_name;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  369','line':'			}','coverage':'           : ',},
{'lineNum':'  370','line':'','coverage':'           : ',},
{'lineNum':'  371','line':'			Elf_Data *data = elf_getdata(scn, nullptr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  372','line':'','coverage':'           : ',},
{'lineNum':'  373','line':'			name = elf_strptr(m_elf, shstrndx, sh_name);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  374','line':'			if(!data) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  375','line':'					error("elf_getdata failed on section %s in %s\\n",','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  376','line':'							name, m_filename.c_str());','coverage':'           : ',},
{'lineNum':'  377','line':'					goto out_elf_begin;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  378','line':'			}','coverage':'           : ',},
{'lineNum':'  379','line':'','coverage':'           : ',},
{'lineNum':'  380','line':'			if (sh_type == SHT_NOTE) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  381','line':'				if (m_elfIs32Bit) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  382','line':'					Elf32_Nhdr *nhdr32 = (Elf32_Nhdr *)data->d_buf;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  383','line':'','coverage':'           : ',},
{'lineNum':'  384','line':'					n_namesz = nhdr32->n_namesz;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  385','line':'					n_descsz = nhdr32->n_descsz;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  386','line':'					n_type = nhdr32->n_type;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  387','line':'					n_data = (char *)data->d_buf + sizeof (Elf32_Nhdr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  388','line':'				} else {','coverage':'           : ',},
{'lineNum':'  389','line':'					Elf64_Nhdr *nhdr64 = (Elf64_Nhdr *)data->d_buf;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  390','line':'','coverage':'           : ',},
{'lineNum':'  391','line':'					n_namesz = nhdr64->n_namesz;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  392','line':'					n_descsz = nhdr64->n_descsz;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  393','line':'					n_type = nhdr64->n_type;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  394','line':'					n_data = (char *)data->d_buf + sizeof (Elf64_Nhdr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  395','line':'				}','coverage':'           : ',},
{'lineNum':'  396','line':'','coverage':'           : ',},
{'lineNum':'  397','line':'				if (::strcmp(n_data, ELF_NOTE_GNU) == 0 &&','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  398','line':'				    n_type == NT_GNU_BUILD_ID) {','coverage':'           : ',},
{'lineNum':'  399','line':'					const char *hex_digits = "0123456789abcdef";','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  400','line':'					unsigned char *build_id;','coverage':'           : ',},
{'lineNum':'  401','line':'','coverage':'           : ',},
{'lineNum':'  402','line':'					build_id = (unsigned char *)n_data + n_namesz;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  403','line':'					for (i = 0; i < n_descsz; i++) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  404','line':'						m_buildId.push_back(hex_digits[(build_id[i] >> 4) & 0xf]);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  405','line':'						m_buildId.push_back(hex_digits[(build_id[i] >> 0) & 0xf]);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  406','line':'					}','coverage':'           : ',},
{'lineNum':'  407','line':'				}','coverage':'           : ',},
{'lineNum':'  408','line':'			}','coverage':'           : ',},
{'lineNum':'  409','line':'','coverage':'           : ',},
{'lineNum':'  410','line':'			if ((sh_flags & (SHF_EXECINSTR | SHF_ALLOC)) != (SHF_EXECINSTR | SHF_ALLOC))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  411','line':'				continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  412','line':'','coverage':'           : ',},
{'lineNum':'  413','line':'			// If we have segments already, we can safely skip this','coverage':'           : ',},
{'lineNum':'  414','line':'			if (setupSegments)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  415','line':'				m_curSegments.push_back(Segment(sh_addr, sh_addr, sh_size));','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  416','line':'			m_executableSegments.push_back(Segment(sh_addr, sh_addr, sh_size));','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  417','line':'		}','coverage':'           : ',},
{'lineNum':'  418','line':'		elf_end(m_elf);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  419','line':'		if (!(m_elf = elf_begin(fd, ELF_C_READ, nullptr)) ) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  420','line':'			error("elf_begin failed on %s\\n", m_filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  421','line':'			goto out_open;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  422','line':'		}','coverage':'           : ',},
{'lineNum':'  423','line':'','coverage':'           : ',},
{'lineNum':'  424','line':'		ret = true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  425','line':'','coverage':'           : ',},
{'lineNum':'  426','line':'out_elf_begin:','coverage':'           : ',},
{'lineNum':'  427','line':'		elf_end(m_elf);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  428','line':'out_open:','coverage':'           : ',},
{'lineNum':'  429','line':'		close(fd);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  430','line':'','coverage':'           : ',},
{'lineNum':'  431','line':'		return ret;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  432','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  433','line':'','coverage':'           : ',},
{'lineNum':'  434','line':'	void registerLineListener(ILineListener &listener)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  435','line':'	{','coverage':'           : ',},
{'lineNum':'  436','line':'		m_lineListeners.push_back(&listener);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  437','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  438','line':'','coverage':'           : ',},
{'lineNum':'  439','line':'	void registerFileListener(IFileListener &listener)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  440','line':'	{','coverage':'           : ',},
{'lineNum':'  441','line':'		m_fileListeners.push_back(&listener);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  442','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  443','line':'','coverage':'           : ',},
{'lineNum':'  444','line':'private:','coverage':'           : ',},
{'lineNum':'  445','line':'	class Segment','coverage':'           : ',},
{'lineNum':'  446','line':'	{','coverage':'           : ',},
{'lineNum':'  447','line':'	public:','coverage':'           : ',},
{'lineNum':'  448','line':'		Segment(uint64_t paddr, uint64_t vaddr, uint64_t size) :','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  449','line':'			m_paddr(paddr), m_vaddr(vaddr), m_size(size)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  450','line':'		{','coverage':'           : ',},
{'lineNum':'  451','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  452','line':'','coverage':'           : ',},
{'lineNum':'  453','line':'		uint64_t m_paddr;','coverage':'           : ',},
{'lineNum':'  454','line':'		uint64_t m_vaddr;','coverage':'           : ',},
{'lineNum':'  455','line':'		size_t m_size;','coverage':'           : ',},
{'lineNum':'  456','line':'	};','coverage':'           : ',},
{'lineNum':'  457','line':'','coverage':'           : ',},
{'lineNum':'  458','line':'	typedef std::vector<Segment> SegmentList_t;','coverage':'           : ',},
{'lineNum':'  459','line':'	typedef std::vector<ILineListener *> LineListenerList_t;','coverage':'           : ',},
{'lineNum':'  460','line':'	typedef std::vector<IFileListener *> FileListenerList_t;','coverage':'           : ',},
{'lineNum':'  461','line':'','coverage':'           : ',},
{'lineNum':'  462','line':'	bool addressIsValid(uint64_t addr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  463','line':'	{','coverage':'           : ',},
{'lineNum':'  464','line':'		for (const auto &it : m_executableSegments) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  465','line':'			if (addr >= it.m_paddr && addr < it.m_paddr + it.m_size) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  466','line':'				return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  467','line':'			}','coverage':'           : ',},
{'lineNum':'  468','line':'		}','coverage':'           : ',},
{'lineNum':'  469','line':'','coverage':'           : ',},
{'lineNum':'  470','line':'		return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  471','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  472','line':'','coverage':'           : ',},
{'lineNum':'  473','line':'	uint64_t adjustAddressBySegment(uint64_t addr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  474','line':'	{','coverage':'           : ',},
{'lineNum':'  475','line':'		for (const auto &it : m_curSegments) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  476','line':'			if (addr >= it.m_paddr && addr < it.m_paddr + it.m_size) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  477','line':'				addr = (addr - it.m_paddr + it.m_vaddr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  478','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  479','line':'			}','coverage':'           : ',},
{'lineNum':'  480','line':'		}','coverage':'           : ',},
{'lineNum':'  481','line':'','coverage':'           : ',},
{'lineNum':'  482','line':'		return addr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  483','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  484','line':'','coverage':'           : ',},
{'lineNum':'  485','line':'	SegmentList_t m_curSegments;','coverage':'           : ',},
{'lineNum':'  486','line':'	SegmentList_t m_executableSegments;','coverage':'           : ',},
{'lineNum':'  487','line':'','coverage':'           : ',},
{'lineNum':'  488','line':'	struct Elf *m_elf;','coverage':'           : ',},
{'lineNum':'  489','line':'	bool m_elfIs32Bit;','coverage':'           : ',},
{'lineNum':'  490','line':'	LineListenerList_t m_lineListeners;','coverage':'           : ',},
{'lineNum':'  491','line':'	FileListenerList_t m_fileListeners;','coverage':'           : ',},
{'lineNum':'  492','line':'	std::string m_filename;','coverage':'           : ',},
{'lineNum':'  493','line':'	std::string m_buildId;','coverage':'           : ',},
{'lineNum':'  494','line':'	bool m_isMainFile;','coverage':'           : ',},
{'lineNum':'  495','line':'	uint64_t m_checksum;','coverage':'           : ',},
{'lineNum':'  496','line':'	bool m_initialized;','coverage':'           : ',},
{'lineNum':'  497','line':'	std::list<uint64_t> m_fixedAddresses;','coverage':'           : ',},
{'lineNum':'  498','line':'','coverage':'           : ',},
{'lineNum':'  499','line':'	/***** Add strings to update path information. *******/','coverage':'           : ',},
{'lineNum':'  500','line':'	std::string m_origRoot;','coverage':'           : ',},
{'lineNum':'  501','line':'	std::string m_newRoot;','coverage':'           : ',},
{'lineNum':'  502','line':'};','coverage':'           : ',},
{'lineNum':'  503','line':'','coverage':'           : ',},
{'lineNum':'  504','line':'static ElfInstance g_instance;','class':'linePartCov','coverage':'  4 /   5  : ',},
];
var merged_data = [];
