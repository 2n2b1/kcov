var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 10, 'covered' : 0,};
var data = [
{'lineNum':'    1','line':'#pragma once','coverage':'           : ',},
{'lineNum':'    2','line':'','coverage':'           : ',},
{'lineNum':'    3','line':'#include <stdint.h>','coverage':'           : ',},
{'lineNum':'    4','line':'','coverage':'           : ',},
{'lineNum':'    5','line':'#include <functional>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <string>','coverage':'           : ',},
{'lineNum':'    7','line':'','coverage':'           : ',},
{'lineNum':'    8','line':'namespace kcov','coverage':'           : ',},
{'lineNum':'    9','line':'{','coverage':'           : ',},
{'lineNum':'   10','line':'	class LineId','class':'lineNoCov','coverage':'  0 /   6  : ',},
{'lineNum':'   11','line':'	{','coverage':'           : ',},
{'lineNum':'   12','line':'	public:','coverage':'           : ',},
{'lineNum':'   13','line':'		LineId(const std::string &fileName, int nr) :','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   14','line':'			m_file(fileName), m_lineNr(nr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   15','line':'		{','coverage':'           : ',},
{'lineNum':'   16','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   17','line':'','coverage':'           : ',},
{'lineNum':'   18','line':'		bool operator==(const LineId &other) const','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   19','line':'		{','coverage':'           : ',},
{'lineNum':'   20','line':'			return (m_file == other.m_file) && (m_lineNr == other.m_lineNr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   21','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   22','line':'','coverage':'           : ',},
{'lineNum':'   23','line':'		const std::string m_file;','coverage':'           : ',},
{'lineNum':'   24','line':'		unsigned int m_lineNr;','coverage':'           : ',},
{'lineNum':'   25','line':'	};','coverage':'           : ',},
{'lineNum':'   26','line':'','coverage':'           : ',},
{'lineNum':'   27','line':'	class LineIdHash','coverage':'           : ',},
{'lineNum':'   28','line':'	{','coverage':'           : ',},
{'lineNum':'   29','line':'	public:','coverage':'           : ',},
{'lineNum':'   30','line':'		size_t operator()(const LineId &obj) const','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   31','line':'		{','coverage':'           : ',},
{'lineNum':'   32','line':'			return std::hash<std::string>()(obj.m_file) ^ std::hash<int>()(obj.m_lineNr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   33','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   34','line':'	};','coverage':'           : ',},
{'lineNum':'   35','line':'','coverage':'           : ',},
{'lineNum':'   36','line':'}','coverage':'           : ',},
];
var merged_data = [];
