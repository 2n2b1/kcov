var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 231, 'covered' : 188,};
var data = [
{'lineNum':'    1','line':'#include <file-parser.hh>','coverage':'           : ',},
{'lineNum':'    2','line':'#include <collector.hh>','coverage':'           : ',},
{'lineNum':'    3','line':'#include <utils.hh>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <filter.hh>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <writer.hh>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <lineid.hh>','coverage':'           : ',},
{'lineNum':'    7','line':'','coverage':'           : ',},
{'lineNum':'    8','line':'#include <vector>','coverage':'           : ',},
{'lineNum':'    9','line':'#include <string>','coverage':'           : ',},
{'lineNum':'   10','line':'#include <list>','coverage':'           : ',},
{'lineNum':'   11','line':'#include <unordered_map>','coverage':'           : ',},
{'lineNum':'   12','line':'#include <map>','coverage':'           : ',},
{'lineNum':'   13','line':'','coverage':'           : ',},
{'lineNum':'   14','line':'#include <sys/stat.h>','coverage':'           : ',},
{'lineNum':'   15','line':'#include <sys/types.h>','coverage':'           : ',},
{'lineNum':'   16','line':'#include <dirent.h>','coverage':'           : ',},
{'lineNum':'   17','line':'','coverage':'           : ',},
{'lineNum':'   18','line':'#include <swap-endian.hh>','coverage':'           : ',},
{'lineNum':'   19','line':'','coverage':'           : ',},
{'lineNum':'   20','line':'#include "merge-parser.hh"','coverage':'           : ',},
{'lineNum':'   21','line':'','coverage':'           : ',},
{'lineNum':'   22','line':'using namespace kcov;','coverage':'           : ',},
{'lineNum':'   23','line':'','coverage':'           : ',},
{'lineNum':'   24','line':'#define MERGE_MAGIC   0x4d6f6172 // "Moar"','coverage':'           : ',},
{'lineNum':'   25','line':'#define MERGE_VERSION 2','coverage':'           : ',},
{'lineNum':'   26','line':'','coverage':'           : ',},
{'lineNum':'   27','line':'struct line_entry','coverage':'           : ',},
{'lineNum':'   28','line':'{','coverage':'           : ',},
{'lineNum':'   29','line':'	uint32_t line;','coverage':'           : ',},
{'lineNum':'   30','line':'	uint32_t address_start;','coverage':'           : ',},
{'lineNum':'   31','line':'	uint32_t n_addresses;','coverage':'           : ',},
{'lineNum':'   32','line':'};','coverage':'           : ',},
{'lineNum':'   33','line':'','coverage':'           : ',},
{'lineNum':'   34','line':'struct file_data','coverage':'           : ',},
{'lineNum':'   35','line':'{','coverage':'           : ',},
{'lineNum':'   36','line':'	uint32_t magic;','coverage':'           : ',},
{'lineNum':'   37','line':'	uint32_t version;','coverage':'           : ',},
{'lineNum':'   38','line':'	uint32_t size;','coverage':'           : ',},
{'lineNum':'   39','line':'	uint32_t checksum;','coverage':'           : ',},
{'lineNum':'   40','line':'	uint64_t timestamp;','coverage':'           : ',},
{'lineNum':'   41','line':'	uint32_t n_entries;','coverage':'           : ',},
{'lineNum':'   42','line':'	uint32_t address_table_offset;','coverage':'           : ',},
{'lineNum':'   43','line':'	uint32_t file_name_offset;','coverage':'           : ',},
{'lineNum':'   44','line':'','coverage':'           : ',},
{'lineNum':'   45','line':'	struct line_entry entries[];','coverage':'           : ',},
{'lineNum':'   46','line':'} __attribute__((packed));','coverage':'           : ',},
{'lineNum':'   47','line':'','coverage':'           : ',},
{'lineNum':'   48','line':'// Unit test stuff','coverage':'           : ',},
{'lineNum':'   49','line':'namespace merge_parser','coverage':'           : ',},
{'lineNum':'   50','line':'{','coverage':'           : ',},
{'lineNum':'   51','line':'	class marshal;','coverage':'           : ',},
{'lineNum':'   52','line':'	class output;','coverage':'           : ',},
{'lineNum':'   53','line':'	class input;','coverage':'           : ',},
{'lineNum':'   54','line':'}','coverage':'           : ',},
{'lineNum':'   55','line':'','coverage':'           : ',},
{'lineNum':'   56','line':'class MergeParser :','class':'linePartCov','coverage':'  3 /   9  : ',},
{'lineNum':'   57','line':'	public IMergeParser,','coverage':'           : ',},
{'lineNum':'   58','line':'	public IFileParser::ILineListener,','coverage':'           : ',},
{'lineNum':'   59','line':'	public IFileParser::IFileListener','coverage':'           : ',},
{'lineNum':'   60','line':'{','coverage':'           : ',},
{'lineNum':'   61','line':'public:','coverage':'           : ',},
{'lineNum':'   62','line':'	friend class merge_parser::marshal;','coverage':'           : ',},
{'lineNum':'   63','line':'	friend class merge_parser::output;','coverage':'           : ',},
{'lineNum':'   64','line':'	friend class merge_parser::input;','coverage':'           : ',},
{'lineNum':'   65','line':'','coverage':'           : ',},
{'lineNum':'   66','line':'	MergeParser(IFileParser &localParser,','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   67','line':'			const std::string &baseDirectory,','coverage':'           : ',},
{'lineNum':'   68','line':'			const std::string &outputDirectory,','coverage':'           : ',},
{'lineNum':'   69','line':'			IFilter &filter) :','coverage':'           : ',},
{'lineNum':'   70','line':'		m_baseDirectory(baseDirectory),','coverage':'           : ',},
{'lineNum':'   71','line':'		m_outputDirectory(outputDirectory),','coverage':'           : ',},
{'lineNum':'   72','line':'		m_filter(filter)','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   73','line':'	{','coverage':'           : ',},
{'lineNum':'   74','line':'		localParser.registerFileListener(*this);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   75','line':'		localParser.registerLineListener(*this);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   76','line':'	}','class':'linePartCov','coverage':'  2 /   3  : ',},
{'lineNum':'   77','line':'','coverage':'           : ',},
{'lineNum':'   78','line':'	// From IFileParser','coverage':'           : ',},
{'lineNum':'   79','line':'	virtual bool addFile(const std::string &filename, struct phdr_data_entry *phdr_data)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'	{','coverage':'           : ',},
{'lineNum':'   81','line':'		return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   82','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   83','line':'','coverage':'           : ',},
{'lineNum':'   84','line':'	virtual void registerLineListener(IFileParser::ILineListener &listener)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   85','line':'	{','coverage':'           : ',},
{'lineNum':'   86','line':'		m_lineListeners.push_back(&listener);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   87','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   88','line':'','coverage':'           : ',},
{'lineNum':'   89','line':'','coverage':'           : ',},
{'lineNum':'   90','line':'	// Unused ...','coverage':'           : ',},
{'lineNum':'   91','line':'	virtual void registerFileListener(IFileParser::IFileListener &listener)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   92','line':'	{','coverage':'           : ',},
{'lineNum':'   93','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   94','line':'','coverage':'           : ',},
{'lineNum':'   95','line':'	virtual bool parse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   96','line':'	{','coverage':'           : ',},
{'lineNum':'   97','line':'		return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   98','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   99','line':'','coverage':'           : ',},
{'lineNum':'  100','line':'	virtual uint64_t getChecksum()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  101','line':'	{','coverage':'           : ',},
{'lineNum':'  102','line':'		return 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  103','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  104','line':'','coverage':'           : ',},
{'lineNum':'  105','line':'	// ... to here','coverage':'           : ',},
{'lineNum':'  106','line':'	virtual unsigned int matchParser(const std::string &filename, uint8_t *data, size_t dataSize)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  107','line':'	{','coverage':'           : ',},
{'lineNum':'  108','line':'		return match_none;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  109','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  110','line':'','coverage':'           : ',},
{'lineNum':'  111','line':'	// From ICollector::IListener','coverage':'           : ',},
{'lineNum':'  112','line':'	void onAddress(unsigned long addr, unsigned long hits)','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'  113','line':'	{','coverage':'           : ',},
{'lineNum':'  114','line':'		if (m_fileLineByAddress.find(addr) == m_fileLineByAddress.end())','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  115','line':'			return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  116','line':'		addr = m_fileLineByAddress[addr];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  117','line':'','coverage':'           : ',},
{'lineNum':'  118','line':'		File *file = m_filesByAddress[addr];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  119','line':'','coverage':'           : ',},
{'lineNum':'  120','line':'		if (!file)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  121','line':'			return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  122','line':'','coverage':'           : ',},
{'lineNum':'  123','line':'		file->registerHits(addr, hits);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  124','line':'','coverage':'           : ',},
{'lineNum':'  125','line':'		for (const auto &it : m_collectorListeners) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  126','line':'			it->onAddress(addr, hits);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  127','line':'		}','coverage':'           : ',},
{'lineNum':'  128','line':'	}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  129','line':'','coverage':'           : ',},
{'lineNum':'  130','line':'	// From IFileParser::ILineListener','coverage':'           : ',},
{'lineNum':'  131','line':'	void onLine(const std::string &filename, unsigned int lineNr,','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'  132','line':'					unsigned long addr)','coverage':'           : ',},
{'lineNum':'  133','line':'	{','coverage':'           : ',},
{'lineNum':'  134','line':'		if (!m_filter.runFilters(filename))','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  135','line':'		{','coverage':'           : ',},
{'lineNum':'  136','line':'			return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  137','line':'		}','coverage':'           : ',},
{'lineNum':'  138','line':'','coverage':'           : ',},
{'lineNum':'  139','line':'		// Nothing to do in that case','coverage':'           : ',},
{'lineNum':'  140','line':'		if (!file_exists(filename))','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  141','line':'			return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  142','line':'','coverage':'           : ',},
{'lineNum':'  143','line':'		File *file;','coverage':'           : ',},
{'lineNum':'  144','line':'','coverage':'           : ',},
{'lineNum':'  145','line':'		file = m_files[filename];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  146','line':'		if (!file) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  147','line':'			file = new File(filename);','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  148','line':'','coverage':'           : ',},
{'lineNum':'  149','line':'			m_files[filename] = file;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  150','line':'		}','coverage':'           : ',},
{'lineNum':'  151','line':'','coverage':'           : ',},
{'lineNum':'  152','line':'','coverage':'           : ',},
{'lineNum':'  153','line':'		uint64_t addrHash = hashAddressUnique(filename, lineNr, addr);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  154','line':'','coverage':'           : ',},
{'lineNum':'  155','line':'		m_addressByFileLine[addrHash] = addr;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  156','line':'		m_fileLineByAddress[addr] = addrHash;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  157','line':'		addr = addrHash;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  158','line':'','coverage':'           : ',},
{'lineNum':'  159','line':'		// Mark as a local file','coverage':'           : ',},
{'lineNum':'  160','line':'		file->setLocal();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  161','line':'		file->addLine(lineNr, addr & ~(1ULL << 63));','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  162','line':'','coverage':'           : ',},
{'lineNum':'  163','line':'		// Record this for the collector hits','coverage':'           : ',},
{'lineNum':'  164','line':'		m_filesByAddress[addr] = file;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  165','line':'','coverage':'           : ',},
{'lineNum':'  166','line':'		for (const auto &it : m_lineListeners)','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  167','line':'			it->onLine(filename, lineNr, addr);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  168','line':'	}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  169','line':'','coverage':'           : ',},
{'lineNum':'  170','line':'	// From IFileParser::IFileListener','coverage':'           : ',},
{'lineNum':'  171','line':'	void onFile(const std::string &file, enum FileFlags flags)','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  172','line':'	{','coverage':'           : ',},
{'lineNum':'  173','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  174','line':'','coverage':'           : ',},
{'lineNum':'  175','line':'','coverage':'           : ',},
{'lineNum':'  176','line':'	// From IWriter','coverage':'           : ',},
{'lineNum':'  177','line':'	void onStartup()','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  178','line':'	{','coverage':'           : ',},
{'lineNum':'  179','line':'		mkdir(m_baseDirectory.c_str(), 0755);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  180','line':'		mkdir(m_outputDirectory.c_str(), 0755);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  181','line':'		mkdir(fmt("%s/metadata", m_outputDirectory.c_str()).c_str(), 0755);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  182','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  183','line':'','coverage':'           : ',},
{'lineNum':'  184','line':'	void onStop()','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'  185','line':'	{','coverage':'           : ',},
{'lineNum':'  186','line':'		parseStoredData();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  187','line':'','coverage':'           : ',},
{'lineNum':'  188','line':'		/* Produce something like','coverage':'           : ',},
{'lineNum':'  189','line':'		 *','coverage':'           : ',},
{'lineNum':'  190','line':'		 *   /tmp/kcov/calc/metadata/4f332bca','coverage':'           : ',},
{'lineNum':'  191','line':'		 *   /tmp/kcov/calc/metadata/cd9932a1','coverage':'           : ',},
{'lineNum':'  192','line':'		 *','coverage':'           : ',},
{'lineNum':'  193','line':'		 * For all the files we\'ve covered. The output filename comes from a hash of','coverage':'           : ',},
{'lineNum':'  194','line':'		 * the input filename.','coverage':'           : ',},
{'lineNum':'  195','line':'		 */','coverage':'           : ',},
{'lineNum':'  196','line':'		for (const auto &it : m_files) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  197','line':'			// Only marshal local files','coverage':'           : ',},
{'lineNum':'  198','line':'			if (!it.second->m_local)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  199','line':'				continue;','coverage':'           : ',},
{'lineNum':'  200','line':'','coverage':'           : ',},
{'lineNum':'  201','line':'			const struct file_data *fd = marshalFile(it.second->m_filename);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  202','line':'			uint32_t crc = crc32((const void *)it.second->m_filename.c_str(), it.second->m_filename.size());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  203','line':'			std::string name = fmt("%08x", crc);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  204','line':'','coverage':'           : ',},
{'lineNum':'  205','line':'			write_file((const void *)fd, be_to_host<uint32_t>(fd->size), "%s/metadata/%s",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  206','line':'					m_outputDirectory.c_str(), name.c_str()','coverage':'           : ',},
{'lineNum':'  207','line':'					);','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  208','line':'','coverage':'           : ',},
{'lineNum':'  209','line':'			free((void *)fd);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  210','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  211','line':'	}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  212','line':'','coverage':'           : ',},
{'lineNum':'  213','line':'	void write()','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  214','line':'	{','coverage':'           : ',},
{'lineNum':'  215','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  216','line':'','coverage':'           : ',},
{'lineNum':'  217','line':'','coverage':'           : ',},
{'lineNum':'  218','line':'	// From ICollector','coverage':'           : ',},
{'lineNum':'  219','line':'	virtual void registerListener(ICollector::IListener &listener)','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'  220','line':'	{','coverage':'           : ',},
{'lineNum':'  221','line':'		m_collectorListeners.push_back(&listener);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  222','line':'	}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  223','line':'','coverage':'           : ',},
{'lineNum':'  224','line':'	virtual int run(const std::string &filename)','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  225','line':'	{','coverage':'           : ',},
{'lineNum':'  226','line':'		// Not used','coverage':'           : ',},
{'lineNum':'  227','line':'		panic("Should not call run here");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  228','line':'','coverage':'           : ',},
{'lineNum':'  229','line':'		return 0;','coverage':'           : ',},
{'lineNum':'  230','line':'	}','coverage':'           : ',},
{'lineNum':'  231','line':'','coverage':'           : ',},
{'lineNum':'  232','line':'','coverage':'           : ',},
{'lineNum':'  233','line':'private:','coverage':'           : ',},
{'lineNum':'  234','line':'	uint64_t hashAddress(const std::string &filename, unsigned int lineNr, uint64_t addr)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  235','line':'	{','coverage':'           : ',},
{'lineNum':'  236','line':'		// Convert address into a suitable format for the merge parser','coverage':'           : ',},
{'lineNum':'  237','line':'		uint64_t addrHash = crc32(filename.c_str(), filename.size()) ^ crc32(&lineNr, sizeof(lineNr));','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  238','line':'','coverage':'           : ',},
{'lineNum':'  239','line':'		return addrHash;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  240','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  241','line':'','coverage':'           : ',},
{'lineNum':'  242','line':'	uint64_t hashAddressUnique(const std::string &filename, unsigned int lineNr, uint64_t addr)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  243','line':'	{','coverage':'           : ',},
{'lineNum':'  244','line':'		auto addrHash = hashAddress(filename, lineNr, addr);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  245','line':'','coverage':'           : ',},
{'lineNum':'  246','line':'		// Find some unique position (if there are multiple addresses for this line)','coverage':'           : ',},
{'lineNum':'  247','line':'		while (m_addressByFileLine.find(addrHash) != m_addressByFileLine.end())','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  248','line':'			addrHash++;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  249','line':'','coverage':'           : ',},
{'lineNum':'  250','line':'		return addrHash;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  251','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  252','line':'','coverage':'           : ',},
{'lineNum':'  253','line':'	void parseStoredData()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  254','line':'	{','coverage':'           : ',},
{'lineNum':'  255','line':'		DIR *dir;','coverage':'           : ',},
{'lineNum':'  256','line':'		struct dirent *de;','coverage':'           : ',},
{'lineNum':'  257','line':'','coverage':'           : ',},
{'lineNum':'  258','line':'		dir = opendir(m_baseDirectory.c_str());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  259','line':'		panic_if(!dir,','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  260','line':'				"Can\'t open directory %s\\n", m_baseDirectory.c_str());','coverage':'           : ',},
{'lineNum':'  261','line':'','coverage':'           : ',},
{'lineNum':'  262','line':'		// Unmarshal and parse all metadata','coverage':'           : ',},
{'lineNum':'  263','line':'		for (de = readdir(dir); de; de = readdir(dir)) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  264','line':'			std::string cur = m_baseDirectory + de->d_name;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  265','line':'','coverage':'           : ',},
{'lineNum':'  266','line':'			// ... except for the current coveree','coverage':'           : ',},
{'lineNum':'  267','line':'			if (cur == m_outputDirectory)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  268','line':'				continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  269','line':'','coverage':'           : ',},
{'lineNum':'  270','line':'			parseDirectory(cur);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  271','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  272','line':'		closedir(dir);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  273','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  274','line':'','coverage':'           : ',},
{'lineNum':'  275','line':'	void parseDirectory(const std::string &dirName)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  276','line':'	{','coverage':'           : ',},
{'lineNum':'  277','line':'		DIR *dir;','coverage':'           : ',},
{'lineNum':'  278','line':'		struct dirent *de;','coverage':'           : ',},
{'lineNum':'  279','line':'		std::string metadataDirName = dirName + "/metadata";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  280','line':'','coverage':'           : ',},
{'lineNum':'  281','line':'		dir = opendir(metadataDirName.c_str());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  282','line':'		// Can occur naturally','coverage':'           : ',},
{'lineNum':'  283','line':'		if(!dir)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  284','line':'			return;','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  285','line':'','coverage':'           : ',},
{'lineNum':'  286','line':'		// Read all metadata from the directory','coverage':'           : ',},
{'lineNum':'  287','line':'		for (de = readdir(dir); de; de = readdir(dir))','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  288','line':'			parseOne(metadataDirName, de->d_name);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  289','line':'','coverage':'           : ',},
{'lineNum':'  290','line':'		closedir(dir);','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  291','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  292','line':'','coverage':'           : ',},
{'lineNum':'  293','line':'	void parseOne(const std::string &metadataDirName,','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  294','line':'			const std::string &curFile)','coverage':'           : ',},
{'lineNum':'  295','line':'	{','coverage':'           : ',},
{'lineNum':'  296','line':'		size_t size;','coverage':'           : ',},
{'lineNum':'  297','line':'','coverage':'           : ',},
{'lineNum':'  298','line':'		// Not as hash?','coverage':'           : ',},
{'lineNum':'  299','line':'		if (!string_is_integer(curFile, 16))','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  300','line':'			return;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  301','line':'','coverage':'           : ',},
{'lineNum':'  302','line':'		struct file_data *fd = (struct file_data *)read_file(&size, "%s/%s",','coverage':'           : ',},
{'lineNum':'  303','line':'				metadataDirName.c_str(), curFile.c_str());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  304','line':'		if (!fd)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  305','line':'			return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  306','line':'','coverage':'           : ',},
{'lineNum':'  307','line':'		if (size >= sizeof(struct file_data) &&','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  308','line':'				unMarshalFile(fd)) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  309','line':'			parseFileData(fd);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  310','line':'		}','coverage':'           : ',},
{'lineNum':'  311','line':'','coverage':'           : ',},
{'lineNum':'  312','line':'		free(fd);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  313','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  314','line':'','coverage':'           : ',},
{'lineNum':'  315','line':'	void parseFileData(struct file_data *fd)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  316','line':'	{','coverage':'           : ',},
{'lineNum':'  317','line':'		std::string filename((const char *)fd + fd->file_name_offset);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  318','line':'','coverage':'           : ',},
{'lineNum':'  319','line':'		// Do something','coverage':'           : ',},
{'lineNum':'  320','line':'','coverage':'           : ',},
{'lineNum':'  321','line':'		File *file;','coverage':'           : ',},
{'lineNum':'  322','line':'','coverage':'           : ',},
{'lineNum':'  323','line':'		file = m_files[filename];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  324','line':'		if (!file) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  325','line':'			file = new File(filename);','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  326','line':'','coverage':'           : ',},
{'lineNum':'  327','line':'			m_files[filename] = file;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  328','line':'		} else {','coverage':'           : ',},
{'lineNum':'  329','line':'			// Checksum doesn\'t match, ignore this file','coverage':'           : ',},
{'lineNum':'  330','line':'			if (file->m_local &&','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  331','line':'					(file->m_checksum != fd->checksum || file->m_fileTimestamp != fd->timestamp))','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  332','line':'				return;','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  333','line':'		}','coverage':'           : ',},
{'lineNum':'  334','line':'','coverage':'           : ',},
{'lineNum':'  335','line':'		uint64_t *addrTable = (uint64_t *)((char *)fd + fd->address_table_offset);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  336','line':'		for (unsigned i = 0; i < fd->n_entries; i++) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  337','line':'			uint32_t lineNr = fd->entries[i].line;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  338','line':'','coverage':'           : ',},
{'lineNum':'  339','line':'			for (unsigned ia = 0; ia < fd->entries[i].n_addresses; ia++) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  340','line':'				uint64_t addr = addrTable[fd->entries[i].address_start + ia];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  341','line':'','coverage':'           : ',},
{'lineNum':'  342','line':'				// Check if this was a hit (and remove the hit bit from the address)','coverage':'           : ',},
{'lineNum':'  343','line':'				bool hit = (addr & (1ULL << 63));','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  344','line':'				addr &= ~(1ULL << 63);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  345','line':'','coverage':'           : ',},
{'lineNum':'  346','line':'				file->addLine(lineNr, addr);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  347','line':'','coverage':'           : ',},
{'lineNum':'  348','line':'				for (const auto &it : m_lineListeners)','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  349','line':'						it->onLine(filename, lineNr, addr & ~(1ULL << 63));','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  350','line':'','coverage':'           : ',},
{'lineNum':'  351','line':'				// Register and report the hit','coverage':'           : ',},
{'lineNum':'  352','line':'				if (hit) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  353','line':'					file->registerHits(lineNr, 1);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  354','line':'','coverage':'           : ',},
{'lineNum':'  355','line':'					for (const auto &itC : m_collectorListeners)','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  356','line':'						itC->onAddress(addr, 1);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  357','line':'				}','coverage':'           : ',},
{'lineNum':'  358','line':'			}','coverage':'           : ',},
{'lineNum':'  359','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  360','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  361','line':'','coverage':'           : ',},
{'lineNum':'  362','line':'	const struct file_data *marshalFile(const std::string &filename)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  363','line':'	{','coverage':'           : ',},
{'lineNum':'  364','line':'		File *file = m_files[filename];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  365','line':'','coverage':'           : ',},
{'lineNum':'  366','line':'		if (!file)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  367','line':'			return nullptr;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  368','line':'','coverage':'           : ',},
{'lineNum':'  369','line':'		uint32_t n_addrs = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  370','line':'		for (auto it = file->m_lines.begin();','class':'lineCov','coverage':'  3 /   3  : ',},
{'lineNum':'  371','line':'				it != file->m_lines.end();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  372','line':'				++it) {','coverage':'           : ',},
{'lineNum':'  373','line':'			n_addrs += it->second.size();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  374','line':'		}','coverage':'           : ',},
{'lineNum':'  375','line':'','coverage':'           : ',},
{'lineNum':'  376','line':'		// Header + each line + the filename','coverage':'           : ',},
{'lineNum':'  377','line':'		size_t size = sizeof(struct file_data) +','coverage':'           : ',},
{'lineNum':'  378','line':'				file->m_lines.size() * sizeof(struct line_entry) +','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  379','line':'				n_addrs * sizeof(uint64_t) +','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  380','line':'				file->m_filename.size() + 1;','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  381','line':'		struct file_data *out = (struct file_data *)xmalloc(size);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  382','line':'','coverage':'           : ',},
{'lineNum':'  383','line':'		out->magic = to_be<uint32_t>(MERGE_MAGIC);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  384','line':'		out->version = to_be<uint32_t>(MERGE_VERSION);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  385','line':'		out->checksum = to_be<uint32_t>(file->m_checksum);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  386','line':'		out->timestamp = to_be<uint64_t>(file->m_fileTimestamp);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  387','line':'		out->size = to_be<uint32_t>(size);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  388','line':'		out->n_entries = to_be<uint32_t>(file->m_lines.size());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  389','line':'','coverage':'           : ',},
{'lineNum':'  390','line':'		struct line_entry *p = out->entries;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  391','line':'','coverage':'           : ',},
{'lineNum':'  392','line':'		// Point to address table','coverage':'           : ',},
{'lineNum':'  393','line':'		uint64_t *addrTable = (uint64_t *)((char *)p + sizeof(struct line_entry) * file->m_lines.size());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  394','line':'		uint32_t tableOffset = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  395','line':'','coverage':'           : ',},
{'lineNum':'  396','line':'		for (auto it = file->m_lines.begin();','class':'lineCov','coverage':'  3 /   3  : ',},
{'lineNum':'  397','line':'				it != file->m_lines.end();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  398','line':'				++it) {','coverage':'           : ',},
{'lineNum':'  399','line':'			uint32_t line = it->first;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  400','line':'			p->line = to_be<uint32_t>(line);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  401','line':'','coverage':'           : ',},
{'lineNum':'  402','line':'			p->address_start = to_be<uint32_t>(tableOffset);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  403','line':'			p->n_addresses = to_be<uint32_t>(it->second.size());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  404','line':'			for (const auto &itAddr : it->second) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  405','line':'				uint64_t addr = itAddr.first;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  406','line':'','coverage':'           : ',},
{'lineNum':'  407','line':'				if (file->m_addrHits[addr])','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  408','line':'					addr |= (1ULL << 63);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  409','line':'','coverage':'           : ',},
{'lineNum':'  410','line':'				addrTable[tableOffset] = to_be<uint64_t>(addr);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  411','line':'','coverage':'           : ',},
{'lineNum':'  412','line':'				tableOffset++;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  413','line':'			}','coverage':'           : ',},
{'lineNum':'  414','line':'','coverage':'           : ',},
{'lineNum':'  415','line':'			p++;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  416','line':'		}','coverage':'           : ',},
{'lineNum':'  417','line':'','coverage':'           : ',},
{'lineNum':'  418','line':'		uint32_t tableStart = (uint32_t)((char *)addrTable - (char *)out);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  419','line':'		out->address_table_offset = to_be<uint32_t>(tableStart);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  420','line':'		char *p_name = (char *)out + tableStart + tableOffset * sizeof(uint64_t);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  421','line':'','coverage':'           : ',},
{'lineNum':'  422','line':'		// Allocated with the terminator above','coverage':'           : ',},
{'lineNum':'  423','line':'		strcpy(p_name, file->m_filename.c_str());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  424','line':'		out->file_name_offset = to_be<uint32_t>(p_name - (char *)out);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  425','line':'','coverage':'           : ',},
{'lineNum':'  426','line':'		return out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  427','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  428','line':'','coverage':'           : ',},
{'lineNum':'  429','line':'	bool unMarshalFile(struct file_data *fd)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  430','line':'	{','coverage':'           : ',},
{'lineNum':'  431','line':'		fd->magic = be_to_host<uint32_t>(fd->magic);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  432','line':'		fd->version = be_to_host<uint32_t>(fd->version);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  433','line':'		fd->checksum = be_to_host<uint32_t>(fd->checksum);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  434','line':'		fd->timestamp = be_to_host<uint64_t>(fd->timestamp);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  435','line':'		fd->size = be_to_host<uint32_t>(fd->size);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  436','line':'		fd->n_entries = be_to_host<uint32_t>(fd->n_entries);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  437','line':'		fd->file_name_offset = be_to_host<uint32_t>(fd->file_name_offset);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  438','line':'		fd->address_table_offset = be_to_host<uint32_t>(fd->address_table_offset);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  439','line':'','coverage':'           : ',},
{'lineNum':'  440','line':'		if (fd->magic != MERGE_MAGIC)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  441','line':'			return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  442','line':'','coverage':'           : ',},
{'lineNum':'  443','line':'		if (fd->version != MERGE_VERSION)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  444','line':'			return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  445','line':'','coverage':'           : ',},
{'lineNum':'  446','line':'		struct line_entry *p = fd->entries;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  447','line':'','coverage':'           : ',},
{'lineNum':'  448','line':'		// Unmarshal entries...','coverage':'           : ',},
{'lineNum':'  449','line':'		for (unsigned i = 0; i < fd->n_entries; i++) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  450','line':'			p->line = be_to_host<uint32_t>(p->line);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  451','line':'			p->n_addresses = be_to_host<uint32_t>(p->n_addresses);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  452','line':'			p->address_start = be_to_host<uint32_t>(p->address_start);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  453','line':'','coverage':'           : ',},
{'lineNum':'  454','line':'			p++;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  455','line':'		}','coverage':'           : ',},
{'lineNum':'  456','line':'','coverage':'           : ',},
{'lineNum':'  457','line':'		// ... and the address table','coverage':'           : ',},
{'lineNum':'  458','line':'		uint64_t *addressTable = (uint64_t *)((char *)fd + fd->address_table_offset);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  459','line':'		for (unsigned i = 0;','class':'lineCov','coverage':'  3 /   3  : ',},
{'lineNum':'  460','line':'				i < (fd->file_name_offset - fd->address_table_offset) / sizeof(uint64_t);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  461','line':'				i++)','coverage':'           : ',},
{'lineNum':'  462','line':'			addressTable[i] = be_to_host<uint64_t>(addressTable[i]);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  463','line':'','coverage':'           : ',},
{'lineNum':'  464','line':'		return true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  465','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  466','line':'','coverage':'           : ',},
{'lineNum':'  467','line':'	typedef std::map<unsigned long, unsigned int> AddrMap_t;','coverage':'           : ',},
{'lineNum':'  468','line':'	typedef std::map<unsigned int, AddrMap_t> LineAddrMap_t;','coverage':'           : ',},
{'lineNum':'  469','line':'','coverage':'           : ',},
{'lineNum':'  470','line':'	class File','coverage':'           : ',},
{'lineNum':'  471','line':'	{','coverage':'           : ',},
{'lineNum':'  472','line':'	public:','coverage':'           : ',},
{'lineNum':'  473','line':'		File(const std::string &filename) :','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  474','line':'			m_filename(filename),','coverage':'           : ',},
{'lineNum':'  475','line':'			m_local(false)','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  476','line':'		{','coverage':'           : ',},
{'lineNum':'  477','line':'			void *data;','coverage':'           : ',},
{'lineNum':'  478','line':'			size_t size;','coverage':'           : ',},
{'lineNum':'  479','line':'','coverage':'           : ',},
{'lineNum':'  480','line':'			data = read_file(&size, "%s", filename.c_str());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  481','line':'			panic_if(!data,','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  482','line':'					"File %s exists, but can\'t be read???", filename.c_str());','coverage':'           : ',},
{'lineNum':'  483','line':'			m_checksum = crc32(data, size);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  484','line':'			m_fileTimestamp = get_file_timestamp(filename.c_str());','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  485','line':'','coverage':'           : ',},
{'lineNum':'  486','line':'			free((void *)data);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  487','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  488','line':'','coverage':'           : ',},
{'lineNum':'  489','line':'		void setLocal()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  490','line':'		{','coverage':'           : ',},
{'lineNum':'  491','line':'			m_local = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  492','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  493','line':'','coverage':'           : ',},
{'lineNum':'  494','line':'		void addLine(unsigned int lineNr, uint64_t addr)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  495','line':'		{','coverage':'           : ',},
{'lineNum':'  496','line':'			m_lines[lineNr][addr]++;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  497','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  498','line':'','coverage':'           : ',},
{'lineNum':'  499','line':'		void registerHits(uint64_t addr, unsigned int hits)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  500','line':'		{','coverage':'           : ',},
{'lineNum':'  501','line':'			m_addrHits[addr] += hits;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  502','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  503','line':'','coverage':'           : ',},
{'lineNum':'  504','line':'		std::string m_filename;','coverage':'           : ',},
{'lineNum':'  505','line':'		uint64_t m_fileTimestamp;','coverage':'           : ',},
{'lineNum':'  506','line':'		LineAddrMap_t m_lines;','coverage':'           : ',},
{'lineNum':'  507','line':'		AddrMap_t m_addrHits;','coverage':'           : ',},
{'lineNum':'  508','line':'		uint32_t m_checksum;','coverage':'           : ',},
{'lineNum':'  509','line':'		bool m_local;','coverage':'           : ',},
{'lineNum':'  510','line':'	};','coverage':'           : ',},
{'lineNum':'  511','line':'','coverage':'           : ',},
{'lineNum':'  512','line':'	// All files in the current coverage session','coverage':'           : ',},
{'lineNum':'  513','line':'	std::unordered_map<std::string, File *> m_files;','coverage':'           : ',},
{'lineNum':'  514','line':'	std::unordered_map<unsigned long, File *> m_filesByAddress;','coverage':'           : ',},
{'lineNum':'  515','line':'	std::unordered_map<unsigned long, uint64_t> m_fileLineByAddress;','coverage':'           : ',},
{'lineNum':'  516','line':'	std::unordered_map<uint64_t, unsigned long> m_addressByFileLine;','coverage':'           : ',},
{'lineNum':'  517','line':'','coverage':'           : ',},
{'lineNum':'  518','line':'	std::vector<IFileParser::ILineListener *> m_lineListeners;','coverage':'           : ',},
{'lineNum':'  519','line':'	const std::string m_baseDirectory;','coverage':'           : ',},
{'lineNum':'  520','line':'	const std::string m_outputDirectory;','coverage':'           : ',},
{'lineNum':'  521','line':'','coverage':'           : ',},
{'lineNum':'  522','line':'	std::vector<ICollector::IListener *> m_collectorListeners;','coverage':'           : ',},
{'lineNum':'  523','line':'	IFilter &m_filter;','coverage':'           : ',},
{'lineNum':'  524','line':'};','coverage':'           : ',},
{'lineNum':'  525','line':'','coverage':'           : ',},
{'lineNum':'  526','line':'namespace kcov','coverage':'           : ',},
{'lineNum':'  527','line':'{','coverage':'           : ',},
{'lineNum':'  528','line':'	IMergeParser &createMergeParser(IFileParser &localParser,','coverage':'           : ',},
{'lineNum':'  529','line':'			const std::string &baseDirectory,','coverage':'           : ',},
{'lineNum':'  530','line':'			const std::string &outputDirectory,','coverage':'           : ',},
{'lineNum':'  531','line':'			IFilter &filter)','coverage':'           : ',},
{'lineNum':'  532','line':'	{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  533','line':'		return *new MergeParser(localParser, baseDirectory, outputDirectory, filter);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  534','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  535','line':'}','coverage':'           : ',},
];
var merged_data = [];
