var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 29, 'covered' : 17,};
var data = [
{'lineNum':'    1','line':'#include <file-parser.hh>','coverage':'           : ',},
{'lineNum':'    2','line':'#include <utils.hh>','coverage':'           : ',},
{'lineNum':'    3','line':'','coverage':'           : ',},
{'lineNum':'    4','line':'#include <list>','coverage':'           : ',},
{'lineNum':'    5','line':'','coverage':'           : ',},
{'lineNum':'    6','line':'using namespace kcov;','coverage':'           : ',},
{'lineNum':'    7','line':'','coverage':'           : ',},
{'lineNum':'    8','line':'class ParserManager : public IParserManager','class':'lineNoCov','coverage':'  0 /   5  : ',},
{'lineNum':'    9','line':'{','coverage':'           : ',},
{'lineNum':'   10','line':'public:','coverage':'           : ',},
{'lineNum':'   11','line':'	ParserManager()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   12','line':'	{','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   13','line':'	}','class':'linePartCov','coverage':'  2 /   3  : ',},
{'lineNum':'   14','line':'','coverage':'           : ',},
{'lineNum':'   15','line':'	void registerParser(IFileParser &parser)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   16','line':'	{','coverage':'           : ',},
{'lineNum':'   17','line':'		m_parsers.push_back(&parser);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   19','line':'','coverage':'           : ',},
{'lineNum':'   20','line':'	IFileParser *matchParser(const std::string &fileName)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   21','line':'	{','coverage':'           : ',},
{'lineNum':'   22','line':'		IFileParser *best = NULL;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   23','line':'		size_t sz;','coverage':'           : ',},
{'lineNum':'   24','line':'','coverage':'           : ',},
{'lineNum':'   25','line':'		uint8_t *data = (uint8_t *)read_file(&sz, "%s", fileName.c_str());','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   26','line':'','coverage':'           : ',},
{'lineNum':'   27','line':'		if (!data)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   28','line':'			return NULL;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   29','line':'','coverage':'           : ',},
{'lineNum':'   30','line':'		for (const auto &it : m_parsers) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   31','line':'			unsigned int myVal = it->matchParser(fileName, data, sz);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   32','line':'			if (myVal == match_none)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   33','line':'				continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   34','line':'','coverage':'           : ',},
{'lineNum':'   35','line':'			if (!best)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   36','line':'				best = it;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   37','line':'','coverage':'           : ',},
{'lineNum':'   38','line':'			unsigned int bestVal = best->matchParser(fileName, data, sz);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   39','line':'','coverage':'           : ',},
{'lineNum':'   40','line':'			if (myVal > bestVal)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   41','line':'				best = it;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   42','line':'		}','coverage':'           : ',},
{'lineNum':'   43','line':'','coverage':'           : ',},
{'lineNum':'   44','line':'		free((void *)data);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   45','line':'','coverage':'           : ',},
{'lineNum':'   46','line':'		return best;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   47','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   48','line':'','coverage':'           : ',},
{'lineNum':'   49','line':'private:','coverage':'           : ',},
{'lineNum':'   50','line':'	typedef std::list<IFileParser *> ParserList_t;','coverage':'           : ',},
{'lineNum':'   51','line':'','coverage':'           : ',},
{'lineNum':'   52','line':'	ParserList_t m_parsers;','coverage':'           : ',},
{'lineNum':'   53','line':'};','coverage':'           : ',},
{'lineNum':'   54','line':'','coverage':'           : ',},
{'lineNum':'   55','line':'','coverage':'           : ',},
{'lineNum':'   56','line':'static ParserManager *g_instance;','coverage':'           : ',},
{'lineNum':'   57','line':'IParserManager &IParserManager::getInstance()','coverage':'           : ',},
{'lineNum':'   58','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   59','line':'	if (!g_instance)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   60','line':'		g_instance = new ParserManager();','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   61','line':'','coverage':'           : ',},
{'lineNum':'   62','line':'	return *g_instance;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   63','line':'}','class':'linePartCov','coverage':'  1 /   2  : ',},
];
var merged_data = [];
