var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 89, 'covered' : 67,};
var data = [
{'lineNum':'    1','line':'#include <filter.hh>','coverage':'           : ',},
{'lineNum':'    2','line':'#include <configuration.hh>','coverage':'           : ',},
{'lineNum':'    3','line':'','coverage':'           : ',},
{'lineNum':'    4','line':'#include <limits.h>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <stdlib.h>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <string>','coverage':'           : ',},
{'lineNum':'    7','line':'','coverage':'           : ',},
{'lineNum':'    8','line':'using namespace kcov;','coverage':'           : ',},
{'lineNum':'    9','line':'','coverage':'           : ',},
{'lineNum':'   10','line':'class DummyFilter : public IFilter','coverage':'           : ',},
{'lineNum':'   11','line':'{','coverage':'           : ',},
{'lineNum':'   12','line':'public:','coverage':'           : ',},
{'lineNum':'   13','line':'	DummyFilter()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   14','line':'	{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   15','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   16','line':'','coverage':'           : ',},
{'lineNum':'   17','line':'	~DummyFilter()','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   18','line':'	{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   19','line':'	}','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   20','line':'','coverage':'           : ',},
{'lineNum':'   21','line':'	// Allow anything','coverage':'           : ',},
{'lineNum':'   22','line':'	bool runFilters(const std::string &file)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   23','line':'	{','coverage':'           : ',},
{'lineNum':'   24','line':'		return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   25','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   26','line':'};','coverage':'           : ',},
{'lineNum':'   27','line':'','coverage':'           : ',},
{'lineNum':'   28','line':'class Filter : public IFilter','coverage':'           : ',},
{'lineNum':'   29','line':'{','coverage':'           : ',},
{'lineNum':'   30','line':'public:','coverage':'           : ',},
{'lineNum':'   31','line':'	Filter()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   32','line':'	{','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   33','line':'		m_patternHandler = new PatternHandler();','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   34','line':'		m_pathHandler = new PathHandler();','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   35','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   36','line':'','coverage':'           : ',},
{'lineNum':'   37','line':'	~Filter()','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   38','line':'	{','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   39','line':'		delete m_patternHandler;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   40','line':'		delete m_pathHandler;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   41','line':'	}','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   42','line':'','coverage':'           : ',},
{'lineNum':'   43','line':'	// Used by the unit test','coverage':'           : ',},
{'lineNum':'   44','line':'	void setup()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   45','line':'	{','coverage':'           : ',},
{'lineNum':'   46','line':'		delete m_patternHandler;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   47','line':'		delete m_pathHandler;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   48','line':'		m_patternHandler = new PatternHandler();','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   49','line':'		m_pathHandler = new PathHandler();','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   50','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   51','line':'','coverage':'           : ',},
{'lineNum':'   52','line':'	bool runFilters(const std::string &file)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   53','line':'	{','coverage':'           : ',},
{'lineNum':'   54','line':'		if (m_pathHandler->isSetup())','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   55','line':'			return m_pathHandler->includeFile(file);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   56','line':'','coverage':'           : ',},
{'lineNum':'   57','line':'		if (m_patternHandler->isSetup())','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   58','line':'			return m_patternHandler->includeFile(file);','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   59','line':'','coverage':'           : ',},
{'lineNum':'   60','line':'		return true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   61','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   62','line':'','coverage':'           : ',},
{'lineNum':'   63','line':'','coverage':'           : ',},
{'lineNum':'   64','line':'private:','coverage':'           : ',},
{'lineNum':'   65','line':'	class PatternHandler','coverage':'           : ',},
{'lineNum':'   66','line':'	{','coverage':'           : ',},
{'lineNum':'   67','line':'	public:','coverage':'           : ',},
{'lineNum':'   68','line':'		PatternHandler() :','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   69','line':'			m_includePatterns(IConfiguration::getInstance().getOnlyIncludePattern()),','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   70','line':'			m_excludePatterns(IConfiguration::getInstance().getExcludePattern())','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   71','line':'		{','coverage':'           : ',},
{'lineNum':'   72','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   73','line':'','coverage':'           : ',},
{'lineNum':'   74','line':'		bool isSetup()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   75','line':'		{','coverage':'           : ',},
{'lineNum':'   76','line':'			return !(m_includePatterns.size() == 0 && m_excludePatterns.size() == 0);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   77','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   78','line':'','coverage':'           : ',},
{'lineNum':'   79','line':'		bool includeFile(std::string file)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   80','line':'		{','coverage':'           : ',},
{'lineNum':'   81','line':'			if (m_includePatterns.size() == 0 && m_excludePatterns.size() == 0)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   82','line':'				return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   83','line':'','coverage':'           : ',},
{'lineNum':'   84','line':'			bool out = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   85','line':'','coverage':'           : ',},
{'lineNum':'   86','line':'			if (m_includePatterns.size() != 0)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   87','line':'				out = false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   88','line':'','coverage':'           : ',},
{'lineNum':'   89','line':'			for (const auto &it : m_includePatterns) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'   90','line':'				const auto &pattern = it.second;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   91','line':'','coverage':'           : ',},
{'lineNum':'   92','line':'				if (file.find(pattern) != std::string::npos)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   93','line':'					out = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   94','line':'			}','coverage':'           : ',},
{'lineNum':'   95','line':'','coverage':'           : ',},
{'lineNum':'   96','line':'			for (const auto &it : m_excludePatterns) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'   97','line':'				const auto &pattern = it.second;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   98','line':'','coverage':'           : ',},
{'lineNum':'   99','line':'				if (file.find(pattern) != std::string::npos)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  100','line':'					out = false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  101','line':'			}','coverage':'           : ',},
{'lineNum':'  102','line':'','coverage':'           : ',},
{'lineNum':'  103','line':'			return out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  104','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  105','line':'	private:','coverage':'           : ',},
{'lineNum':'  106','line':'		std::map<unsigned int, std::string> &m_includePatterns;','coverage':'           : ',},
{'lineNum':'  107','line':'		std::map<unsigned int, std::string> &m_excludePatterns;','coverage':'           : ',},
{'lineNum':'  108','line':'	};','coverage':'           : ',},
{'lineNum':'  109','line':'','coverage':'           : ',},
{'lineNum':'  110','line':'','coverage':'           : ',},
{'lineNum':'  111','line':'	class PathHandler','coverage':'           : ',},
{'lineNum':'  112','line':'	{','coverage':'           : ',},
{'lineNum':'  113','line':'	public:','coverage':'           : ',},
{'lineNum':'  114','line':'		PathHandler() :','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  115','line':'			m_includePaths(IConfiguration::getInstance().getOnlyIncludePath()),','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  116','line':'			m_excludePaths(IConfiguration::getInstance().getExcludePath())','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  117','line':'		{','coverage':'           : ',},
{'lineNum':'  118','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  119','line':'','coverage':'           : ',},
{'lineNum':'  120','line':'		bool isSetup()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  121','line':'		{','coverage':'           : ',},
{'lineNum':'  122','line':'			return !(m_includePaths.size() == 0 && m_excludePaths.size() == 0);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  123','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  124','line':'','coverage':'           : ',},
{'lineNum':'  125','line':'		bool includeFile(const std::string &file)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  126','line':'		{','coverage':'           : ',},
{'lineNum':'  127','line':'			if (m_includePaths.size() == 0 && m_excludePaths.size() == 0)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  128','line':'				return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  129','line':'','coverage':'           : ',},
{'lineNum':'  130','line':'			bool out = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  131','line':'','coverage':'           : ',},
{'lineNum':'  132','line':'			if (m_includePaths.size() != 0)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  133','line':'				out = false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  134','line':'','coverage':'           : ',},
{'lineNum':'  135','line':'			char *path = realpath(file.c_str(), nullptr);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  136','line':'			// Can\'t show something which doesn\'t exist, so filter it out','coverage':'           : ',},
{'lineNum':'  137','line':'			if (!path)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  138','line':'				return false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  139','line':'			std::string pathStr(path);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  140','line':'			free(path);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  141','line':'','coverage':'           : ',},
{'lineNum':'  142','line':'			for (const auto &it : m_includePaths) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  143','line':'				const auto &pathPattern = it.second;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  144','line':'','coverage':'           : ',},
{'lineNum':'  145','line':'				if (pathStr.find(pathPattern) == 0)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  146','line':'					out = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  147','line':'			}','coverage':'           : ',},
{'lineNum':'  148','line':'','coverage':'           : ',},
{'lineNum':'  149','line':'			for (const auto &it : m_excludePaths) {','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  150','line':'				const auto &pathPattern = it.second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  151','line':'','coverage':'           : ',},
{'lineNum':'  152','line':'				if (pathStr.find(pathPattern) == 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  153','line':'					out = false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  154','line':'			}','coverage':'           : ',},
{'lineNum':'  155','line':'','coverage':'           : ',},
{'lineNum':'  156','line':'			return out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  157','line':'		}','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  158','line':'	private:','coverage':'           : ',},
{'lineNum':'  159','line':'		std::map<unsigned int, std::string> &m_includePaths;','coverage':'           : ',},
{'lineNum':'  160','line':'		std::map<unsigned int, std::string> &m_excludePaths;','coverage':'           : ',},
{'lineNum':'  161','line':'	};','coverage':'           : ',},
{'lineNum':'  162','line':'','coverage':'           : ',},
{'lineNum':'  163','line':'','coverage':'           : ',},
{'lineNum':'  164','line':'	PatternHandler *m_patternHandler;','coverage':'           : ',},
{'lineNum':'  165','line':'	PathHandler *m_pathHandler;','coverage':'           : ',},
{'lineNum':'  166','line':'};','coverage':'           : ',},
{'lineNum':'  167','line':'','coverage':'           : ',},
{'lineNum':'  168','line':'','coverage':'           : ',},
{'lineNum':'  169','line':'IFilter &IFilter::create()','coverage':'           : ',},
{'lineNum':'  170','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  171','line':'	return *new Filter();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  172','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  173','line':'','coverage':'           : ',},
{'lineNum':'  174','line':'IFilter &IFilter::createDummy()','coverage':'           : ',},
{'lineNum':'  175','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  176','line':'	return *new DummyFilter();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  177','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
];
var merged_data = [];
