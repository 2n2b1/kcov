var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 1, 'covered' : 0,};
var data = [
{'lineNum':'    1','line':'#pragma once','coverage':'           : ',},
{'lineNum':'    2','line':'','coverage':'           : ',},
{'lineNum':'    3','line':'#include <writer.hh>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <reporter.hh>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <file-parser.hh>','coverage':'           : ',},
{'lineNum':'    6','line':'','coverage':'           : ',},
{'lineNum':'    7','line':'#include <string>','coverage':'           : ',},
{'lineNum':'    8','line':'#include <unordered_map>','coverage':'           : ',},
{'lineNum':'    9','line':'','coverage':'           : ',},
{'lineNum':'   10','line':'namespace kcov','coverage':'           : ',},
{'lineNum':'   11','line':'{','coverage':'           : ',},
{'lineNum':'   12','line':'	class IFileParser;','coverage':'           : ',},
{'lineNum':'   13','line':'	class IReporter;','coverage':'           : ',},
{'lineNum':'   14','line':'','coverage':'           : ',},
{'lineNum':'   15','line':'	class WriterBase : public IFileParser::ILineListener, public IWriter','class':'lineNoCov','coverage':'  0 /  24  : ',},
{'lineNum':'   16','line':'	{','coverage':'           : ',},
{'lineNum':'   17','line':'	protected:','coverage':'           : ',},
{'lineNum':'   18','line':'		WriterBase(IFileParser &elf, IReporter &reporter);','coverage':'           : ',},
{'lineNum':'   19','line':'','coverage':'           : ',},
{'lineNum':'   20','line':'		class File','coverage':'           : ',},
{'lineNum':'   21','line':'		{','coverage':'           : ',},
{'lineNum':'   22','line':'		public:','coverage':'           : ',},
{'lineNum':'   23','line':'			typedef std::unordered_map<unsigned int, std::string> LineMap_t;','coverage':'           : ',},
{'lineNum':'   24','line':'','coverage':'           : ',},
{'lineNum':'   25','line':'			File(const std::string &filename);','coverage':'           : ',},
{'lineNum':'   26','line':'','coverage':'           : ',},
{'lineNum':'   27','line':'			std::string m_name;','coverage':'           : ',},
{'lineNum':'   28','line':'			std::string m_fileName;','coverage':'           : ',},
{'lineNum':'   29','line':'			std::string m_outFileName;','coverage':'           : ',},
{'lineNum':'   30','line':'			std::string m_jsonOutFileName;','coverage':'           : ',},
{'lineNum':'   31','line':'			LineMap_t m_lineMap;','coverage':'           : ',},
{'lineNum':'   32','line':'			unsigned int m_codeLines;','coverage':'           : ',},
{'lineNum':'   33','line':'			unsigned int m_executedLines;','coverage':'           : ',},
{'lineNum':'   34','line':'			unsigned int m_lastLineNr;','coverage':'           : ',},
{'lineNum':'   35','line':'','coverage':'           : ',},
{'lineNum':'   36','line':'			static int fileNameCount;','coverage':'           : ',},
{'lineNum':'   37','line':'','coverage':'           : ',},
{'lineNum':'   38','line':'		private:','coverage':'           : ',},
{'lineNum':'   39','line':'			void readFile(const std::string &filename);','coverage':'           : ',},
{'lineNum':'   40','line':'		};','coverage':'           : ',},
{'lineNum':'   41','line':'','coverage':'           : ',},
{'lineNum':'   42','line':'		typedef std::unordered_map<std::string, File *> FileMap_t;','coverage':'           : ',},
{'lineNum':'   43','line':'','coverage':'           : ',},
{'lineNum':'   44','line':'','coverage':'           : ',},
{'lineNum':'   45','line':'		/* Called when the ELF is parsed */','coverage':'           : ',},
{'lineNum':'   46','line':'		void onLine(const std::string &file, unsigned int lineNr, unsigned long addr);','coverage':'           : ',},
{'lineNum':'   47','line':'','coverage':'           : ',},
{'lineNum':'   48','line':'','coverage':'           : ',},
{'lineNum':'   49','line':'		void *marshalSummary(IReporter::ExecutionSummary &summary,','coverage':'           : ',},
{'lineNum':'   50','line':'				const std::string &name, size_t *sz);','coverage':'           : ',},
{'lineNum':'   51','line':'','coverage':'           : ',},
{'lineNum':'   52','line':'		bool unMarshalSummary(void *data, size_t sz,','coverage':'           : ',},
{'lineNum':'   53','line':'				IReporter::ExecutionSummary &summary,','coverage':'           : ',},
{'lineNum':'   54','line':'				std::string &name);','coverage':'           : ',},
{'lineNum':'   55','line':'','coverage':'           : ',},
{'lineNum':'   56','line':'		void setupCommonPaths();','coverage':'           : ',},
{'lineNum':'   57','line':'','coverage':'           : ',},
{'lineNum':'   58','line':'		IFileParser &m_fileParser;','coverage':'           : ',},
{'lineNum':'   59','line':'		IReporter &m_reporter;','coverage':'           : ',},
{'lineNum':'   60','line':'		FileMap_t m_files;','coverage':'           : ',},
{'lineNum':'   61','line':'		std::string m_commonPath;','coverage':'           : ',},
{'lineNum':'   62','line':'	};','coverage':'           : ',},
{'lineNum':'   63','line':'}','coverage':'           : ',},
];
var merged_data = [];
