var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 2, 'covered' : 1,};
var data = [
{'lineNum':'    1','line':'#pragma once','coverage':'           : ',},
{'lineNum':'    2','line':'','coverage':'           : ',},
{'lineNum':'    3','line':'#include <string>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <list>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <map>','coverage':'           : ',},
{'lineNum':'    6','line':'','coverage':'           : ',},
{'lineNum':'    7','line':'namespace kcov','coverage':'           : ',},
{'lineNum':'    8','line':'{','coverage':'           : ',},
{'lineNum':'    9','line':'	class IConfiguration','class':'linePartCov','coverage':'  2 /   3  : ',},
{'lineNum':'   10','line':'	{','coverage':'           : ',},
{'lineNum':'   11','line':'	public:','coverage':'           : ',},
{'lineNum':'   12','line':'		enum OutputType','coverage':'           : ',},
{'lineNum':'   13','line':'		{','coverage':'           : ',},
{'lineNum':'   14','line':'			OUTPUT_COVERAGE,','coverage':'           : ',},
{'lineNum':'   15','line':'			OUTPUT_PROFILER','coverage':'           : ',},
{'lineNum':'   16','line':'		};','coverage':'           : ',},
{'lineNum':'   17','line':'','coverage':'           : ',},
{'lineNum':'   18','line':'		typedef enum','coverage':'           : ',},
{'lineNum':'   19','line':'		{','coverage':'           : ',},
{'lineNum':'   20','line':'			MODE_COLLECT_ONLY       = 1,','coverage':'           : ',},
{'lineNum':'   21','line':'			MODE_REPORT_ONLY        = 2,','coverage':'           : ',},
{'lineNum':'   22','line':'			MODE_COLLECT_AND_REPORT = 3,','coverage':'           : ',},
{'lineNum':'   23','line':'		} RunMode_t;','coverage':'           : ',},
{'lineNum':'   24','line':'','coverage':'           : ',},
{'lineNum':'   25','line':'		virtual ~IConfiguration() {}','class':'lineNoCov','coverage':'  0 /   5  : ',},
{'lineNum':'   26','line':'','coverage':'           : ',},
{'lineNum':'   27','line':'		virtual void printUsage() = 0;','coverage':'           : ',},
{'lineNum':'   28','line':'','coverage':'           : ',},
{'lineNum':'   29','line':'		virtual const std::string &getOutDirectory() = 0;','coverage':'           : ',},
{'lineNum':'   30','line':'','coverage':'           : ',},
{'lineNum':'   31','line':'		virtual const std::string &getBinaryName() = 0;','coverage':'           : ',},
{'lineNum':'   32','line':'','coverage':'           : ',},
{'lineNum':'   33','line':'		virtual const std::string &getBinaryPath() = 0;','coverage':'           : ',},
{'lineNum':'   34','line':'','coverage':'           : ',},
{'lineNum':'   35','line':'		virtual const std::string &getKernelCoveragePath() = 0;','coverage':'           : ',},
{'lineNum':'   36','line':'','coverage':'           : ',},
{'lineNum':'   37','line':'		virtual const std::string &getPythonCommand() const = 0;','coverage':'           : ',},
{'lineNum':'   38','line':'','coverage':'           : ',},
{'lineNum':'   39','line':'		virtual std::list<uint64_t> getFixedBreakpoints() = 0;','coverage':'           : ',},
{'lineNum':'   40','line':'','coverage':'           : ',},
{'lineNum':'   41','line':'		virtual unsigned int getAttachPid() = 0;','coverage':'           : ',},
{'lineNum':'   42','line':'','coverage':'           : ',},
{'lineNum':'   43','line':'		virtual unsigned int getLowLimit() = 0;','coverage':'           : ',},
{'lineNum':'   44','line':'','coverage':'           : ',},
{'lineNum':'   45','line':'		virtual unsigned int getHighLimit() = 0;','coverage':'           : ',},
{'lineNum':'   46','line':'','coverage':'           : ',},
{'lineNum':'   47','line':'		virtual unsigned int getPathStripLevel() = 0;','coverage':'           : ',},
{'lineNum':'   48','line':'','coverage':'           : ',},
{'lineNum':'   49','line':'		virtual const char **getArgv() = 0;','coverage':'           : ',},
{'lineNum':'   50','line':'','coverage':'           : ',},
{'lineNum':'   51','line':'		virtual unsigned int getArgc() = 0;','coverage':'           : ',},
{'lineNum':'   52','line':'','coverage':'           : ',},
{'lineNum':'   53','line':'		virtual std::map<unsigned int,std::string> &getExcludePattern() = 0;','coverage':'           : ',},
{'lineNum':'   54','line':'','coverage':'           : ',},
{'lineNum':'   55','line':'		virtual std::map<unsigned int,std::string> &getOnlyIncludePattern() = 0;','coverage':'           : ',},
{'lineNum':'   56','line':'','coverage':'           : ',},
{'lineNum':'   57','line':'		virtual std::map<unsigned int,std::string> &getOnlyIncludePath() = 0;','coverage':'           : ',},
{'lineNum':'   58','line':'','coverage':'           : ',},
{'lineNum':'   59','line':'		virtual std::map<unsigned int,std::string> &getExcludePath() = 0;','coverage':'           : ',},
{'lineNum':'   60','line':'','coverage':'           : ',},
{'lineNum':'   61','line':'		virtual enum OutputType getOutputType() = 0;','coverage':'           : ',},
{'lineNum':'   62','line':'		virtual const std::string& getNewPathPrefix() = 0;','coverage':'           : ',},
{'lineNum':'   63','line':'		virtual const std::string& getOriginalPathPrefix() = 0;','coverage':'           : ',},
{'lineNum':'   64','line':'		virtual void setOutputType(enum OutputType) = 0;','coverage':'           : ',},
{'lineNum':'   65','line':'','coverage':'           : ',},
{'lineNum':'   66','line':'		virtual bool getParseSolibs() = 0;','coverage':'           : ',},
{'lineNum':'   67','line':'','coverage':'           : ',},
{'lineNum':'   68','line':'		virtual void setParseSolibs(bool on) = 0;','coverage':'           : ',},
{'lineNum':'   69','line':'','coverage':'           : ',},
{'lineNum':'   70','line':'		virtual bool getExitFirstProcess() = 0;','coverage':'           : ',},
{'lineNum':'   71','line':'','coverage':'           : ',},
{'lineNum':'   72','line':'		virtual unsigned int getOutputInterval() = 0;','coverage':'           : ',},
{'lineNum':'   73','line':'','coverage':'           : ',},
{'lineNum':'   74','line':'		virtual RunMode_t getRunningMode() = 0;','coverage':'           : ',},
{'lineNum':'   75','line':'','coverage':'           : ',},
{'lineNum':'   76','line':'','coverage':'           : ',},
{'lineNum':'   77','line':'		virtual bool parse(unsigned int argc, const char *argv[]) = 0;','coverage':'           : ',},
{'lineNum':'   78','line':'','coverage':'           : ',},
{'lineNum':'   79','line':'','coverage':'           : ',},
{'lineNum':'   80','line':'		static IConfiguration &getInstance();','coverage':'           : ',},
{'lineNum':'   81','line':'	};','coverage':'           : ',},
{'lineNum':'   82','line':'}','coverage':'           : ',},
];
var merged_data = [];
