var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 103, 'covered' : 25,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Simon Kagstrom <simon.kagstrom@gmail.com>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   Instruction models','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'import gtk, gobject','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'import cgi','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   15','line':'','coverage':'           : ',},
{'lineNum':'   16','line':'from Config import *','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   17','line':'from Function import Function','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'from StrEntity import StrEntity','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   19','line':'from Instruction import Instruction','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'','coverage':'           : ',},
{'lineNum':'   21','line':'def loadFile(fileName):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'    for path in pathsToSearch:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   23','line':'        fullPath = "%s/%s" % (path, fileName)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   24','line':'        try:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   25','line':'            return gtk.gdk.pixbuf_new_from_file(fullPath)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   26','line':'        except:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   27','line':'            pass','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   28','line':'    return None','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   29','line':'','coverage':'           : ',},
{'lineNum':'   30','line':'','coverage':'           : ',},
{'lineNum':'   31','line':'red_start_down = loadFile("gfx/red_start_down.png")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   32','line':'red_line = loadFile("gfx/red_line.png")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   33','line':'red_plus = loadFile("gfx/red_plus.png")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'red_arrow_left = loadFile("gfx/red_arrow_left.png")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   35','line':'red_start_up = loadFile("gfx/red_start_up.png")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   36','line':'red_arrow_right = loadFile("gfx/red_arrow_right.png")','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   37','line':'','coverage':'           : ',},
{'lineNum':'   38','line':'jump_pixmaps_right=[None, red_start_down, red_line, red_arrow_left, red_plus, red_plus]','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   39','line':'jump_pixmaps_left=[None, red_start_up, red_line, red_arrow_right, red_plus, red_plus]','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'','coverage':'           : ',},
{'lineNum':'   41','line':'class InfoModel:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   42','line':'    """ The model class holds the information we want to display """','coverage':'           : ',},
{'lineNum':'   43','line':'','coverage':'           : ',},
{'lineNum':'   44','line':'    def __init__(self, function, curInstruction = None, highlighters=[], numJumpCols=3):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   45','line':'        """ Sets up and populates our gtk.TreeStore """','coverage':'           : ',},
{'lineNum':'   46','line':'','coverage':'           : ',},
{'lineNum':'   47','line':'        self.function = function','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   48','line':'        self.curInstruction = curInstruction','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   49','line':'        self.highlighters = highlighters','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   50','line':'        cols = [ gobject.TYPE_STRING, ] + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   51','line':'            [gtk.gdk.Pixbuf]*numJumpCols + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   52','line':'            [ gobject.TYPE_STRING, ] + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   53','line':'            [gtk.gdk.Pixbuf]*numJumpCols + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   54','line':'            [ gobject.TYPE_STRING, gobject.TYPE_PYOBJECT ]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   55','line':'','coverage':'           : ',},
{'lineNum':'   56','line':'        self.COLUMN_ADDR = 0','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   57','line':'        self.COLUMN_STR_REPRESENTATION = 1 + numJumpCols','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   58','line':'        self.COLUMN_TARGET = 1 + numJumpCols + 1 + numJumpCols','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   59','line':'        self.COLUMN_INSTRUCTION = 1 + numJumpCols + 1 + numJumpCols + 1','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   60','line':'        self.tree_store = gtk.ListStore(*cols)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   61','line':'        # Create the TreeStore','coverage':'           : ',},
{'lineNum':'   62','line':'        if self.function == None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   63','line':'            return','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   64','line':'        self.lazyinitFunction()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'','coverage':'           : ',},
{'lineNum':'   66','line':'        for insn in self.function.getAll():','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   67','line':'            if isinstance(insn, StrEntity):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   68','line':'                if config.showHighLevelCode:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   69','line':'                    insn.iter = self.tree_store.append( ("",','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   70','line':'                                                               jump_pixmaps_left[insn.left_state[2]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   71','line':'                                                               jump_pixmaps_left[insn.left_state[1]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   72','line':'                                                               jump_pixmaps_left[insn.left_state[0]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   73','line':'                                                               \'<small><span foreground="%s">%s</span></small>\\t\' % (config.highLevelCodeFgColor, str(insn)),','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   74','line':'                                                               jump_pixmaps_right[insn.right_state[0]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   75','line':'                                                               jump_pixmaps_right[insn.right_state[1]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   76','line':'                                                               jump_pixmaps_right[insn.right_state[2]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   77','line':'                                                               "",','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   78','line':'                                                               insn','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   79','line':'                                                               ))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   81','line':'','coverage':'           : ',},
{'lineNum':'   82','line':'            target = ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   83','line':'            if isinstance(insn.getOutLink(), Function):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   84','line':'                target = insn.getOutLink().getLabel()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   85','line':'','coverage':'           : ',},
{'lineNum':'   86','line':'            insnAddr = "0x%08x" % (insn.address)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   87','line':'            insnStr = insn.getOpcode()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   88','line':'            argsStr = insn.getArgs()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   89','line':'','coverage':'           : ',},
{'lineNum':'   90','line':'            strRepresentation = \'<span foreground="%s">%s</span>\\t%s\' % (config.insnFgColor, insnStr, argsStr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   91','line':'            if insn.comment:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   92','line':'                strRepresentation += \' <span foreground="%s">;%s</span>\' % (config.highLevelCodeFgColor, cgi.escape(insn.comment))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   93','line':'            insn.iter = self.tree_store.append( (insnAddr,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   94','line':'                                                       jump_pixmaps_left[insn.left_state[2]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   95','line':'                                                       jump_pixmaps_left[insn.left_state[1]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   96','line':'                                                       jump_pixmaps_left[insn.left_state[0]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   97','line':'                                                       strRepresentation,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   98','line':'                                                       jump_pixmaps_right[insn.right_state[0]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   99','line':'                                                       jump_pixmaps_right[insn.right_state[1]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  100','line':'                                                       jump_pixmaps_right[insn.right_state[2]],','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  101','line':'                                                       target,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  102','line':'                                                       insn','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  103','line':'                                                       ))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  104','line':'','coverage':'           : ',},
{'lineNum':'  105','line':'    def refreshModel(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  106','line':'        for iter in self.tree_store:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  107','line':'            insn = iter[self.COLUMN_INSTRUCTION]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  108','line':'            if isinstance(insn, Instruction):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  109','line':'                insnAddr = "0x%08x" % (insn.address)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  110','line':'                insnStr = insn.getOpcode()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  111','line':'                argsStr = insn.getArgs()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  112','line':'                strRepresentation = \'<span foreground="%s">%s</span>\\t%s\' % (config.insnFgColor, insnStr, argsStr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  113','line':'                if insn.comment:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  114','line':'                    strRepresentation += \' <span foreground="%s">;%s</span>\' % (config.highLevelCodeFgColor, cgi.escape(insn.comment))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  115','line':'                iter[self.COLUMN_STR_REPRESENTATION] = strRepresentation','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  116','line':'                iter[self.COLUMN_ADDR] = insnAddr','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  117','line':'                for highlighter in self.highlighters:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  118','line':'                    highlighter.highlight(iter, self.curInstruction, self)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  119','line':'','coverage':'           : ',},
{'lineNum':'  120','line':'    def lazyinitFunction(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  121','line':'        if self.function == None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  122','line':'            return','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  123','line':'        if self.function.getAll() == []:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  124','line':'            self.function.parse()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  125','line':'            self.function.link()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  126','line':'','coverage':'           : ',},
{'lineNum':'  127','line':'    def setCurInstruction(self, curInstruction):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  128','line':'        self.curInstruction = curInstruction','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  129','line':'        if self.function == None:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  130','line':'            return','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  131','line':'','coverage':'           : ',},
{'lineNum':'  132','line':'    def getModel(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  133','line':'        """ Returns the model """','coverage':'           : ',},
{'lineNum':'  134','line':'        if self.tree_store:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  135','line':'            return self.tree_store','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  136','line':'        else:','coverage':'           : ',},
{'lineNum':'  137','line':'            return None','class':'lineNoCov','coverage':'  0 /   1  : ',},
];
var merged_data = [];
