var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 81, 'covered' : 0,};
var data = [
{'lineNum':'    1','line':'#include "writer-base.hh"','coverage':'           : ',},
{'lineNum':'    2','line':'#include <utils.hh>','coverage':'           : ',},
{'lineNum':'    3','line':'','coverage':'           : ',},
{'lineNum':'    4','line':'#include <swap-endian.hh>','coverage':'           : ',},
{'lineNum':'    5','line':'','coverage':'           : ',},
{'lineNum':'    6','line':'#include <stdio.h>','coverage':'           : ',},
{'lineNum':'    7','line':'','coverage':'           : ',},
{'lineNum':'    8','line':'using namespace kcov;','coverage':'           : ',},
{'lineNum':'    9','line':'','coverage':'           : ',},
{'lineNum':'   10','line':'#define SUMMARY_MAGIC   0x456d696c','coverage':'           : ',},
{'lineNum':'   11','line':'#define SUMMARY_VERSION 2','coverage':'           : ',},
{'lineNum':'   12','line':'','coverage':'           : ',},
{'lineNum':'   13','line':'struct summaryStruct','coverage':'           : ',},
{'lineNum':'   14','line':'{','coverage':'           : ',},
{'lineNum':'   15','line':'	uint32_t magic;','coverage':'           : ',},
{'lineNum':'   16','line':'	uint32_t version;','coverage':'           : ',},
{'lineNum':'   17','line':'	uint32_t includeInTotals;','coverage':'           : ',},
{'lineNum':'   18','line':'	uint32_t nLines;','coverage':'           : ',},
{'lineNum':'   19','line':'	uint32_t nExecutedLines;','coverage':'           : ',},
{'lineNum':'   20','line':'	char name[256];','coverage':'           : ',},
{'lineNum':'   21','line':'};','coverage':'           : ',},
{'lineNum':'   22','line':'','coverage':'           : ',},
{'lineNum':'   23','line':'int WriterBase::File::fileNameCount;','coverage':'           : ',},
{'lineNum':'   24','line':'','coverage':'           : ',},
{'lineNum':'   25','line':'WriterBase::WriterBase(IFileParser &parser, IReporter &reporter) :','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   26','line':'		m_fileParser(parser), m_reporter(reporter),','coverage':'           : ',},
{'lineNum':'   27','line':'		m_commonPath("not set")','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   28','line':'{','coverage':'           : ',},
{'lineNum':'   29','line':'		m_fileParser.registerLineListener(*this);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   30','line':'}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   31','line':'','coverage':'           : ',},
{'lineNum':'   32','line':'WriterBase::File::File(const std::string &filename) :','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   33','line':'						m_name(filename), m_codeLines(0), m_executedLines(0), m_lastLineNr(0)','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   34','line':'{','coverage':'           : ',},
{'lineNum':'   35','line':'	size_t pos = m_name.rfind(\'/\');','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   36','line':'','coverage':'           : ',},
{'lineNum':'   37','line':'	if (pos != std::string::npos)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   38','line':'		m_fileName = m_name.substr(pos + 1, std::string::npos);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   39','line':'	else','coverage':'           : ',},
{'lineNum':'   40','line':'		m_fileName = m_name;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   41','line':'','coverage':'           : ',},
{'lineNum':'   42','line':'	// Make this name unique (we might have several files with the same name)','coverage':'           : ',},
{'lineNum':'   43','line':'	m_outFileName = fmt("%s.%d.html", m_fileName.c_str(), fileNameCount);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   44','line':'	m_jsonOutFileName = fmt("%s.%d.json", m_fileName.c_str(), fileNameCount);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   45','line':'	fileNameCount++;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   46','line':'','coverage':'           : ',},
{'lineNum':'   47','line':'	readFile(filename);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   48','line':'}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   49','line':'','coverage':'           : ',},
{'lineNum':'   50','line':'void WriterBase::File::readFile(const std::string &filename)','coverage':'           : ',},
{'lineNum':'   51','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   52','line':'	FILE *fp = fopen(filename.c_str(), "r");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   53','line':'	unsigned int lineNr = 1;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   54','line':'','coverage':'           : ',},
{'lineNum':'   55','line':'	panic_if(!fp, "Can\'t open %s", filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   56','line':'','coverage':'           : ',},
{'lineNum':'   57','line':'	while (1)','coverage':'           : ',},
{'lineNum':'   58','line':'	{','coverage':'           : ',},
{'lineNum':'   59','line':'		char *lineptr = nullptr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   60','line':'		ssize_t res;','coverage':'           : ',},
{'lineNum':'   61','line':'		size_t n;','coverage':'           : ',},
{'lineNum':'   62','line':'','coverage':'           : ',},
{'lineNum':'   63','line':'		res = getline(&lineptr, &n, fp);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   64','line':'		if (res < 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'			break;','coverage':'           : ',},
{'lineNum':'   66','line':'		std::string s(lineptr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   67','line':'		s.erase(s.find_last_not_of(" \\n\\r\\t")+1);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   68','line':'		m_lineMap[lineNr] = s;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   69','line':'','coverage':'           : ',},
{'lineNum':'   70','line':'		free((void *)lineptr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   71','line':'		lineNr++;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   72','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   73','line':'','coverage':'           : ',},
{'lineNum':'   74','line':'	m_lastLineNr = lineNr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   75','line':'','coverage':'           : ',},
{'lineNum':'   76','line':'	fclose(fp);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   77','line':'}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   78','line':'','coverage':'           : ',},
{'lineNum':'   79','line':'','coverage':'           : ',},
{'lineNum':'   80','line':'void WriterBase::onLine(const std::string &file, unsigned int lineNr, unsigned long addr)','coverage':'           : ',},
{'lineNum':'   81','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   82','line':'	if (!m_reporter.fileIsIncluded(file))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   83','line':'		return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   84','line':'','coverage':'           : ',},
{'lineNum':'   85','line':'	if (m_files.find(file) != m_files.end())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   86','line':'		return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   87','line':'','coverage':'           : ',},
{'lineNum':'   88','line':'	if (!file_exists(file.c_str()))','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   89','line':'		return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   90','line':'','coverage':'           : ',},
{'lineNum':'   91','line':'	m_files[file] = new File(file);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   92','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   93','line':'','coverage':'           : ',},
{'lineNum':'   94','line':'','coverage':'           : ',},
{'lineNum':'   95','line':'void *WriterBase::marshalSummary(IReporter::ExecutionSummary &summary,','coverage':'           : ',},
{'lineNum':'   96','line':'		const std::string &name, size_t *sz)','coverage':'           : ',},
{'lineNum':'   97','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   98','line':'	struct summaryStruct *p;','coverage':'           : ',},
{'lineNum':'   99','line':'','coverage':'           : ',},
{'lineNum':'  100','line':'	p = (struct summaryStruct *)xmalloc(sizeof(struct summaryStruct));','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  101','line':'	memset(p, 0, sizeof(*p));','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  102','line':'','coverage':'           : ',},
{'lineNum':'  103','line':'	p->magic = to_be<uint32_t>(SUMMARY_MAGIC);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  104','line':'	p->version = to_be<uint32_t>(SUMMARY_VERSION);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  105','line':'	p->includeInTotals = to_be<uint32_t>(summary.m_includeInTotals);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  106','line':'	p->nLines = to_be<uint32_t>(summary.m_lines);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  107','line':'	p->nExecutedLines = to_be<uint32_t>(summary.m_executedLines);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  108','line':'	strncpy(p->name, name.c_str(), sizeof(p->name) - 1);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  109','line':'','coverage':'           : ',},
{'lineNum':'  110','line':'	*sz = sizeof(*p);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  111','line':'','coverage':'           : ',},
{'lineNum':'  112','line':'	return (void *)p;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  113','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  114','line':'','coverage':'           : ',},
{'lineNum':'  115','line':'bool WriterBase::unMarshalSummary(void *data, size_t sz,','coverage':'           : ',},
{'lineNum':'  116','line':'		IReporter::ExecutionSummary &summary,','coverage':'           : ',},
{'lineNum':'  117','line':'		std::string &name)','coverage':'           : ',},
{'lineNum':'  118','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  119','line':'	struct summaryStruct *p = (struct summaryStruct *)data;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  120','line':'','coverage':'           : ',},
{'lineNum':'  121','line':'	if (sz != sizeof(*p))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  122','line':'		return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  123','line':'','coverage':'           : ',},
{'lineNum':'  124','line':'	if (be_to_host<uint32_t>(p->magic) != SUMMARY_MAGIC)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  125','line':'		return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  126','line':'','coverage':'           : ',},
{'lineNum':'  127','line':'	if (be_to_host<uint32_t>(p->version) != SUMMARY_VERSION)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  128','line':'		return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  129','line':'','coverage':'           : ',},
{'lineNum':'  130','line':'	summary.m_lines = be_to_host<uint32_t>(p->nLines);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  131','line':'	summary.m_executedLines = be_to_host<uint32_t>(p->nExecutedLines);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  132','line':'	summary.m_includeInTotals = be_to_host<uint32_t>(p->includeInTotals);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  133','line':'	name = std::string(p->name);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  134','line':'','coverage':'           : ',},
{'lineNum':'  135','line':'	return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  136','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  137','line':'','coverage':'           : ',},
{'lineNum':'  138','line':'void WriterBase::setupCommonPaths()','coverage':'           : ',},
{'lineNum':'  139','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  140','line':'	for (const auto & it : m_files) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  141','line':'		File *file = it.second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  142','line':'','coverage':'           : ',},
{'lineNum':'  143','line':'		if (m_commonPath == "not set")','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  144','line':'			m_commonPath = file->m_name;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  145','line':'','coverage':'           : ',},
{'lineNum':'  146','line':'		/* Already matching? */','coverage':'           : ',},
{'lineNum':'  147','line':'		if (file->m_name.find(m_commonPath) == 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  148','line':'			continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  149','line':'','coverage':'           : ',},
{'lineNum':'  150','line':'		while (1) {','coverage':'           : ',},
{'lineNum':'  151','line':'			size_t pos = m_commonPath.rfind(\'/\');','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  152','line':'			if (pos == std::string::npos)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  153','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  154','line':'','coverage':'           : ',},
{'lineNum':'  155','line':'			m_commonPath = m_commonPath.substr(0, pos);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  156','line':'			if (file->m_name.find(m_commonPath) == 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  157','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  158','line':'		}','coverage':'           : ',},
{'lineNum':'  159','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  160','line':'}','class':'lineNoCov','coverage':'  0 /   2  : ',},
];
var merged_data = [];
