var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 17, 'covered' : 6,};
var data = [
{'lineNum':'    1','line':'#pragma once','coverage':'           : ',},
{'lineNum':'    2','line':'','coverage':'           : ',},
{'lineNum':'    3','line':'#include <stdlib.h>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <stdint.h>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <string.h>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <stdio.h>','coverage':'           : ',},
{'lineNum':'    7','line':'#include <stdarg.h>','coverage':'           : ',},
{'lineNum':'    8','line':'#include <semaphore.h>','coverage':'           : ',},
{'lineNum':'    9','line':'','coverage':'           : ',},
{'lineNum':'   10','line':'#include <string>','coverage':'           : ',},
{'lineNum':'   11','line':'#include <list>','coverage':'           : ',},
{'lineNum':'   12','line':'','coverage':'           : ',},
{'lineNum':'   13','line':'#define error(x...) do \\','coverage':'           : ',},
{'lineNum':'   14','line':'{ \\','coverage':'           : ',},
{'lineNum':'   15','line':'	fprintf(stderr, "Error: "); \\','coverage':'           : ',},
{'lineNum':'   16','line':'	fprintf(stderr, x); \\','coverage':'           : ',},
{'lineNum':'   17','line':'	fprintf(stderr, "\\n"); \\','coverage':'           : ',},
{'lineNum':'   18','line':'} while(0)','coverage':'           : ',},
{'lineNum':'   19','line':'','coverage':'           : ',},
{'lineNum':'   20','line':'#define warning(x...) do \\','coverage':'           : ',},
{'lineNum':'   21','line':'{ \\','coverage':'           : ',},
{'lineNum':'   22','line':'	fprintf(stderr, "Warning: "); \\','coverage':'           : ',},
{'lineNum':'   23','line':'	fprintf(stderr, x); \\','coverage':'           : ',},
{'lineNum':'   24','line':'	fprintf(stderr, "\\n"); \\','coverage':'           : ',},
{'lineNum':'   25','line':'} while(0)','coverage':'           : ',},
{'lineNum':'   26','line':'','coverage':'           : ',},
{'lineNum':'   27','line':'#define panic(x...) do \\','coverage':'           : ',},
{'lineNum':'   28','line':'{ \\','coverage':'           : ',},
{'lineNum':'   29','line':'	error(x); \\','coverage':'           : ',},
{'lineNum':'   30','line':'	exit(1); \\','coverage':'           : ',},
{'lineNum':'   31','line':'} while(0)','coverage':'           : ',},
{'lineNum':'   32','line':'','coverage':'           : ',},
{'lineNum':'   33','line':'enum debug_mask','coverage':'           : ',},
{'lineNum':'   34','line':'{','coverage':'           : ',},
{'lineNum':'   35','line':'	INFO_MSG   =   1,','coverage':'           : ',},
{'lineNum':'   36','line':'	PTRACE_MSG =   2,','coverage':'           : ',},
{'lineNum':'   37','line':'	ELF_MSG    =   4,','coverage':'           : ',},
{'lineNum':'   38','line':'	BP_MSG     =   8,','coverage':'           : ',},
{'lineNum':'   39','line':'	STATUS_MSG =  16,','coverage':'           : ',},
{'lineNum':'   40','line':'};','coverage':'           : ',},
{'lineNum':'   41','line':'extern int g_kcov_debug_mask;','coverage':'           : ',},
{'lineNum':'   42','line':'','coverage':'           : ',},
{'lineNum':'   43','line':'static inline void kcov_debug(enum debug_mask dbg, const char *fmt, ...) __attribute__((format(printf,2,3)));','coverage':'           : ',},
{'lineNum':'   44','line':'','coverage':'           : ',},
{'lineNum':'   45','line':'static inline void kcov_debug(enum debug_mask dbg, const char *fmt, ...)','coverage':'           : ',},
{'lineNum':'   46','line':'{','class':'lineNoCov','coverage':'  0 /   8  : ',},
{'lineNum':'   47','line':'	va_list ap;','coverage':'           : ',},
{'lineNum':'   48','line':'','coverage':'           : ',},
{'lineNum':'   49','line':'	if ((g_kcov_debug_mask & dbg) == 0)','class':'lineNoCov','coverage':'  0 /   4  : ',},
{'lineNum':'   50','line':'		return;','class':'lineNoCov','coverage':'  0 /   4  : ',},
{'lineNum':'   51','line':'','coverage':'           : ',},
{'lineNum':'   52','line':'	va_start(ap, fmt);','class':'lineNoCov','coverage':'  0 /   4  : ',},
{'lineNum':'   53','line':'	vfprintf(stdout, fmt, ap);','class':'lineNoCov','coverage':'  0 /   4  : ',},
{'lineNum':'   54','line':'	va_end(ap);','coverage':'           : ',},
{'lineNum':'   55','line':'}','class':'lineNoCov','coverage':'  0 /   4  : ',},
{'lineNum':'   56','line':'','coverage':'           : ',},
{'lineNum':'   57','line':'#define panic_if(cond, x...) \\','coverage':'           : ',},
{'lineNum':'   58','line':'		do { if ((cond)) panic(x); } while(0)','coverage':'           : ',},
{'lineNum':'   59','line':'','coverage':'           : ',},
{'lineNum':'   60','line':'static inline char *xstrdup(const char *s)','coverage':'           : ',},
{'lineNum':'   61','line':'{','coverage':'           : ',},
{'lineNum':'   62','line':'	char *out = strdup(s);','coverage':'           : ',},
{'lineNum':'   63','line':'','coverage':'           : ',},
{'lineNum':'   64','line':'	panic_if(!out, "strdup failed");','coverage':'           : ',},
{'lineNum':'   65','line':'','coverage':'           : ',},
{'lineNum':'   66','line':'	return out;','coverage':'           : ',},
{'lineNum':'   67','line':'}','coverage':'           : ',},
{'lineNum':'   68','line':'','coverage':'           : ',},
{'lineNum':'   69','line':'static inline void *xmalloc(size_t sz)','coverage':'           : ',},
{'lineNum':'   70','line':'{','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   71','line':'  void *out = malloc(sz);','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   72','line':'','coverage':'           : ',},
{'lineNum':'   73','line':'  panic_if(!out, "malloc failed");','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   74','line':'  memset(out, 0, sz);','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   75','line':'','coverage':'           : ',},
{'lineNum':'   76','line':'  return out;','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   77','line':'}','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   78','line':'','coverage':'           : ',},
{'lineNum':'   79','line':'static inline void *xrealloc(void *p, size_t sz)','coverage':'           : ',},
{'lineNum':'   80','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   81','line':'  void *out = realloc(p, sz);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   82','line':'','coverage':'           : ',},
{'lineNum':'   83','line':'  panic_if(!out, "realloc failed");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   84','line':'','coverage':'           : ',},
{'lineNum':'   85','line':'  return out;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   86','line':'}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   87','line':'','coverage':'           : ',},
{'lineNum':'   88','line':'extern int write_file(const void *data, size_t len, const char *fmt, ...) __attribute__((format(printf,3,4)));','coverage':'           : ',},
{'lineNum':'   89','line':'','coverage':'           : ',},
{'lineNum':'   90','line':'extern void *read_file(size_t *out_size, const char *fmt, ...) __attribute__((format(printf,2,3)));','coverage':'           : ',},
{'lineNum':'   91','line':'','coverage':'           : ',},
{'lineNum':'   92','line':'extern std::string dir_concat(const std::string &dir, const std::string &filename);','coverage':'           : ',},
{'lineNum':'   93','line':'','coverage':'           : ',},
{'lineNum':'   94','line':'#define xwrite_file(data, len, dir...) do { \\','coverage':'           : ',},
{'lineNum':'   95','line':'	int r = write_file(data, len, dir); \\','coverage':'           : ',},
{'lineNum':'   96','line':'	panic_if (r != 0, "write_file failed with %d\\n", r); \\','coverage':'           : ',},
{'lineNum':'   97','line':'} while(0)','coverage':'           : ',},
{'lineNum':'   98','line':'','coverage':'           : ',},
{'lineNum':'   99','line':'#define xsnprintf(buf, size, fmt, x...) do { \\','coverage':'           : ',},
{'lineNum':'  100','line':'    int r = snprintf(buf, size, fmt, x); \\','coverage':'           : ',},
{'lineNum':'  101','line':'    panic_if(r < 0 || r >= (int)(size), "snprintf failed for %s with %d\\n", fmt, r); \\','coverage':'           : ',},
{'lineNum':'  102','line':'} while(0)','coverage':'           : ',},
{'lineNum':'  103','line':'','coverage':'           : ',},
{'lineNum':'  104','line':'','coverage':'           : ',},
{'lineNum':'  105','line':'extern bool file_exists(const std::string &path);','coverage':'           : ',},
{'lineNum':'  106','line':'','coverage':'           : ',},
{'lineNum':'  107','line':'extern uint64_t get_file_timestamp(const std::string &path);','coverage':'           : ',},
{'lineNum':'  108','line':'','coverage':'           : ',},
{'lineNum':'  109','line':'extern int concat_files(const char *dst, const char *file_a, const char *file_b);','coverage':'           : ',},
{'lineNum':'  110','line':'','coverage':'           : ',},
{'lineNum':'  111','line':'extern const char *get_home();','coverage':'           : ',},
{'lineNum':'  112','line':'','coverage':'           : ',},
{'lineNum':'  113','line':'/**','coverage':'           : ',},
{'lineNum':'  114','line':' * Return true if a FILE * is readable without blocking.','coverage':'           : ',},
{'lineNum':'  115','line':' *','coverage':'           : ',},
{'lineNum':'  116','line':' * @param fp the file to read','coverage':'           : ',},
{'lineNum':'  117','line':' * @param ms the number of milliseconds to wait','coverage':'           : ',},
{'lineNum':'  118','line':' *','coverage':'           : ',},
{'lineNum':'  119','line':' * @return true if the file can be read without blocking, false otherwise','coverage':'           : ',},
{'lineNum':'  120','line':' */','coverage':'           : ',},
{'lineNum':'  121','line':'bool file_readable(FILE *fp, unsigned int ms);','coverage':'           : ',},
{'lineNum':'  122','line':'','coverage':'           : ',},
{'lineNum':'  123','line':'unsigned long get_aligned(unsigned long addr);','coverage':'           : ',},
{'lineNum':'  124','line':'','coverage':'           : ',},
{'lineNum':'  125','line':'unsigned long get_aligned_4b(unsigned long addr);','coverage':'           : ',},
{'lineNum':'  126','line':'','coverage':'           : ',},
{'lineNum':'  127','line':'','coverage':'           : ',},
{'lineNum':'  128','line':'std::string fmt(const char *fmt, ...) __attribute__((format(printf,1,2)));','coverage':'           : ',},
{'lineNum':'  129','line':'','coverage':'           : ',},
{'lineNum':'  130','line':'int coin_get_current_cpu(void);','coverage':'           : ',},
{'lineNum':'  131','line':'','coverage':'           : ',},
{'lineNum':'  132','line':'int kcov_get_current_cpu(void);','coverage':'           : ',},
{'lineNum':'  133','line':'','coverage':'           : ',},
{'lineNum':'  134','line':'void kcov_tie_process_to_cpu(pid_t pid, int cpu);','coverage':'           : ',},
{'lineNum':'  135','line':'','coverage':'           : ',},
{'lineNum':'  136','line':'void mdelay(unsigned int ms);','coverage':'           : ',},
{'lineNum':'  137','line':'','coverage':'           : ',},
{'lineNum':'  138','line':'uint64_t get_ms_timestamp(void);','coverage':'           : ',},
{'lineNum':'  139','line':'','coverage':'           : ',},
{'lineNum':'  140','line':'bool machine_is_64bit(void);','coverage':'           : ',},
{'lineNum':'  141','line':'','coverage':'           : ',},
{'lineNum':'  142','line':'std::list<std::string> split_string(const std::string &s, const char *delims);','coverage':'           : ',},
{'lineNum':'  143','line':'','coverage':'           : ',},
{'lineNum':'  144','line':'std::string trim_string(const std::string &strIn);','coverage':'           : ',},
{'lineNum':'  145','line':'','coverage':'           : ',},
{'lineNum':'  146','line':'const std::string &get_real_path(const std::string &path);','coverage':'           : ',},
{'lineNum':'  147','line':'','coverage':'           : ',},
{'lineNum':'  148','line':'bool string_is_integer(const std::string &str, unsigned base = 0);','coverage':'           : ',},
{'lineNum':'  149','line':'','coverage':'           : ',},
{'lineNum':'  150','line':'int64_t string_to_integer(const std::string &str, unsigned base = 0);','coverage':'           : ',},
{'lineNum':'  151','line':'','coverage':'           : ',},
{'lineNum':'  152','line':'std::string escape_html(const std::string &str);','coverage':'           : ',},
{'lineNum':'  153','line':'','coverage':'           : ',},
{'lineNum':'  154','line':'std::string escape_json(const std::string &str);','coverage':'           : ',},
{'lineNum':'  155','line':'','coverage':'           : ',},
{'lineNum':'  156','line':'void msleep(uint64_t ms);','coverage':'           : ',},
{'lineNum':'  157','line':'','coverage':'           : ',},
{'lineNum':'  158','line':'class Semaphore','coverage':'           : ',},
{'lineNum':'  159','line':'{','coverage':'           : ',},
{'lineNum':'  160','line':'private:','coverage':'           : ',},
{'lineNum':'  161','line':'	sem_t m_sem;','coverage':'           : ',},
{'lineNum':'  162','line':'','coverage':'           : ',},
{'lineNum':'  163','line':'public:','coverage':'           : ',},
{'lineNum':'  164','line':'	Semaphore()','coverage':'           : ',},
{'lineNum':'  165','line':'	{','coverage':'           : ',},
{'lineNum':'  166','line':'		sem_init(&m_sem, 0, 0);','coverage':'           : ',},
{'lineNum':'  167','line':'	}','coverage':'           : ',},
{'lineNum':'  168','line':'','coverage':'           : ',},
{'lineNum':'  169','line':'	~Semaphore()','coverage':'           : ',},
{'lineNum':'  170','line':'	{','coverage':'           : ',},
{'lineNum':'  171','line':'		sem_destroy(&m_sem);','coverage':'           : ',},
{'lineNum':'  172','line':'	}','coverage':'           : ',},
{'lineNum':'  173','line':'','coverage':'           : ',},
{'lineNum':'  174','line':'	void notify()','coverage':'           : ',},
{'lineNum':'  175','line':'	{','coverage':'           : ',},
{'lineNum':'  176','line':'		sem_post(&m_sem);','coverage':'           : ',},
{'lineNum':'  177','line':'	}','coverage':'           : ',},
{'lineNum':'  178','line':'','coverage':'           : ',},
{'lineNum':'  179','line':'	void wait()','coverage':'           : ',},
{'lineNum':'  180','line':'	{','coverage':'           : ',},
{'lineNum':'  181','line':'		sem_wait(&m_sem);','coverage':'           : ',},
{'lineNum':'  182','line':'	}','coverage':'           : ',},
{'lineNum':'  183','line':'};','coverage':'           : ',},
{'lineNum':'  184','line':'','coverage':'           : ',},
{'lineNum':'  185','line':'// Unit test stuff','coverage':'           : ',},
{'lineNum':'  186','line':'void mock_read_file(void *(*callback)(size_t *out_size, const char *path));','coverage':'           : ',},
{'lineNum':'  187','line':'','coverage':'           : ',},
{'lineNum':'  188','line':'void mock_write_file(int (*callback)(const void *data, size_t size, const char *path));','coverage':'           : ',},
{'lineNum':'  189','line':'','coverage':'           : ',},
{'lineNum':'  190','line':'void mock_file_exists(bool (*callback)(const std::string &path));','coverage':'           : ',},
{'lineNum':'  191','line':'','coverage':'           : ',},
{'lineNum':'  192','line':'void mock_get_file_timestamp(uint64_t (*callback)(const std::string &path));','coverage':'           : ',},
{'lineNum':'  193','line':'','coverage':'           : ',},
{'lineNum':'  194','line':'uint32_t crc32(const void *buf, size_t len);','coverage':'           : ',},
{'lineNum':'  195','line':'','coverage':'           : ',},
];
var merged_data = [];
