var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 263, 'covered' : 162,};
var data = [
{'lineNum':'    1','line':'#include <configuration.hh>','coverage':'           : ',},
{'lineNum':'    2','line':'#include <file-parser.hh>','coverage':'           : ',},
{'lineNum':'    3','line':'#include <utils.hh>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <stdlib.h>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <getopt.h>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <limits.h>','coverage':'           : ',},
{'lineNum':'    7','line':'#include <map>','coverage':'           : ',},
{'lineNum':'    8','line':'#include <list>','coverage':'           : ',},
{'lineNum':'    9','line':'#include <string>','coverage':'           : ',},
{'lineNum':'   10','line':'#include <stdexcept>','coverage':'           : ',},
{'lineNum':'   11','line':'#include <iostream>','coverage':'           : ',},
{'lineNum':'   12','line':'using namespace kcov;','coverage':'           : ',},
{'lineNum':'   13','line':'','coverage':'           : ',},
{'lineNum':'   14','line':'class Configuration : public IConfiguration','class':'lineNoCov','coverage':'  0 /   5  : ',},
{'lineNum':'   15','line':'{','coverage':'           : ',},
{'lineNum':'   16','line':'public:','coverage':'           : ',},
{'lineNum':'   17','line':'	Configuration()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'	{','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   19','line':'		m_outDirectory = "";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'		m_binaryName = "";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   21','line':'		m_pythonCommand = "python";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'		m_kernelCoveragePath = "/sys/kernel/debug/kprobe-coverage";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   23','line':'		m_lowLimit = 25;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   24','line':'		m_highLimit = 75;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   25','line':'		m_pathStripLevel = 2;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   26','line':'		m_ptracePid = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   27','line':'		m_programArgs = NULL;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   28','line':'		m_argc = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   29','line':'		m_outputType = OUTPUT_COVERAGE;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   30','line':'		m_originalPathPrefix="";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   31','line':'		m_newPathPrefix="";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   32','line':'		m_parseSolibs = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   33','line':'		m_exitFirstProcess = false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'		m_outputInterval = 1000;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   35','line':'		m_runMode = IConfiguration::MODE_COLLECT_AND_REPORT;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   36','line':'		m_printUncommon = false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   37','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   38','line':'','coverage':'           : ',},
{'lineNum':'   39','line':'	bool usage(void)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'	{','coverage':'           : ',},
{'lineNum':'   41','line':'		printf("Usage: kcov [OPTIONS] out-dir in-file [args...]\\n"','coverage':'           : ',},
{'lineNum':'   42','line':'				"\\n"','coverage':'           : ',},
{'lineNum':'   43','line':'				"Where [OPTIONS] are\\n"','coverage':'           : ',},
{'lineNum':'   44','line':'				" -h, --help              this text\\n"','coverage':'           : ',},
{'lineNum':'   45','line':'				" -p, --pid=PID           trace PID instead of executing in-file,\\n"','coverage':'           : ',},
{'lineNum':'   46','line':'				"                         in-file is optional in this case\\n"','coverage':'           : ',},
{'lineNum':'   47','line':'				" -l, --limits=low,high   setup limits for low/high coverage (default %u,%u)\\n"','coverage':'           : ',},
{'lineNum':'   48','line':'				"\\n"','coverage':'           : ',},
{'lineNum':'   49','line':'				" --collect-only          Only collect coverage data (don\'t produce HTML/\\n"','coverage':'           : ',},
{'lineNum':'   50','line':'				"                         Cobertura output)\\n"','coverage':'           : ',},
{'lineNum':'   51','line':'				" --report-only           Produce output from stored databases, don\'t collect\\n"','coverage':'           : ',},
{'lineNum':'   52','line':'				"\\n"','coverage':'           : ',},
{'lineNum':'   53','line':'				" --include-path=path     comma-separated paths to include in the coverage report\\n"','coverage':'           : ',},
{'lineNum':'   54','line':'				" --exclude-path=path     comma-separated paths to exclude from the coverage\\n"','coverage':'           : ',},
{'lineNum':'   55','line':'				"                         report\\n"','coverage':'           : ',},
{'lineNum':'   56','line':'				" --include-pattern=pat   comma-separated path patterns to include in the\\n"','coverage':'           : ',},
{'lineNum':'   57','line':'				"                         coverage report\\n"','coverage':'           : ',},
{'lineNum':'   58','line':'				" --exclude-pattern=pat   comma-separated path patterns to exclude from the \\n"','coverage':'           : ',},
{'lineNum':'   59','line':'				"                         coverage report\\n"','coverage':'           : ',},
{'lineNum':'   60','line':'				"%s"','coverage':'           : ',},
{'lineNum':'   61','line':'				"\\n"','coverage':'           : ',},
{'lineNum':'   62','line':'				"Examples:\\n"','coverage':'           : ',},
{'lineNum':'   63','line':'				"  kcov /tmp/frodo ./frodo          # Check coverage for ./frodo\\n"','coverage':'           : ',},
{'lineNum':'   64','line':'				"  kcov --pid=1000 /tmp/frodo       # Check coverage for PID 1000\\n"','coverage':'           : ',},
{'lineNum':'   65','line':'				"  kcov --include-pattern=/src/frodo/ /tmp/frodo ./frodo  # Only include files\\n"','coverage':'           : ',},
{'lineNum':'   66','line':'				"                                                         # including /src/frodo\\n"','coverage':'           : ',},
{'lineNum':'   67','line':'				"  kcov --collect-only /tmp/kcov ./frodo  # Collect coverage, don\'t report\\n"','coverage':'           : ',},
{'lineNum':'   68','line':'				"  kcov --report-only /tmp/kcov ./frodo   # Report coverage collected above\\n"','coverage':'           : ',},
{'lineNum':'   69','line':'				"",','coverage':'           : ',},
{'lineNum':'   70','line':'				m_lowLimit, m_highLimit,','coverage':'           : ',},
{'lineNum':'   71','line':'				uncommonOptions().c_str());','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   72','line':'','coverage':'           : ',},
{'lineNum':'   73','line':'		return false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   74','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   75','line':'','coverage':'           : ',},
{'lineNum':'   76','line':'	void printUsage()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   77','line':'	{','coverage':'           : ',},
{'lineNum':'   78','line':'		usage();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   79','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'   80','line':'','coverage':'           : ',},
{'lineNum':'   81','line':'	bool parse(unsigned int argc, const char *argv[])','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   82','line':'	{','coverage':'           : ',},
{'lineNum':'   83','line':'		static const struct option long_options[] = {','coverage':'           : ',},
{'lineNum':'   84','line':'				{"help", no_argument, 0, \'h\'},','coverage':'           : ',},
{'lineNum':'   85','line':'				{"pid", required_argument, 0, \'p\'},','coverage':'           : ',},
{'lineNum':'   86','line':'				{"limits", required_argument, 0, \'l\'},','coverage':'           : ',},
{'lineNum':'   87','line':'				{"output-interval", required_argument, 0, \'O\'},','coverage':'           : ',},
{'lineNum':'   88','line':'				{"title", required_argument, 0, \'t\'},','coverage':'           : ',},
{'lineNum':'   89','line':'				{"path-strip-level", required_argument, 0, \'S\'},','coverage':'           : ',},
{'lineNum':'   90','line':'				{"skip-solibs", no_argument, 0, \'L\'},','coverage':'           : ',},
{'lineNum':'   91','line':'				{"exit-first-process", no_argument, 0, \'F\'},','coverage':'           : ',},
{'lineNum':'   92','line':'				{"exclude-pattern", required_argument, 0, \'x\'},','coverage':'           : ',},
{'lineNum':'   93','line':'				{"include-pattern", required_argument, 0, \'i\'},','coverage':'           : ',},
{'lineNum':'   94','line':'				{"exclude-path", required_argument, 0, \'X\'},','coverage':'           : ',},
{'lineNum':'   95','line':'				{"include-path", required_argument, 0, \'I\'},','coverage':'           : ',},
{'lineNum':'   96','line':'				{"debug", required_argument, 0, \'D\'},','coverage':'           : ',},
{'lineNum':'   97','line':'				{"replace-src-path", required_argument, 0, \'R\'},','coverage':'           : ',},
{'lineNum':'   98','line':'				{"collect-only", no_argument, 0, \'C\'},','coverage':'           : ',},
{'lineNum':'   99','line':'				{"report-only", no_argument, 0, \'r\'},','coverage':'           : ',},
{'lineNum':'  100','line':'				{"python-parser", required_argument, 0, \'P\'},','coverage':'           : ',},
{'lineNum':'  101','line':'				{"uncommon-options", no_argument, 0, \'U\'},','coverage':'           : ',},
{'lineNum':'  102','line':'				{"set-breakpoint", required_argument, 0, \'b\'},','coverage':'           : ',},
{'lineNum':'  103','line':'				/*{"write-file", required_argument, 0, \'w\'}, Take back when the kernel stuff works */','coverage':'           : ',},
{'lineNum':'  104','line':'				/*{"read-file", required_argument, 0, \'r\'}, Ditto */','coverage':'           : ',},
{'lineNum':'  105','line':'				{0,0,0,0}','coverage':'           : ',},
{'lineNum':'  106','line':'		};','coverage':'           : ',},
{'lineNum':'  107','line':'		unsigned int afterOpts = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  108','line':'		unsigned int extraNeeded = 2;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  109','line':'		unsigned int lastArg;','coverage':'           : ',},
{'lineNum':'  110','line':'','coverage':'           : ',},
{'lineNum':'  111','line':'','coverage':'           : ',},
{'lineNum':'  112','line':'		m_onlyIncludePath.clear();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  113','line':'		m_onlyIncludePattern.clear();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  114','line':'		m_excludePath.clear();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  115','line':'		m_excludePattern.clear();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  116','line':'','coverage':'           : ',},
{'lineNum':'  117','line':'		/* Scan through the parameters for an ELF file: That will be the','coverage':'           : ',},
{'lineNum':'  118','line':'		 * second last argument in the list.','coverage':'           : ',},
{'lineNum':'  119','line':'		 *','coverage':'           : ',},
{'lineNum':'  120','line':'		 * After that it\'s arguments to the external program.','coverage':'           : ',},
{'lineNum':'  121','line':'		 */','coverage':'           : ',},
{'lineNum':'  122','line':'		for (lastArg = 1; lastArg < argc; lastArg++) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  123','line':'			if (IParserManager::getInstance().matchParser(argv[lastArg]))','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  124','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  125','line':'		}','coverage':'           : ',},
{'lineNum':'  126','line':'','coverage':'           : ',},
{'lineNum':'  127','line':'		bool printUsage = false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  128','line':'','coverage':'           : ',},
{'lineNum':'  129','line':'		/* Hooray for reentrancy... */','coverage':'           : ',},
{'lineNum':'  130','line':'		optind = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  131','line':'		optarg = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  132','line':'		while (1) {','coverage':'           : ',},
{'lineNum':'  133','line':'			int option_index = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  134','line':'			int c;','coverage':'           : ',},
{'lineNum':'  135','line':'','coverage':'           : ',},
{'lineNum':'  136','line':'			c = getopt_long (lastArg, (char **)argv,','coverage':'           : ',},
{'lineNum':'  137','line':'					"hp:s:l:t:", long_options, &option_index);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  138','line':'','coverage':'           : ',},
{'lineNum':'  139','line':'			/* No more options */','coverage':'           : ',},
{'lineNum':'  140','line':'			if (c == -1)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  141','line':'				break;','coverage':'           : ',},
{'lineNum':'  142','line':'','coverage':'           : ',},
{'lineNum':'  143','line':'			switch (c) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  144','line':'			case 0:','coverage':'           : ',},
{'lineNum':'  145','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  146','line':'			case \'h\':','coverage':'           : ',},
{'lineNum':'  147','line':'				printUsage = true;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  148','line':'				break;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  149','line':'			case \'U\':','coverage':'           : ',},
{'lineNum':'  150','line':'				m_printUncommon = true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  151','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  152','line':'			case \'L\':','coverage':'           : ',},
{'lineNum':'  153','line':'				m_parseSolibs = false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  154','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  155','line':'			case \'F\':','coverage':'           : ',},
{'lineNum':'  156','line':'				m_exitFirstProcess = true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  157','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  158','line':'			case \'p\':','coverage':'           : ',},
{'lineNum':'  159','line':'				if (!isInteger(std::string(optarg)))','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  160','line':'					return usage();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  161','line':'				m_ptracePid = stoul(std::string(optarg));','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  162','line':'				extraNeeded = 1;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  163','line':'				break;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  164','line':'			case \'t\':','coverage':'           : ',},
{'lineNum':'  165','line':'				m_title = optarg;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  166','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  167','line':'			case \'O\':','coverage':'           : ',},
{'lineNum':'  168','line':'				if (!isInteger(std::string(optarg)))','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  169','line':'					return usage();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  170','line':'','coverage':'           : ',},
{'lineNum':'  171','line':'				m_outputInterval = stoul(std::string(optarg));','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  172','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  173','line':'			case \'S\':','coverage':'           : ',},
{'lineNum':'  174','line':'				if (!isInteger(std::string(optarg)))','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  175','line':'					return usage();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  176','line':'				m_pathStripLevel = stoul(std::string(optarg));','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  177','line':'				if (m_pathStripLevel == 0)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  178','line':'					m_pathStripLevel = ~0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  179','line':'				break;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  180','line':'			case \'D\':','coverage':'           : ',},
{'lineNum':'  181','line':'				if (!isInteger(std::string(optarg)))','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  182','line':'					return usage();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  183','line':'				g_kcov_debug_mask = stoul(std::string(optarg));','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  184','line':'				break;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  185','line':'			case \'i\':','coverage':'           : ',},
{'lineNum':'  186','line':'				m_onlyIncludePattern = getCommaSeparatedList(std::string(optarg));','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  187','line':'				break;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  188','line':'			case \'P\':','coverage':'           : ',},
{'lineNum':'  189','line':'				m_pythonCommand = optarg;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  190','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  191','line':'			case \'x\':','coverage':'           : ',},
{'lineNum':'  192','line':'				m_excludePattern = getCommaSeparatedList(std::string(optarg));','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  193','line':'				break;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  194','line':'			case \'I\':','coverage':'           : ',},
{'lineNum':'  195','line':'				m_onlyIncludePath = getCommaSeparatedList(std::string(optarg));','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  196','line':'				expandPath(m_onlyIncludePath);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  197','line':'				break;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  198','line':'			case \'X\':','coverage':'           : ',},
{'lineNum':'  199','line':'				m_excludePath = getCommaSeparatedList(std::string(optarg));','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  200','line':'				expandPath(m_excludePath);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  201','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  202','line':'			case \'C\':','coverage':'           : ',},
{'lineNum':'  203','line':'				m_runMode = IConfiguration::MODE_COLLECT_ONLY;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  204','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  205','line':'			case \'r\':','coverage':'           : ',},
{'lineNum':'  206','line':'				m_runMode = IConfiguration::MODE_REPORT_ONLY;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  207','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  208','line':'			case \'b\': {','coverage':'           : ',},
{'lineNum':'  209','line':'				StrVecMap_t vec = getCommaSeparatedList(std::string(optarg));','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  210','line':'','coverage':'           : ',},
{'lineNum':'  211','line':'				for (auto it : vec) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  212','line':'					if (!string_is_integer(it.second, 16))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  213','line':'						continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  214','line':'','coverage':'           : ',},
{'lineNum':'  215','line':'					m_fixedBreakpoints.push_back(string_to_integer(it.second, 16));','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  216','line':'				}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  217','line':'','coverage':'           : ',},
{'lineNum':'  218','line':'				break;','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  219','line':'			}','coverage':'           : ',},
{'lineNum':'  220','line':'			case \'l\': {','coverage':'           : ',},
{'lineNum':'  221','line':'				StrVecMap_t vec = getCommaSeparatedList(std::string(optarg));','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  222','line':'','coverage':'           : ',},
{'lineNum':'  223','line':'				if (vec.size() != 2)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  224','line':'					return usage();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  225','line':'','coverage':'           : ',},
{'lineNum':'  226','line':'				if (!isInteger(vec[0]) || !isInteger(vec[1]))','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  227','line':'					return usage();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  228','line':'','coverage':'           : ',},
{'lineNum':'  229','line':'				m_lowLimit = stoul(vec[0]);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  230','line':'				m_highLimit = stoul(vec[1]);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  231','line':'				break;','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  232','line':'			}','coverage':'           : ',},
{'lineNum':'  233','line':'			case \'R\': {','coverage':'           : ',},
{'lineNum':'  234','line':'			  std::string tmpArg = std::string(optarg);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  235','line':'			  size_t tokenPosFront = tmpArg.find_first_of(":");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  236','line':'			  size_t tokenPosBack  = tmpArg.find_last_of(":");','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  237','line':'','coverage':'           : ',},
{'lineNum':'  238','line':'			  if ((tokenPosFront != std::string::npos) &&','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  239','line':'			      (tokenPosFront == tokenPosBack)) {','coverage':'           : ',},
{'lineNum':'  240','line':'','coverage':'           : ',},
{'lineNum':'  241','line':'			    m_originalPathPrefix = tmpArg.substr(0, tokenPosFront);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  242','line':'			    m_newPathPrefix = tmpArg.substr(tokenPosFront + 1);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  243','line':'','coverage':'           : ',},
{'lineNum':'  244','line':'			    char* rp = ::realpath(m_newPathPrefix.c_str(), nullptr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  245','line':'			    if (rp) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  246','line':'			      free((void*) rp);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  247','line':'			    }','coverage':'           : ',},
{'lineNum':'  248','line':'			    else {','coverage':'           : ',},
{'lineNum':'  249','line':'			      error("%s is not a valid path.\\n", m_newPathPrefix.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  250','line':'			    }','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  251','line':'','coverage':'           : ',},
{'lineNum':'  252','line':'			  }','coverage':'           : ',},
{'lineNum':'  253','line':'			  else {','coverage':'           : ',},
{'lineNum':'  254','line':'			    error("%s is formatted incorrectly\\n", tmpArg.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  255','line':'','coverage':'           : ',},
{'lineNum':'  256','line':'			  }','coverage':'           : ',},
{'lineNum':'  257','line':'			  break;','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  258','line':'			}','coverage':'           : ',},
{'lineNum':'  259','line':'			default:','coverage':'           : ',},
{'lineNum':'  260','line':'				error("Unrecognized option: -%c\\n", optopt);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  261','line':'				return usage();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  262','line':'			}','coverage':'           : ',},
{'lineNum':'  263','line':'		}','coverage':'           : ',},
{'lineNum':'  264','line':'','coverage':'           : ',},
{'lineNum':'  265','line':'		if (printUsage)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  266','line':'			return usage();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  267','line':'','coverage':'           : ',},
{'lineNum':'  268','line':'		afterOpts = optind;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  269','line':'','coverage':'           : ',},
{'lineNum':'  270','line':'		/* When tracing by PID, the filename is optional */','coverage':'           : ',},
{'lineNum':'  271','line':'		if (argc < afterOpts + extraNeeded)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  272','line':'			return usage();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  273','line':'','coverage':'           : ',},
{'lineNum':'  274','line':'		m_outDirectory = argv[afterOpts];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  275','line':'		if (m_outDirectory[m_outDirectory.size() - 1] != \'/\')','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  276','line':'			m_outDirectory += "/";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  277','line':'		if (argc >= afterOpts + 2)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  278','line':'		{','coverage':'           : ',},
{'lineNum':'  279','line':'			StringPair_t tmp = splitPath(argv[afterOpts + 1]);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  280','line':'','coverage':'           : ',},
{'lineNum':'  281','line':'			m_binaryPath = tmp.first;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  282','line':'			m_binaryName = tmp.second;','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  283','line':'		}','coverage':'           : ',},
{'lineNum':'  284','line':'		m_programArgs = &argv[afterOpts + 1];','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  285','line':'		m_argc = argc - afterOpts - 1;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  286','line':'','coverage':'           : ',},
{'lineNum':'  287','line':'','coverage':'           : ',},
{'lineNum':'  288','line':'		return true;','class':'linePartCov','coverage':'  2 /   4  : ',},
{'lineNum':'  289','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  290','line':'','coverage':'           : ',},
{'lineNum':'  291','line':'	const std::string &getOutDirectory()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  292','line':'	{','coverage':'           : ',},
{'lineNum':'  293','line':'		return m_outDirectory;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  294','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  295','line':'','coverage':'           : ',},
{'lineNum':'  296','line':'	const std::string &getBinaryName()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  297','line':'	{','coverage':'           : ',},
{'lineNum':'  298','line':'		return m_binaryName;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  299','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  300','line':'','coverage':'           : ',},
{'lineNum':'  301','line':'	const std::string &getBinaryPath()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  302','line':'	{','coverage':'           : ',},
{'lineNum':'  303','line':'		return m_binaryPath;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  304','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  305','line':'','coverage':'           : ',},
{'lineNum':'  306','line':'	const std::string &getKernelCoveragePath()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  307','line':'	{','coverage':'           : ',},
{'lineNum':'  308','line':'		return m_kernelCoveragePath;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  309','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  310','line':'','coverage':'           : ',},
{'lineNum':'  311','line':'	const std::string &getPythonCommand() const','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  312','line':'	{','coverage':'           : ',},
{'lineNum':'  313','line':'		return m_pythonCommand;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  314','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  315','line':'','coverage':'           : ',},
{'lineNum':'  316','line':'	std::list<uint64_t> getFixedBreakpoints()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  317','line':'	{','coverage':'           : ',},
{'lineNum':'  318','line':'		return m_fixedBreakpoints;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  319','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  320','line':'','coverage':'           : ',},
{'lineNum':'  321','line':'	unsigned int getAttachPid()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  322','line':'	{','coverage':'           : ',},
{'lineNum':'  323','line':'		return m_ptracePid;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  324','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  325','line':'','coverage':'           : ',},
{'lineNum':'  326','line':'	unsigned int getLowLimit()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  327','line':'	{','coverage':'           : ',},
{'lineNum':'  328','line':'		return m_lowLimit;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  329','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  330','line':'','coverage':'           : ',},
{'lineNum':'  331','line':'	unsigned int getHighLimit()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  332','line':'	{','coverage':'           : ',},
{'lineNum':'  333','line':'		return m_highLimit;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  334','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  335','line':'','coverage':'           : ',},
{'lineNum':'  336','line':'	const char **getArgv()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  337','line':'	{','coverage':'           : ',},
{'lineNum':'  338','line':'		return m_programArgs;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  339','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  340','line':'','coverage':'           : ',},
{'lineNum':'  341','line':'	unsigned int getArgc()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  342','line':'	{','coverage':'           : ',},
{'lineNum':'  343','line':'		return m_argc;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  344','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  345','line':'','coverage':'           : ',},
{'lineNum':'  346','line':'	std::map<unsigned int, std::string> &getExcludePattern()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  347','line':'	{','coverage':'           : ',},
{'lineNum':'  348','line':'		return m_excludePattern;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  349','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  350','line':'','coverage':'           : ',},
{'lineNum':'  351','line':'	std::map<unsigned int, std::string> &getOnlyIncludePattern()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  352','line':'	{','coverage':'           : ',},
{'lineNum':'  353','line':'		return m_onlyIncludePattern;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  354','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  355','line':'','coverage':'           : ',},
{'lineNum':'  356','line':'	std::map<unsigned int, std::string> &getOnlyIncludePath()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  357','line':'	{','coverage':'           : ',},
{'lineNum':'  358','line':'		return m_onlyIncludePath;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  359','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  360','line':'','coverage':'           : ',},
{'lineNum':'  361','line':'	std::map<unsigned int, std::string> &getExcludePath()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  362','line':'	{','coverage':'           : ',},
{'lineNum':'  363','line':'		return m_excludePath;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  364','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  365','line':'','coverage':'           : ',},
{'lineNum':'  366','line':'	unsigned int getPathStripLevel()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  367','line':'	{','coverage':'           : ',},
{'lineNum':'  368','line':'		return m_pathStripLevel;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  369','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  370','line':'','coverage':'           : ',},
{'lineNum':'  371','line':'	enum OutputType getOutputType()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  372','line':'	{','coverage':'           : ',},
{'lineNum':'  373','line':'		return m_outputType;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  374','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  375','line':'','coverage':'           : ',},
{'lineNum':'  376','line':'	const std::string& getOriginalPathPrefix()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  377','line':'	{','coverage':'           : ',},
{'lineNum':'  378','line':'		return m_originalPathPrefix;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  379','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  380','line':'','coverage':'           : ',},
{'lineNum':'  381','line':'	const std::string& getNewPathPrefix()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  382','line':'	{','coverage':'           : ',},
{'lineNum':'  383','line':'		return m_newPathPrefix;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  384','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  385','line':'','coverage':'           : ',},
{'lineNum':'  386','line':'	bool getParseSolibs()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  387','line':'	{','coverage':'           : ',},
{'lineNum':'  388','line':'		return m_parseSolibs;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  389','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  390','line':'','coverage':'           : ',},
{'lineNum':'  391','line':'	void setParseSolibs(bool on)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  392','line':'	{','coverage':'           : ',},
{'lineNum':'  393','line':'		m_parseSolibs = on;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  394','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  395','line':'','coverage':'           : ',},
{'lineNum':'  396','line':'	bool getExitFirstProcess()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  397','line':'	{','coverage':'           : ',},
{'lineNum':'  398','line':'		return m_exitFirstProcess;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  399','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  400','line':'','coverage':'           : ',},
{'lineNum':'  401','line':'	void setOutputType(enum OutputType type)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  402','line':'	{','coverage':'           : ',},
{'lineNum':'  403','line':'		m_outputType = type;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  404','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  405','line':'','coverage':'           : ',},
{'lineNum':'  406','line':'	unsigned int getOutputInterval()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  407','line':'	{','coverage':'           : ',},
{'lineNum':'  408','line':'		return m_outputInterval;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  409','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  410','line':'','coverage':'           : ',},
{'lineNum':'  411','line':'	RunMode_t getRunningMode()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  412','line':'	{','coverage':'           : ',},
{'lineNum':'  413','line':'		return m_runMode;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  414','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  415','line':'','coverage':'           : ',},
{'lineNum':'  416','line':'	// "private", but we ignore that in the unit test','coverage':'           : ',},
{'lineNum':'  417','line':'	typedef std::map<unsigned int, std::string> StrVecMap_t;','coverage':'           : ',},
{'lineNum':'  418','line':'	typedef std::pair<std::string, std::string> StringPair_t;','coverage':'           : ',},
{'lineNum':'  419','line':'','coverage':'           : ',},
{'lineNum':'  420','line':'	std::string uncommonOptions()','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  421','line':'	{','coverage':'           : ',},
{'lineNum':'  422','line':'		if (!m_printUncommon)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  423','line':'			return " --uncommon-options      print uncommon options for --help\\n";','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  424','line':'','coverage':'           : ',},
{'lineNum':'  425','line':'		return fmt(','coverage':'           : ',},
{'lineNum':'  426','line':'				" --replace-src-path=path replace the string found before the : with the string \\n"','coverage':'           : ',},
{'lineNum':'  427','line':'				"                         found after the :\\n"','coverage':'           : ',},
{'lineNum':'  428','line':'				" -t, --title=title       title for the coverage (default: filename)\\n"','coverage':'           : ',},
{'lineNum':'  429','line':'				" --path-strip-level=num  path levels to show for common paths (default: %u)\\n"','coverage':'           : ',},
{'lineNum':'  430','line':'				"\\n"','coverage':'           : ',},
{'lineNum':'  431','line':'				" --skip-solibs           don\'t parse shared libraries (default: parse solibs)\\n"','coverage':'           : ',},
{'lineNum':'  432','line':'				" --exit-first-process    exit when the first process exits, i.e., honor the\\n"','coverage':'           : ',},
{'lineNum':'  433','line':'				"                         behavior of daemons (default: wait until last)\\n"','coverage':'           : ',},
{'lineNum':'  434','line':'				" --output-interval=ms    Interval to produce output in milliseconds (0 to\\n"','coverage':'           : ',},
{'lineNum':'  435','line':'				"                         only output when kcov terminates, default %u)\\n"','coverage':'           : ',},
{'lineNum':'  436','line':'				"\\n"','coverage':'           : ',},
{'lineNum':'  437','line':'				" --debug=X               set kcov debugging level (max 31, default 0)\\n"','coverage':'           : ',},
{'lineNum':'  438','line':'				" --set-breakpoint=A[,..] manually set breakpoints\\n"','coverage':'           : ',},
{'lineNum':'  439','line':'				"\\n"','coverage':'           : ',},
{'lineNum':'  440','line':'				" --python-parser=cmd     Python parser to use (for python script coverage),\\n"','coverage':'           : ',},
{'lineNum':'  441','line':'				"                         default: %s",','coverage':'           : ',},
{'lineNum':'  442','line':'				m_pathStripLevel, m_outputInterval, m_pythonCommand.c_str()','coverage':'           : ',},
{'lineNum':'  443','line':'				);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  444','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  445','line':'','coverage':'           : ',},
{'lineNum':'  446','line':'	bool isInteger(std::string str)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  447','line':'	{','coverage':'           : ',},
{'lineNum':'  448','line':'		size_t pos;','coverage':'           : ',},
{'lineNum':'  449','line':'','coverage':'           : ',},
{'lineNum':'  450','line':'		try','coverage':'           : ',},
{'lineNum':'  451','line':'		{','coverage':'           : ',},
{'lineNum':'  452','line':'			stoul(str, &pos);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  453','line':'		}','coverage':'           : ',},
{'lineNum':'  454','line':'		catch(std::invalid_argument &e)','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  455','line':'		{','coverage':'           : ',},
{'lineNum':'  456','line':'			return false;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  457','line':'		}','coverage':'           : ',},
{'lineNum':'  458','line':'','coverage':'           : ',},
{'lineNum':'  459','line':'		return pos == str.size();','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  460','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  461','line':'','coverage':'           : ',},
{'lineNum':'  462','line':'	void expandPath(StrVecMap_t &paths)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  463','line':'	{','coverage':'           : ',},
{'lineNum':'  464','line':'		for (auto &it : paths) {','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  465','line':'			std::string &s = it.second;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  466','line':'','coverage':'           : ',},
{'lineNum':'  467','line':'			if (s[0] == \'~\')','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  468','line':'				s = get_home() + s.substr(1, s.size());','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  469','line':'			it.second = s;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  470','line':'		}','coverage':'           : ',},
{'lineNum':'  471','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  472','line':'','coverage':'           : ',},
{'lineNum':'  473','line':'	StrVecMap_t getCommaSeparatedList(std::string str)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  474','line':'	{','coverage':'           : ',},
{'lineNum':'  475','line':'		StrVecMap_t out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  476','line':'','coverage':'           : ',},
{'lineNum':'  477','line':'		if (str.find(\',\') == std::string::npos) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  478','line':'			out[0] = str;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  479','line':'			return out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  480','line':'		}','coverage':'           : ',},
{'lineNum':'  481','line':'','coverage':'           : ',},
{'lineNum':'  482','line':'		size_t pos, lastPos;','coverage':'           : ',},
{'lineNum':'  483','line':'		unsigned int n = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  484','line':'','coverage':'           : ',},
{'lineNum':'  485','line':'		lastPos = 0;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  486','line':'		for (pos = str.find_first_of(",");','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  487','line':'				pos != std::string::npos;','coverage':'           : ',},
{'lineNum':'  488','line':'				pos = str.find_first_of(",", pos + 1)) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  489','line':'			std::string cur = str.substr(lastPos, pos - lastPos);','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  490','line':'','coverage':'           : ',},
{'lineNum':'  491','line':'			out[n++] = cur;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  492','line':'			lastPos = pos + 1;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  493','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  494','line':'		out[n] = str.substr(lastPos, str.size() - lastPos);','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  495','line':'','coverage':'           : ',},
{'lineNum':'  496','line':'		return out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  497','line':'	}','class':'lineCov','coverage':'  2 /   2  : ',},
{'lineNum':'  498','line':'','coverage':'           : ',},
{'lineNum':'  499','line':'	StringPair_t splitPath(const char *pathStr)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  500','line':'	{','coverage':'           : ',},
{'lineNum':'  501','line':'		StringPair_t out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  502','line':'		std::string path(pathStr);','class':'linePartCov','coverage':'  2 /   3  : ',},
{'lineNum':'  503','line':'','coverage':'           : ',},
{'lineNum':'  504','line':'		size_t pos = path.rfind(\'/\');','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  505','line':'','coverage':'           : ',},
{'lineNum':'  506','line':'		out.first = "";','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  507','line':'		out.second = path;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  508','line':'		if (pos != std::string::npos) {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  509','line':'			out.first= path.substr(0, pos + 1);','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  510','line':'			out.second = path.substr(pos + 1, std::string::npos);','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  511','line':'		}','coverage':'           : ',},
{'lineNum':'  512','line':'','coverage':'           : ',},
{'lineNum':'  513','line':'		return out;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  514','line':'	}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  515','line':'','coverage':'           : ',},
{'lineNum':'  516','line':'','coverage':'           : ',},
{'lineNum':'  517','line':'	unsigned int m_lowLimit;','coverage':'           : ',},
{'lineNum':'  518','line':'	unsigned int m_highLimit;','coverage':'           : ',},
{'lineNum':'  519','line':'	unsigned int m_pathStripLevel;','coverage':'           : ',},
{'lineNum':'  520','line':'	unsigned int m_ptracePid;','coverage':'           : ',},
{'lineNum':'  521','line':'	std::string m_outDirectory;','coverage':'           : ',},
{'lineNum':'  522','line':'	std::string m_binaryName;','coverage':'           : ',},
{'lineNum':'  523','line':'	std::string m_binaryPath;','coverage':'           : ',},
{'lineNum':'  524','line':'	std::string m_pythonCommand;','coverage':'           : ',},
{'lineNum':'  525','line':'	std::string m_kernelCoveragePath;','coverage':'           : ',},
{'lineNum':'  526','line':'	const char **m_programArgs;','coverage':'           : ',},
{'lineNum':'  527','line':'	unsigned int m_argc;','coverage':'           : ',},
{'lineNum':'  528','line':'	std::string m_title;','coverage':'           : ',},
{'lineNum':'  529','line':'	std::string m_originalPathPrefix;','coverage':'           : ',},
{'lineNum':'  530','line':'	std::string m_newPathPrefix;','coverage':'           : ',},
{'lineNum':'  531','line':'	bool m_parseSolibs;','coverage':'           : ',},
{'lineNum':'  532','line':'	bool m_exitFirstProcess;','coverage':'           : ',},
{'lineNum':'  533','line':'	StrVecMap_t m_excludePattern;','coverage':'           : ',},
{'lineNum':'  534','line':'	StrVecMap_t m_onlyIncludePattern;','coverage':'           : ',},
{'lineNum':'  535','line':'	StrVecMap_t m_excludePath;','coverage':'           : ',},
{'lineNum':'  536','line':'	StrVecMap_t m_onlyIncludePath;','coverage':'           : ',},
{'lineNum':'  537','line':'	enum OutputType m_outputType;','coverage':'           : ',},
{'lineNum':'  538','line':'	unsigned int m_outputInterval;','coverage':'           : ',},
{'lineNum':'  539','line':'	RunMode_t m_runMode;','coverage':'           : ',},
{'lineNum':'  540','line':'	bool m_printUncommon;','coverage':'           : ',},
{'lineNum':'  541','line':'	std::list<uint64_t> m_fixedBreakpoints;','coverage':'           : ',},
{'lineNum':'  542','line':'};','coverage':'           : ',},
{'lineNum':'  543','line':'','coverage':'           : ',},
{'lineNum':'  544','line':'','coverage':'           : ',},
{'lineNum':'  545','line':'IConfiguration & IConfiguration::getInstance()','coverage':'           : ',},
{'lineNum':'  546','line':'{','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  547','line':'	static Configuration *g_instance;','coverage':'           : ',},
{'lineNum':'  548','line':'','coverage':'           : ',},
{'lineNum':'  549','line':'	if (!g_instance)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  550','line':'		g_instance = new Configuration();','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  551','line':'','coverage':'           : ',},
{'lineNum':'  552','line':'	return *g_instance;','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  553','line':'}','class':'lineCov','coverage':'  1 /   1  : ',},
];
var merged_data = [];
