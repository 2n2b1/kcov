var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 20, 'covered' : 18,};
var data = [
{'lineNum':'    1','line':'#pragma once','coverage':'           : ',},
{'lineNum':'    2','line':'','coverage':'           : ',},
{'lineNum':'    3','line':'#include <stdint.h>','coverage':'           : ',},
{'lineNum':'    4','line':'','coverage':'           : ',},
{'lineNum':'    5','line':'// From http://stackoverflow.com/questions/105252/how-do-i-convert-between-big-endian-and-little-endian-values-in-c','coverage':'           : ',},
{'lineNum':'    6','line':'template <typename T>','coverage':'           : ',},
{'lineNum':'    7','line':'T swap_endian(T u)','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'    8','line':'{','coverage':'           : ',},
{'lineNum':'    9','line':'	union','coverage':'           : ',},
{'lineNum':'   10','line':'	{','coverage':'           : ',},
{'lineNum':'   11','line':'		T u;','coverage':'           : ',},
{'lineNum':'   12','line':'		unsigned char u8[sizeof(T)];','coverage':'           : ',},
{'lineNum':'   13','line':'	} source, dest;','coverage':'           : ',},
{'lineNum':'   14','line':'','coverage':'           : ',},
{'lineNum':'   15','line':'	source.u = u;','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'   16','line':'','coverage':'           : ',},
{'lineNum':'   17','line':'	for (size_t k = 0; k < sizeof(T); k++)','class':'linePartCov','coverage':'  4 /  10  : ',},
{'lineNum':'   18','line':'		dest.u8[k] = source.u8[sizeof(T) - k - 1];','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'   19','line':'','coverage':'           : ',},
{'lineNum':'   20','line':'	return dest.u;','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'   21','line':'}','class':'linePartCov','coverage':'  2 /  10  : ',},
{'lineNum':'   22','line':'','coverage':'           : ',},
{'lineNum':'   23','line':'','coverage':'           : ',},
{'lineNum':'   24','line':'static bool cpu_is_little_endian()','coverage':'           : ',},
{'lineNum':'   25','line':'{','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   26','line':'	static uint16_t data = 0x1122;','coverage':'           : ',},
{'lineNum':'   27','line':'	uint8_t *p = (uint8_t *)&data;','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   28','line':'','coverage':'           : ',},
{'lineNum':'   29','line':'	return p[0] == 0x22;','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   30','line':'}','class':'linePartCov','coverage':'  1 /   3  : ',},
{'lineNum':'   31','line':'','coverage':'           : ',},
{'lineNum':'   32','line':'template <typename T>','coverage':'           : ',},
{'lineNum':'   33','line':'T to_be(T u)','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'   34','line':'{','coverage':'           : ',},
{'lineNum':'   35','line':'	if (cpu_is_little_endian())','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'   36','line':'		return swap_endian<T>(u);','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'   37','line':'	else','coverage':'           : ',},
{'lineNum':'   38','line':'		return u;','class':'lineNoCov','coverage':'  0 /   5  : ',},
{'lineNum':'   39','line':'}','class':'linePartCov','coverage':'  2 /  10  : ',},
{'lineNum':'   40','line':'','coverage':'           : ',},
{'lineNum':'   41','line':'template <typename T>','coverage':'           : ',},
{'lineNum':'   42','line':'T be_to_host(T u)','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'   43','line':'{','coverage':'           : ',},
{'lineNum':'   44','line':'	if (cpu_is_little_endian())','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'   45','line':'		return swap_endian<T>(u);','class':'linePartCov','coverage':'  2 /   5  : ',},
{'lineNum':'   46','line':'	else','coverage':'           : ',},
{'lineNum':'   47','line':'		return u;','class':'lineNoCov','coverage':'  0 /   5  : ',},
{'lineNum':'   48','line':'}','class':'linePartCov','coverage':'  2 /  10  : ',},
{'lineNum':'   49','line':'','coverage':'           : ',},
{'lineNum':'   50','line':'template <typename T>','coverage':'           : ',},
{'lineNum':'   51','line':'T le_to_host(T u)','coverage':'           : ',},
{'lineNum':'   52','line':'{','coverage':'           : ',},
{'lineNum':'   53','line':'	if (cpu_is_little_endian())','coverage':'           : ',},
{'lineNum':'   54','line':'		return u;','coverage':'           : ',},
{'lineNum':'   55','line':'	else','coverage':'           : ',},
{'lineNum':'   56','line':'		return swap_endian<T>(u);','coverage':'           : ',},
{'lineNum':'   57','line':'}','coverage':'           : ',},
];
var merged_data = [];
