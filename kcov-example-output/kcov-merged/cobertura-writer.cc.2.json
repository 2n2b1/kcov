var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 86, 'covered' : 0,};
var data = [
{'lineNum':'    1','line':'namespace std { class type_info; }','coverage':'           : ',},
{'lineNum':'    2','line':'','coverage':'           : ',},
{'lineNum':'    3','line':'#include <reporter.hh>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <file-parser.hh>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <configuration.hh>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <writer.hh>','coverage':'           : ',},
{'lineNum':'    7','line':'#include <utils.hh>','coverage':'           : ',},
{'lineNum':'    8','line':'','coverage':'           : ',},
{'lineNum':'    9','line':'#include <string>','coverage':'           : ',},
{'lineNum':'   10','line':'#include <list>','coverage':'           : ',},
{'lineNum':'   11','line':'#include <unordered_map>','coverage':'           : ',},
{'lineNum':'   12','line':'','coverage':'           : ',},
{'lineNum':'   13','line':'#include "writer-base.hh"','coverage':'           : ',},
{'lineNum':'   14','line':'','coverage':'           : ',},
{'lineNum':'   15','line':'using namespace kcov;','coverage':'           : ',},
{'lineNum':'   16','line':'','coverage':'           : ',},
{'lineNum':'   17','line':'class CoberturaWriter : public WriterBase','class':'lineNoCov','coverage':'  0 /   8  : ',},
{'lineNum':'   18','line':'{','coverage':'           : ',},
{'lineNum':'   19','line':'public:','coverage':'           : ',},
{'lineNum':'   20','line':'	CoberturaWriter(IFileParser &parser, IReporter &reporter,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   21','line':'			const std::string &outFile) :','coverage':'           : ',},
{'lineNum':'   22','line':'		WriterBase(parser, reporter),','coverage':'           : ',},
{'lineNum':'   23','line':'		m_outFile(outFile)','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   24','line':'	{','coverage':'           : ',},
{'lineNum':'   25','line':'	}','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   26','line':'','coverage':'           : ',},
{'lineNum':'   27','line':'	void onStartup()','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   28','line':'	{','coverage':'           : ',},
{'lineNum':'   29','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   30','line':'','coverage':'           : ',},
{'lineNum':'   31','line':'	void onStop()','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   32','line':'	{','coverage':'           : ',},
{'lineNum':'   33','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   34','line':'','coverage':'           : ',},
{'lineNum':'   35','line':'	void write()','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   36','line':'	{','coverage':'           : ',},
{'lineNum':'   37','line':'		std::string str;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   38','line':'','coverage':'           : ',},
{'lineNum':'   39','line':'		unsigned int nTotalExecutedLines = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   40','line':'		unsigned int nTotalCodeLines = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   41','line':'','coverage':'           : ',},
{'lineNum':'   42','line':'		setupCommonPaths();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   43','line':'','coverage':'           : ',},
{'lineNum':'   44','line':'		for (const auto &it : m_files) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   45','line':'			auto file = it.second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   46','line':'','coverage':'           : ',},
{'lineNum':'   47','line':'			str = str + writeOne(file);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   48','line':'			nTotalCodeLines += file->m_codeLines;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   49','line':'			nTotalExecutedLines += file->m_executedLines;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   50','line':'		}','coverage':'           : ',},
{'lineNum':'   51','line':'','coverage':'           : ',},
{'lineNum':'   52','line':'		str = getHeader(nTotalCodeLines, nTotalExecutedLines) + str + getFooter();','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   53','line':'','coverage':'           : ',},
{'lineNum':'   54','line':'		write_file((void *)str.c_str(), str.size(),','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   55','line':'				"%s", m_outFile.c_str());','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   56','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   57','line':'','coverage':'           : ',},
{'lineNum':'   58','line':'private:','coverage':'           : ',},
{'lineNum':'   59','line':'	std::string mangleFileName(std::string name)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   60','line':'	{','coverage':'           : ',},
{'lineNum':'   61','line':'		std::string out = name;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   62','line':'','coverage':'           : ',},
{'lineNum':'   63','line':'		for (size_t pos = 0;','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   64','line':'				pos < name.size();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'				pos++)','coverage':'           : ',},
{'lineNum':'   66','line':'		{','coverage':'           : ',},
{'lineNum':'   67','line':'			if (out[pos] == \'.\' ||','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   68','line':'					out[pos] == \'-\')','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   69','line':'				out[pos] = \'_\';','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   70','line':'		}','coverage':'           : ',},
{'lineNum':'   71','line':'','coverage':'           : ',},
{'lineNum':'   72','line':'		return out;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   73','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   74','line':'','coverage':'           : ',},
{'lineNum':'   75','line':'	std::string writeOne(File *file)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   76','line':'	{','coverage':'           : ',},
{'lineNum':'   77','line':'		std::string out;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   78','line':'','coverage':'           : ',},
{'lineNum':'   79','line':'		std::string mangledName = mangleFileName(file->m_fileName);','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   80','line':'','coverage':'           : ',},
{'lineNum':'   81','line':'		unsigned int nExecutedLines = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   82','line':'		unsigned int nCodeLines = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   83','line':'','coverage':'           : ',},
{'lineNum':'   84','line':'		for (unsigned int n = 1; n < file->m_lastLineNr; n++) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   85','line':'			std::string line = file->m_lineMap[n];','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   86','line':'','coverage':'           : ',},
{'lineNum':'   87','line':'			if (!m_reporter.lineIsCode(file->m_name, n))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   88','line':'					continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   89','line':'','coverage':'           : ',},
{'lineNum':'   90','line':'			IReporter::LineExecutionCount cnt =','coverage':'           : ',},
{'lineNum':'   91','line':'					m_reporter.getLineExecutionCount(file->m_name, n);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   92','line':'','coverage':'           : ',},
{'lineNum':'   93','line':'			nExecutedLines += !!cnt.m_hits;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   94','line':'			nCodeLines++;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   95','line':'','coverage':'           : ',},
{'lineNum':'   96','line':'			out = out +','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   97','line':'					"						<line number=\\"" + fmt("%u", n) +','class':'lineNoCov','coverage':'  0 /   6  : ',},
{'lineNum':'   98','line':'					"\\" hits=\\"" + fmt("%u", cnt.m_hits) +','class':'lineNoCov','coverage':'  0 /   6  : ',},
{'lineNum':'   99','line':'					"\\"/>\\n";','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  100','line':'','coverage':'           : ',},
{'lineNum':'  101','line':'			// Update the execution count','coverage':'           : ',},
{'lineNum':'  102','line':'			file->m_executedLines = nExecutedLines;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  103','line':'			file->m_codeLines = nCodeLines;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  104','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  105','line':'','coverage':'           : ',},
{'lineNum':'  106','line':'		if (nCodeLines == 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  107','line':'			nCodeLines = 1;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  108','line':'','coverage':'           : ',},
{'lineNum':'  109','line':'		std::string filename = file->m_name;','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  110','line':'		size_t pos = filename.find(m_commonPath);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  111','line':'','coverage':'           : ',},
{'lineNum':'  112','line':'		if (pos != std::string::npos && filename.size() > m_commonPath.size())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  113','line':'			filename = filename.substr(m_commonPath.size() + 1);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  114','line':'','coverage':'           : ',},
{'lineNum':'  115','line':'		out = "				<class name=\\"" + mangledName + "\\" filename=\\"" +','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  116','line':'				filename + "\\" line-rate=\\"" +','class':'lineNoCov','coverage':'  0 /   6  : ',},
{'lineNum':'  117','line':'				fmt("%.3f", nExecutedLines / (float)nCodeLines) +','class':'lineNoCov','coverage':'  0 /   4  : ',},
{'lineNum':'  118','line':'				"\\">\\n" +','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  119','line':'				"					<lines>\\n" +','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  120','line':'				out +','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  121','line':'				"					</lines>\\n"','coverage':'           : ',},
{'lineNum':'  122','line':'				"				</class>\\n";','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  123','line':'','coverage':'           : ',},
{'lineNum':'  124','line':'		return out;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  125','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  126','line':'','coverage':'           : ',},
{'lineNum':'  127','line':'	std::string getHeader(unsigned int nCodeLines, unsigned int nExecutedLines)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  128','line':'	{','coverage':'           : ',},
{'lineNum':'  129','line':'		time_t t;','coverage':'           : ',},
{'lineNum':'  130','line':'		struct tm *tm;','coverage':'           : ',},
{'lineNum':'  131','line':'		char date_buf[80];','coverage':'           : ',},
{'lineNum':'  132','line':'','coverage':'           : ',},
{'lineNum':'  133','line':'		t = time(nullptr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  134','line':'		tm = localtime(&t);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  135','line':'		strftime(date_buf, sizeof(date_buf), "%s", tm);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  136','line':'','coverage':'           : ',},
{'lineNum':'  137','line':'		if (nCodeLines == 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  138','line':'			nCodeLines = 1;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  139','line':'','coverage':'           : ',},
{'lineNum':'  140','line':'		std::string lineRate = fmt("%.3f", nExecutedLines / (float)nCodeLines);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  141','line':'','coverage':'           : ',},
{'lineNum':'  142','line':'		return','coverage':'           : ',},
{'lineNum':'  143','line':'				"<?xml version=\\"1.0\\" ?>\\n"','coverage':'           : ',},
{'lineNum':'  144','line':'				"<!DOCTYPE coverage SYSTEM \'http://cobertura.sourceforge.net/xml/coverage-03.dtd\'>\\n"','coverage':'           : ',},
{'lineNum':'  145','line':'				"<coverage line-rate=\\"" + lineRate + "\\" version=\\"1.9\\" timestamp=\\"" + std::string(date_buf) + "\\">\\n"','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  146','line':'				"	<sources>\\n"','coverage':'           : ',},
{'lineNum':'  147','line':'				"		<source>" + m_commonPath + "/</source>\\n"','class':'lineNoCov','coverage':'  0 /   4  : ',},
{'lineNum':'  148','line':'				"	</sources>\\n"','coverage':'           : ',},
{'lineNum':'  149','line':'				"	<packages>\\n"','coverage':'           : ',},
{'lineNum':'  150','line':'				"		<package name=\\"" +','class':'lineNoCov','coverage':'  0 /   6  : ',},
{'lineNum':'  151','line':'				mangleFileName(IConfiguration::getInstance().getBinaryName()) +','class':'lineNoCov','coverage':'  0 /   4  : ',},
{'lineNum':'  152','line':'				"\\" line-rate=\\"" + lineRate + "\\" branch-rate=\\"1.0\\" complexity=\\"1.0\\">\\n"','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  153','line':'				"			<classes>\\n"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  154','line':'				;','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  155','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  156','line':'','coverage':'           : ',},
{'lineNum':'  157','line':'	std::string getFooter()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  158','line':'	{','coverage':'           : ',},
{'lineNum':'  159','line':'		return','coverage':'           : ',},
{'lineNum':'  160','line':'				"			</classes>\\n"','coverage':'           : ',},
{'lineNum':'  161','line':'				"		</package>\\n"','coverage':'           : ',},
{'lineNum':'  162','line':'				"	</packages>\\n"','coverage':'           : ',},
{'lineNum':'  163','line':'				"</coverage>\\n";','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  164','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  165','line':'','coverage':'           : ',},
{'lineNum':'  166','line':'','coverage':'           : ',},
{'lineNum':'  167','line':'	std::string m_outFile;','coverage':'           : ',},
{'lineNum':'  168','line':'};','coverage':'           : ',},
{'lineNum':'  169','line':'','coverage':'           : ',},
{'lineNum':'  170','line':'namespace kcov','coverage':'           : ',},
{'lineNum':'  171','line':'{','coverage':'           : ',},
{'lineNum':'  172','line':'	IWriter &createCoberturaWriter(IFileParser &parser, IReporter &reporter,','coverage':'           : ',},
{'lineNum':'  173','line':'			const std::string &outFile)','coverage':'           : ',},
{'lineNum':'  174','line':'	{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  175','line':'		return *new CoberturaWriter(parser, reporter, outFile);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  176','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  177','line':'}','coverage':'           : ',},
];
var merged_data = [];
