var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 158, 'covered' : 2,};
var data = [
{'lineNum':'    1','line':'#include <reporter.hh>','coverage':'           : ',},
{'lineNum':'    2','line':'#include <file-parser.hh>','coverage':'           : ',},
{'lineNum':'    3','line':'#include <collector.hh>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <utils.hh>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <filter.hh>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <lineid.hh>','coverage':'           : ',},
{'lineNum':'    7','line':'','coverage':'           : ',},
{'lineNum':'    8','line':'#include <string>','coverage':'           : ',},
{'lineNum':'    9','line':'#include <list>','coverage':'           : ',},
{'lineNum':'   10','line':'#include <unordered_map>','coverage':'           : ',},
{'lineNum':'   11','line':'','coverage':'           : ',},
{'lineNum':'   12','line':'#include "swap-endian.hh"','coverage':'           : ',},
{'lineNum':'   13','line':'','coverage':'           : ',},
{'lineNum':'   14','line':'using namespace kcov;','coverage':'           : ',},
{'lineNum':'   15','line':'','coverage':'           : ',},
{'lineNum':'   16','line':'#define KCOV_MAGIC      0x6b636f76 /* "kcov" */','coverage':'           : ',},
{'lineNum':'   17','line':'#define KCOV_DB_VERSION 2','coverage':'           : ',},
{'lineNum':'   18','line':'','coverage':'           : ',},
{'lineNum':'   19','line':'struct marshalHeaderStruct','coverage':'           : ',},
{'lineNum':'   20','line':'{','coverage':'           : ',},
{'lineNum':'   21','line':'	uint32_t magic;','coverage':'           : ',},
{'lineNum':'   22','line':'	uint32_t db_version;','coverage':'           : ',},
{'lineNum':'   23','line':'	uint64_t checksum;','coverage':'           : ',},
{'lineNum':'   24','line':'};','coverage':'           : ',},
{'lineNum':'   25','line':'','coverage':'           : ',},
{'lineNum':'   26','line':'class Reporter : public IReporter, public IFileParser::ILineListener, public ICollector::IListener','coverage':'           : ',},
{'lineNum':'   27','line':'{','coverage':'           : ',},
{'lineNum':'   28','line':'public:','coverage':'           : ',},
{'lineNum':'   29','line':'	Reporter(IFileParser &fileParser, ICollector &collector, IFilter &filter) :','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   30','line':'		m_fileParser(fileParser), m_collector(collector), m_filter(filter)','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   31','line':'	{','coverage':'           : ',},
{'lineNum':'   32','line':'		m_fileParser.registerLineListener(*this);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   33','line':'		m_collector.registerListener(*this);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   34','line':'	}','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   35','line':'','coverage':'           : ',},
{'lineNum':'   36','line':'	~Reporter()','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   37','line':'	{','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   38','line':'		stop();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   39','line':'	}','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   40','line':'','coverage':'           : ',},
{'lineNum':'   41','line':'	bool fileIsIncluded(const std::string &file)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   42','line':'	{','coverage':'           : ',},
{'lineNum':'   43','line':'		return m_filter.runFilters(file);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   44','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   45','line':'','coverage':'           : ',},
{'lineNum':'   46','line':'	bool lineIsCode(const std::string &file, unsigned int lineNr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   47','line':'	{','coverage':'           : ',},
{'lineNum':'   48','line':'		bool out;','coverage':'           : ',},
{'lineNum':'   49','line':'','coverage':'           : ',},
{'lineNum':'   50','line':'		out =  m_lines.find(LineId(file, lineNr)) != m_lines.end();','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   51','line':'','coverage':'           : ',},
{'lineNum':'   52','line':'		return out;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   53','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   54','line':'','coverage':'           : ',},
{'lineNum':'   55','line':'	LineExecutionCount getLineExecutionCount(const std::string &file, unsigned int lineNr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   56','line':'	{','coverage':'           : ',},
{'lineNum':'   57','line':'		unsigned int hits = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   58','line':'		unsigned int possibleHits = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   59','line':'','coverage':'           : ',},
{'lineNum':'   60','line':'		LineMap_t::iterator it = m_lines.find(LineId(file, lineNr));','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   61','line':'','coverage':'           : ',},
{'lineNum':'   62','line':'		if (it != m_lines.end()) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   63','line':'			Line *line = it->second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   64','line':'','coverage':'           : ',},
{'lineNum':'   65','line':'			hits = line->hits();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   66','line':'			possibleHits = line->possibleHits();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   67','line':'		}','coverage':'           : ',},
{'lineNum':'   68','line':'','coverage':'           : ',},
{'lineNum':'   69','line':'		return LineExecutionCount(hits,','coverage':'           : ',},
{'lineNum':'   70','line':'				possibleHits);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   71','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   72','line':'','coverage':'           : ',},
{'lineNum':'   73','line':'	ExecutionSummary getExecutionSummary()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   74','line':'	{','coverage':'           : ',},
{'lineNum':'   75','line':'		unsigned int executedLines = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   76','line':'		unsigned int nrLines = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   77','line':'','coverage':'           : ',},
{'lineNum':'   78','line':'		for (const auto &it : m_lines) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   79','line':'			Line *cur = it.second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'','coverage':'           : ',},
{'lineNum':'   81','line':'			// Don\'t include non-existing files in summary','coverage':'           : ',},
{'lineNum':'   82','line':'			if (!file_exists(cur->m_file))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   83','line':'				continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   84','line':'','coverage':'           : ',},
{'lineNum':'   85','line':'			if (!m_filter.runFilters(cur->m_file))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   86','line':'				continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   87','line':'','coverage':'           : ',},
{'lineNum':'   88','line':'			executedLines += !!cur->hits();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   89','line':'			nrLines++;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   90','line':'		}','coverage':'           : ',},
{'lineNum':'   91','line':'','coverage':'           : ',},
{'lineNum':'   92','line':'		return ExecutionSummary(nrLines, executedLines);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   93','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   94','line':'','coverage':'           : ',},
{'lineNum':'   95','line':'	void *marshal(size_t *szOut)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   96','line':'	{','coverage':'           : ',},
{'lineNum':'   97','line':'		size_t sz = getMarshalSize();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   98','line':'		void *start;','coverage':'           : ',},
{'lineNum':'   99','line':'		uint8_t *p;','coverage':'           : ',},
{'lineNum':'  100','line':'','coverage':'           : ',},
{'lineNum':'  101','line':'		start = malloc(sz);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  102','line':'		if (!start)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  103','line':'			return nullptr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  104','line':'		memset(start, 0, sz);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  105','line':'		p = marshalHeader((uint8_t *)start);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  106','line':'','coverage':'           : ',},
{'lineNum':'  107','line':'		for (const auto &it : m_lines) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  108','line':'			Line *cur = it.second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  109','line':'','coverage':'           : ',},
{'lineNum':'  110','line':'			p = cur->marshal(p);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  111','line':'		}','coverage':'           : ',},
{'lineNum':'  112','line':'','coverage':'           : ',},
{'lineNum':'  113','line':'		*szOut = sz;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  114','line':'','coverage':'           : ',},
{'lineNum':'  115','line':'		return start;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  116','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  117','line':'','coverage':'           : ',},
{'lineNum':'  118','line':'	bool unMarshal(void *data, size_t sz)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  119','line':'	{','coverage':'           : ',},
{'lineNum':'  120','line':'		uint8_t *start = (uint8_t *)data;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  121','line':'		uint8_t *p = start;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  122','line':'		size_t n;','coverage':'           : ',},
{'lineNum':'  123','line':'','coverage':'           : ',},
{'lineNum':'  124','line':'		p = unMarshalHeader(p);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  125','line':'','coverage':'           : ',},
{'lineNum':'  126','line':'		if (!p)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  127','line':'			return false;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  128','line':'','coverage':'           : ',},
{'lineNum':'  129','line':'		n = (sz - (p - start)) / getMarshalEntrySize();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  130','line':'','coverage':'           : ',},
{'lineNum':'  131','line':'		for (size_t i = 0; i < n; i++) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  132','line':'			unsigned long addr;','coverage':'           : ',},
{'lineNum':'  133','line':'			unsigned int hits;','coverage':'           : ',},
{'lineNum':'  134','line':'','coverage':'           : ',},
{'lineNum':'  135','line':'			p = Line::unMarshal(p, &addr, &hits);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  136','line':'			AddrToLineMap_t::iterator it = m_addrToLine.find(addr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  137','line':'','coverage':'           : ',},
{'lineNum':'  138','line':'			if (it == m_addrToLine.end())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  139','line':'				continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  140','line':'','coverage':'           : ',},
{'lineNum':'  141','line':'			Line *line = it->second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  142','line':'','coverage':'           : ',},
{'lineNum':'  143','line':'			if (!hits)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  144','line':'				continue;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  145','line':'','coverage':'           : ',},
{'lineNum':'  146','line':'			// Really an internal error, but let\'s not hang on corrupted data','coverage':'           : ',},
{'lineNum':'  147','line':'			if (hits > line->possibleHits())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  148','line':'				hits = line->possibleHits();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  149','line':'','coverage':'           : ',},
{'lineNum':'  150','line':'			// Register all hits for this address','coverage':'           : ',},
{'lineNum':'  151','line':'			line->registerHit(addr, hits);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  152','line':'		}','coverage':'           : ',},
{'lineNum':'  153','line':'','coverage':'           : ',},
{'lineNum':'  154','line':'		return true;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  155','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  156','line':'','coverage':'           : ',},
{'lineNum':'  157','line':'	virtual void stop()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  158','line':'	{','coverage':'           : ',},
{'lineNum':'  159','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  160','line':'','coverage':'           : ',},
{'lineNum':'  161','line':'','coverage':'           : ',},
{'lineNum':'  162','line':'private:','coverage':'           : ',},
{'lineNum':'  163','line':'	size_t getMarshalEntrySize()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  164','line':'	{','coverage':'           : ',},
{'lineNum':'  165','line':'		return 2 * sizeof(uint64_t);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  166','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  167','line':'','coverage':'           : ',},
{'lineNum':'  168','line':'	size_t getMarshalSize()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  169','line':'	{','coverage':'           : ',},
{'lineNum':'  170','line':'		size_t out = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  171','line':'','coverage':'           : ',},
{'lineNum':'  172','line':'		for (const auto &it : m_lines) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  173','line':'			Line *cur = it.second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  174','line':'','coverage':'           : ',},
{'lineNum':'  175','line':'			out += cur->m_addrs.size();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  176','line':'		}','coverage':'           : ',},
{'lineNum':'  177','line':'','coverage':'           : ',},
{'lineNum':'  178','line':'','coverage':'           : ',},
{'lineNum':'  179','line':'		return out * getMarshalEntrySize() + sizeof(struct marshalHeaderStruct);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  180','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  181','line':'','coverage':'           : ',},
{'lineNum':'  182','line':'	uint8_t *marshalHeader(uint8_t *p)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  183','line':'	{','coverage':'           : ',},
{'lineNum':'  184','line':'		struct marshalHeaderStruct *hdr = (struct marshalHeaderStruct *)p;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  185','line':'','coverage':'           : ',},
{'lineNum':'  186','line':'		hdr->magic = to_be<uint32_t>(KCOV_MAGIC);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  187','line':'		hdr->db_version = to_be<uint32_t>(KCOV_DB_VERSION);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  188','line':'		hdr->checksum = to_be<uint64_t>(m_fileParser.getChecksum());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  189','line':'','coverage':'           : ',},
{'lineNum':'  190','line':'		return p + sizeof(struct marshalHeaderStruct);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  191','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  192','line':'','coverage':'           : ',},
{'lineNum':'  193','line':'	uint8_t *unMarshalHeader(uint8_t *p)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  194','line':'	{','coverage':'           : ',},
{'lineNum':'  195','line':'		struct marshalHeaderStruct *hdr = (struct marshalHeaderStruct *)p;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  196','line':'','coverage':'           : ',},
{'lineNum':'  197','line':'		if (be_to_host<uint32_t>(hdr->magic) != KCOV_MAGIC)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  198','line':'			return nullptr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  199','line':'','coverage':'           : ',},
{'lineNum':'  200','line':'		if (be_to_host<uint32_t>(hdr->db_version) != KCOV_DB_VERSION)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  201','line':'			return nullptr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  202','line':'','coverage':'           : ',},
{'lineNum':'  203','line':'		if (be_to_host<uint64_t>(hdr->checksum) != m_fileParser.getChecksum())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  204','line':'			return nullptr;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  205','line':'','coverage':'           : ',},
{'lineNum':'  206','line':'		return p + sizeof(struct marshalHeaderStruct);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  207','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  208','line':'','coverage':'           : ',},
{'lineNum':'  209','line':'	/* Called when the file is parsed */','coverage':'           : ',},
{'lineNum':'  210','line':'	void onLine(const std::string &file, unsigned int lineNr, unsigned long addr)','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  211','line':'	{','coverage':'           : ',},
{'lineNum':'  212','line':'		if (!m_filter.runFilters(file))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  213','line':'			return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  214','line':'','coverage':'           : ',},
{'lineNum':'  215','line':'		kcov_debug(INFO_MSG, "REPORT %s:%u at 0x%lx\\n",','coverage':'           : ',},
{'lineNum':'  216','line':'				file.c_str(), lineNr, (unsigned long)addr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  217','line':'		LineId key(file, lineNr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  218','line':'','coverage':'           : ',},
{'lineNum':'  219','line':'		LineMap_t::iterator it = m_lines.find(key);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  220','line':'		Line *line;','coverage':'           : ',},
{'lineNum':'  221','line':'','coverage':'           : ',},
{'lineNum':'  222','line':'		if (it == m_lines.end()) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  223','line':'			line = new Line(key);','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  224','line':'','coverage':'           : ',},
{'lineNum':'  225','line':'			m_lines[key] = line;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  226','line':'		} else {','coverage':'           : ',},
{'lineNum':'  227','line':'			line = it->second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  228','line':'		}','coverage':'           : ',},
{'lineNum':'  229','line':'','coverage':'           : ',},
{'lineNum':'  230','line':'		line->addAddress(addr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  231','line':'		m_addrToLine[addr] = line;','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  232','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  233','line':'','coverage':'           : ',},
{'lineNum':'  234','line':'	/* Called during runtime */','coverage':'           : ',},
{'lineNum':'  235','line':'	void onAddress(unsigned long addr, unsigned long hits)','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  236','line':'	{','coverage':'           : ',},
{'lineNum':'  237','line':'		AddrToLineMap_t::iterator it = m_addrToLine.find(addr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  238','line':'','coverage':'           : ',},
{'lineNum':'  239','line':'		if (it != m_addrToLine.end()) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  240','line':'			Line *line = it->second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  241','line':'','coverage':'           : ',},
{'lineNum':'  242','line':'			kcov_debug(INFO_MSG, "REPORT hit at 0x%lx\\n", addr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  243','line':'			line->registerHit(addr, hits);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  244','line':'		}','coverage':'           : ',},
{'lineNum':'  245','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  246','line':'','coverage':'           : ',},
{'lineNum':'  247','line':'	class Line','coverage':'           : ',},
{'lineNum':'  248','line':'	{','coverage':'           : ',},
{'lineNum':'  249','line':'	public:','coverage':'           : ',},
{'lineNum':'  250','line':'		typedef std::unordered_map<unsigned long, int> AddrToHitsMap_t;','coverage':'           : ',},
{'lineNum':'  251','line':'','coverage':'           : ',},
{'lineNum':'  252','line':'		Line(LineId id) : m_file(id.m_file),','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  253','line':'				m_lineNr(id.m_lineNr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  254','line':'','coverage':'           : ',},
{'lineNum':'  255','line':'		{','coverage':'           : ',},
{'lineNum':'  256','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  257','line':'','coverage':'           : ',},
{'lineNum':'  258','line':'		void addAddress(unsigned long addr)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  259','line':'		{','coverage':'           : ',},
{'lineNum':'  260','line':'			if (m_addrs.find(addr) == m_addrs.end())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  261','line':'				m_addrs[addr] = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  262','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  263','line':'','coverage':'           : ',},
{'lineNum':'  264','line':'		unsigned int registerHit(unsigned long addr, unsigned long hits)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  265','line':'		{','coverage':'           : ',},
{'lineNum':'  266','line':'			unsigned int out = !m_addrs[addr];','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  267','line':'','coverage':'           : ',},
{'lineNum':'  268','line':'			m_addrs[addr] = 1;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  269','line':'','coverage':'           : ',},
{'lineNum':'  270','line':'			return out;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  271','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  272','line':'','coverage':'           : ',},
{'lineNum':'  273','line':'		void clearHits()','coverage':'           : ',},
{'lineNum':'  274','line':'		{','coverage':'           : ',},
{'lineNum':'  275','line':'			for (auto &it : m_addrs)','coverage':'           : ',},
{'lineNum':'  276','line':'				it.second = 0;','coverage':'           : ',},
{'lineNum':'  277','line':'		}','coverage':'           : ',},
{'lineNum':'  278','line':'','coverage':'           : ',},
{'lineNum':'  279','line':'		unsigned int hits()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  280','line':'		{','coverage':'           : ',},
{'lineNum':'  281','line':'			unsigned int out = 0;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  282','line':'','coverage':'           : ',},
{'lineNum':'  283','line':'			for (const auto &it : m_addrs)','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  284','line':'				out += it.second;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  285','line':'','coverage':'           : ',},
{'lineNum':'  286','line':'			return out;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  287','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  288','line':'','coverage':'           : ',},
{'lineNum':'  289','line':'		unsigned int possibleHits()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  290','line':'		{','coverage':'           : ',},
{'lineNum':'  291','line':'			return m_addrs.size();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  292','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  293','line':'','coverage':'           : ',},
{'lineNum':'  294','line':'		uint8_t *marshal(uint8_t *start)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  295','line':'		{','coverage':'           : ',},
{'lineNum':'  296','line':'			uint64_t *data = (uint64_t *)start;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  297','line':'','coverage':'           : ',},
{'lineNum':'  298','line':'			for (const auto &it : m_addrs) {','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  299','line':'				// Address and number of hits','coverage':'           : ',},
{'lineNum':'  300','line':'				*data++ = to_be<uint64_t>(it.first);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  301','line':'				*data++ = to_be<uint64_t>(it.second);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  302','line':'			}','coverage':'           : ',},
{'lineNum':'  303','line':'','coverage':'           : ',},
{'lineNum':'  304','line':'			return (uint8_t *)data;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  305','line':'		}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  306','line':'','coverage':'           : ',},
{'lineNum':'  307','line':'		static uint8_t *unMarshal(uint8_t *p,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  308','line':'				unsigned long *outAddr, unsigned int *outHits)','coverage':'           : ',},
{'lineNum':'  309','line':'		{','coverage':'           : ',},
{'lineNum':'  310','line':'			uint64_t *data = (uint64_t *)p;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  311','line':'','coverage':'           : ',},
{'lineNum':'  312','line':'			*outAddr = be_to_host(*data++);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  313','line':'			*outHits = be_to_host(*data++);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  314','line':'','coverage':'           : ',},
{'lineNum':'  315','line':'			return (uint8_t *)data;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  316','line':'		}','class':'linePartCov','coverage':'  1 /   2  : ',},
{'lineNum':'  317','line':'','coverage':'           : ',},
{'lineNum':'  318','line':'		std::string m_file;','coverage':'           : ',},
{'lineNum':'  319','line':'		unsigned int m_lineNr;','coverage':'           : ',},
{'lineNum':'  320','line':'		AddrToHitsMap_t m_addrs;','coverage':'           : ',},
{'lineNum':'  321','line':'	};','coverage':'           : ',},
{'lineNum':'  322','line':'','coverage':'           : ',},
{'lineNum':'  323','line':'	typedef std::unordered_map<LineId, Line *, LineIdHash> LineMap_t;','coverage':'           : ',},
{'lineNum':'  324','line':'	typedef std::unordered_map<unsigned long, Line *> AddrToLineMap_t;','coverage':'           : ',},
{'lineNum':'  325','line':'','coverage':'           : ',},
{'lineNum':'  326','line':'	LineMap_t m_lines;','coverage':'           : ',},
{'lineNum':'  327','line':'	AddrToLineMap_t m_addrToLine;','coverage':'           : ',},
{'lineNum':'  328','line':'','coverage':'           : ',},
{'lineNum':'  329','line':'	IFileParser &m_fileParser;','coverage':'           : ',},
{'lineNum':'  330','line':'	ICollector &m_collector;','coverage':'           : ',},
{'lineNum':'  331','line':'	IFilter &m_filter;','coverage':'           : ',},
{'lineNum':'  332','line':'};','coverage':'           : ',},
{'lineNum':'  333','line':'','coverage':'           : ',},
{'lineNum':'  334','line':'IReporter &IReporter::create(IFileParser &parser, ICollector &collector, IFilter &filter)','coverage':'           : ',},
{'lineNum':'  335','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  336','line':'	return *new Reporter(parser, collector, filter);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  337','line':'}','class':'linePartCov','coverage':'  1 /   2  : ',},
];
var merged_data = [];
