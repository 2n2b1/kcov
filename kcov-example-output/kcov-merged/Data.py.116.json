var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 62, 'covered' : 18,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Simon Kagstrom <simon.kagstrom@gmail.com>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   Describes data symbols','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'import re, os, cgi, curses.ascii','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'','coverage':'           : ',},
{'lineNum':'   15','line':'from dissy.Config import config','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   16','line':'from dissy.Entity import Entity, AddressableEntity','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   17','line':'from dissy.StrEntity import StrEntity','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'','coverage':'           : ',},
{'lineNum':'   19','line':'class DataBase(AddressableEntity):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'    def __init__(self, fileContainer, address, label, size=0):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   21','line':'        AddressableEntity.__init__(self, address = address, endAddress = address + size, baseAddress = fileContainer.baseAddress)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   22','line':'        self.label = label','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   23','line':'        self.file = fileContainer','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   24','line':'        self.data = []','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   25','line':'        self.string = ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   26','line':'        self.stream = None','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   27','line':'        self.type = "Unknown"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   28','line':'','coverage':'           : ',},
{'lineNum':'   29','line':'    def parse(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   30','line':'        pass','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   31','line':'','coverage':'           : ',},
{'lineNum':'   32','line':'    def toNumericValue(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   33','line':'        val = 0','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   34','line':'        if len(self.data) in (1,2,4,8):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   35','line':'            for i in range(0, len(self.data)):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   36','line':'                val = val + self.data[i] << (len(self.data) - i)*8','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   37','line':'        return val','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   38','line':'','coverage':'           : ',},
{'lineNum':'   39','line':'    def toBytes(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'        return self.data','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   41','line':'','coverage':'           : ',},
{'lineNum':'   42','line':'    def toString(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   43','line':'        return self.string','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   44','line':'','coverage':'           : ',},
{'lineNum':'   45','line':'class Data(DataBase):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   46','line':'    def __init__(self, fileContainer, address, label, size=0):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   47','line':'        DataBase.__init__(self, fileContainer, address, label, size)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   48','line':'        self.type = "Initialized data"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   49','line':'','coverage':'           : ',},
{'lineNum':'   50','line':'    def parse(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   51','line':'        extents = self.getExtents()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   52','line':'        s = "%s --wide --demangle --full-contents --start-address=0x%x --stop-address=0x%x %s" % (config.objdump, extents[0], extents[1], self.file.filename)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   53','line':'        self.stream = os.popen(s)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   54','line':'        for line in self.stream:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   55','line':'            # Weed away some unneeded stuff','coverage':'           : ',},
{'lineNum':'   56','line':'            if line.startswith("Contents of section ") or line.startswith("%s: " % (self.file.filename)):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   57','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   58','line':'            if line.strip() == "":','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   59','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   60','line':'','coverage':'           : ',},
{'lineNum':'   61','line':'            words = line.split()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   62','line':'            for word in words[1:max(4, len(words))]:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   63','line':'                for i in range(0, len(word), 2):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   64','line':'                    try:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'                        val = int(word[i:i+2], 16)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   66','line':'                        self.data.append(val)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   67','line':'                    except:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   68','line':'                        # For "short" data','coverage':'           : ',},
{'lineNum':'   69','line':'                        continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   70','line':'                    if curses.ascii.isprint(val):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   71','line':'                        self.string += "%c" % curses.ascii.ascii(val)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   72','line':'                    else:','coverage':'           : ',},
{'lineNum':'   73','line':'                        self.string += "."','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   74','line':'        self.stream.close()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   75','line':'','coverage':'           : ',},
{'lineNum':'   76','line':'class Bss(DataBase):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   77','line':'    def __init__(self, fileContainer, address, label, size=0):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   78','line':'        DataBase.__init__(self, fileContainer, address, label, size)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   79','line':'        self.type = "Uninitialized data"','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'','coverage':'           : ',},
{'lineNum':'   81','line':'    def parse(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   82','line':'        size = self.getSize()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   83','line':'        self.data = [ 0 ] * size','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   84','line':'        self.string = "." * size','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   85','line':'','coverage':'           : ',},
{'lineNum':'   86','line':'class RoData(Data):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   87','line':'    def __init__(self, fileContainer, address, label, size=0):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   88','line':'        Data.__init__(self, fileContainer, address, label, size)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   89','line':'        self.type = "Read-only data"','class':'lineNoCov','coverage':'  0 /   1  : ',},
];
var merged_data = [];
