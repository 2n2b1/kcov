var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 82, 'covered' : 75,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2006,  Blekinge Institute of Technology','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Simon Kagstrom <simon.kagstrom@gmail.com>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   Intel arch specific stuff','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'import sys, architecture','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   14','line':'from dissy.architecture import Architecture','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   15','line':'','coverage':'           : ',},
{'lineNum':'   16','line':'intel_jumps = [\'jmp\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   17','line':'               \'call\'','coverage':'           : ',},
{'lineNum':'   18','line':'               ]','coverage':'           : ',},
{'lineNum':'   19','line':'intel_calls = [\'call\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'','coverage':'           : ',},
{'lineNum':'   21','line':'intel_conditionflag_setters = [\'cmp\', \'cmpb\', \'cmps\', \'cmpw\', \'cmpl\', \'cmpq\', \'test\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'','coverage':'           : ',},
{'lineNum':'   23','line':'intel_conditionflag_users = [\'\']','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   24','line':'','coverage':'           : ',},
{'lineNum':'   25','line':'intel_instr_descriptions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   26','line':'    \'push\': \'Push Word onto Stack\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   27','line':'    \'pushl\': \'Push Long onto Stack\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   28','line':'    \'mov\': \'Move\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   29','line':'    \'movl\': \'Move Long\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   30','line':'    \'cmp\': \'Compare\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   31','line':'    \'cmpb\': \'Compare Byte\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   32','line':'    \'lea\': \'Load Effective Address\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   33','line':'    \'add\': \'Add\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'    \'jmp\': \'Unconditional Jump\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   35','line':'    \'pop\': \'Pop Word off Stack\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   36','line':'    \'ret\': \'Return from Procedure\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   37','line':'    \'sub\': \'Subtract\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   38','line':'    \'xor\': \'eXclusive Or\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   39','line':'    \'and\': \'Logical And\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   40','line':'    \'nop\': \'NoOp\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   41','line':'    \'call\': \'Procedure Call\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   42','line':'    \'hlt\': \'Halt\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   43','line':'    \'test\': """Test for Bit Pattern','coverage':'           : ',},
{'lineNum':'   44','line':'Performs a logical AND of the two operands, updating the condition flags without saving the results""",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   45','line':'    \'leave\': \'Restore stack for procedure exit\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   46','line':'    \'xchg\': \'Exchange\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   47','line':'    \'sar\': \'Shift Arithmetic Right\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   48','line':'    \'sal\': \'Shift Arithmetic Left\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   49','line':'    \'shr\': \'Shift Logical Right\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   50','line':'    \'shl\': \'Shift Logical Left\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   51','line':'}','coverage':'           : ',},
{'lineNum':'   52','line':'','coverage':'           : ',},
{'lineNum':'   53','line':'intel_lists_inited = False','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   54','line':'if not intel_lists_inited:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   55','line':'    conditional_instructions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   56','line':'        \'j\': "Jump if %s",','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   57','line':'    }','coverage':'           : ',},
{'lineNum':'   58','line':'    conditions = {','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   59','line':'        \'a\': \'Above\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   60','line':'        \'ae\': \'Above or Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   61','line':'        \'b\': \'Below\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   62','line':'        \'be\': \'Below or Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   63','line':'        \'c\': \'Carry set\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   64','line':'        \'cxz\': \'CX Zero\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   65','line':'        \'e\': \'Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   66','line':'        \'g\': \'Greater (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   67','line':'        \'ge\': \'Greater or Equal (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   68','line':'        \'l\': \'Less (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   69','line':'        \'le\': \'Less or Equal (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   70','line':'        \'na\': \'Not Above\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   71','line':'        \'nae\': \'Not Above or Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   72','line':'        \'nb\': \'Not Below\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   73','line':'        \'nbe\': \'Not Below or Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   74','line':'        \'nc\': \'Not Carry\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   75','line':'        \'ne\': \'Not Equal\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   76','line':'        \'ng\': \'Not Greater (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   77','line':'        \'nge\': \'Not Greater or Equal (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   78','line':'        \'nl\': \'Not Less (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   79','line':'        \'nle\': \'Not Less or Equal (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   80','line':'        \'no\': \'Not Overflow (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   81','line':'        \'np\': \'No Parity\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   82','line':'        \'ns\': \'Not Signed (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   83','line':'        \'nz\': \'Not Zero\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   84','line':'        \'o\': \'Overflow (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   85','line':'        \'p\': \'Parity\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   86','line':'        \'pe\': \'Parity Even\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   87','line':'        \'po\': \'Parity Odd\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   88','line':'        \'s\': \'Signed (Signed)\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   89','line':'        \'z\': \'Zero\',','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   90','line':'','coverage':'           : ',},
{'lineNum':'   91','line':'    }','coverage':'           : ',},
{'lineNum':'   92','line':'    for i in [\'j\']:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   93','line':'        for c in conditions:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   94','line':'            intel_instr_descriptions[i + c] = conditional_instructions[i] % (conditions[c])','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   95','line':'            intel_conditionflag_users += [i + c]','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   96','line':'            intel_jumps += [i + c]','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   97','line':'','coverage':'           : ',},
{'lineNum':'   98','line':'','coverage':'           : ',},
{'lineNum':'   99','line':'class IntelArchitecture(architecture.Architecture):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  100','line':'    def __init__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  101','line':'        architecture.Architecture.__init__(self, intel_jumps, intel_calls,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  102','line':'            intel_conditionflag_setters, intel_conditionflag_users)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  103','line':'','coverage':'           : ',},
{'lineNum':'  104','line':'    def getInstructionInfo(self, instruction):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'  105','line':'        opcode = instruction.getOpcode()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  106','line':'        args = str(instruction.getArgs())','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  107','line':'        description = intel_instr_descriptions.get(instruction.getOpcode(), \'\')','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  108','line':'','coverage':'           : ',},
{'lineNum':'  109','line':'        return {\'shortinfo\': opcode + " " + args,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  110','line':'                \'description\': description,','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  111','line':'                }','coverage':'           : ',},
];
var merged_data = [];
