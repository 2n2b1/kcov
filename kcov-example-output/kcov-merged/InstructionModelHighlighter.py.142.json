var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 56, 'covered' : 21,};
var data = [
{'lineNum':'    1','line':'######################################################################','coverage':'           : ',},
{'lineNum':'    2','line':'##','coverage':'           : ',},
{'lineNum':'    3','line':'## Copyright (C) 2009, Mads Chr. Olesen','coverage':'           : ',},
{'lineNum':'    4','line':'##','coverage':'           : ',},
{'lineNum':'    5','line':'## Author:        Mads Chr. Olesen <mads@mchro.dk>','coverage':'           : ',},
{'lineNum':'    6','line':'## Description:   Filter-decorator for InstructionModel','coverage':'           : ',},
{'lineNum':'    7','line':'##','coverage':'           : ',},
{'lineNum':'    8','line':'## Licensed under the terms of GNU General Public License version 2','coverage':'           : ',},
{'lineNum':'    9','line':'## (or later, at your option). See COPYING file distributed with Dissy','coverage':'           : ',},
{'lineNum':'   10','line':'## for full text of the license.','coverage':'           : ',},
{'lineNum':'   11','line':'##','coverage':'           : ',},
{'lineNum':'   12','line':'######################################################################','coverage':'           : ',},
{'lineNum':'   13','line':'','coverage':'           : ',},
{'lineNum':'   14','line':'from Config import *','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   15','line':'from dissy import InstructionModel','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   16','line':'from Instruction import Instruction','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   17','line':'import re','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   18','line':'','coverage':'           : ',},
{'lineNum':'   19','line':'class InstructionModelHighlighter:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   20','line':'    def __init__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   21','line':'        pass','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   22','line':'','coverage':'           : ',},
{'lineNum':'   23','line':'    def highlight(self, row, curInstruction):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   24','line':'        """Possibly modify the columns of row"""','coverage':'           : ',},
{'lineNum':'   25','line':'        pass','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   26','line':'','coverage':'           : ',},
{'lineNum':'   27','line':'class SearchwordHighlighter(InstructionModelHighlighter):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   28','line':'    """Highlights anything that matches the regular expression given"""','coverage':'           : ',},
{'lineNum':'   29','line':'    def __init__(self, searchPattern=None):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   30','line':'        InstructionModelHighlighter.__init__(self)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   31','line':'        self.setSearchPattern(searchPattern)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   32','line':'','coverage':'           : ',},
{'lineNum':'   33','line':'    def setSearchPattern(self, searchPattern):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   34','line':'        if searchPattern:','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   35','line':'            #Match anything not in a tag (> occurs after match, but before a <)','coverage':'           : ',},
{'lineNum':'   36','line':'            self.searchPattern = re.compile(searchPattern + "(?![^<]*>)")','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   37','line':'        else:','coverage':'           : ',},
{'lineNum':'   38','line':'            self.searchPattern = None','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   39','line':'','coverage':'           : ',},
{'lineNum':'   40','line':'    def markup(self, pattern, string, color):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   41','line':'        s = ""','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   42','line':'        last = 0','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   43','line':'        for i in pattern.finditer(string):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   44','line':'            span = i.span()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   45','line':'            s = s + string[last:span[0]] + \'<span foreground="\' + color + \'">\' + string[span[0] : span[1] ] + \'</span>\'','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   46','line':'            last = span[1]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   47','line':'        else:','coverage':'           : ',},
{'lineNum':'   48','line':'            s = s + string[last:]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   49','line':'        return s','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   50','line':'','coverage':'           : ',},
{'lineNum':'   51','line':'    def highlight(self, row, curInstruction, instructionModel):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   52','line':'        insn = row[instructionModel.COLUMN_INSTRUCTION]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   53','line':'        strRep = row[instructionModel.COLUMN_STR_REPRESENTATION]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   54','line':'        if self.searchPattern:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   55','line':'            strRep = self.markup(self.searchPattern, strRep, config.markupFgColor)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   56','line':'        row[instructionModel.COLUMN_STR_REPRESENTATION] = strRep','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   57','line':'','coverage':'           : ',},
{'lineNum':'   58','line':'class ConditionFlagHighlighter(InstructionModelHighlighter):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   59','line':'    """Highlights the instruction that may have set the processor condition','coverage':'           : ',},
{'lineNum':'   60','line':'    flags."""','coverage':'           : ',},
{'lineNum':'   61','line':'','coverage':'           : ',},
{'lineNum':'   62','line':'    def __init__(self):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   63','line':'        InstructionModelHighlighter.__init__(self)','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   64','line':'','coverage':'           : ',},
{'lineNum':'   65','line':'    def highlight(self, row, curInstruction, instructionModel):','class':'lineCov','coverage':'  1 /   1  : ',},
{'lineNum':'   66','line':'        if not curInstruction:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   67','line':'            return','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   68','line':'        insn = row[instructionModel.COLUMN_INSTRUCTION]','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   69','line':'        arch = curInstruction.getFunction().getFile().getArch()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   70','line':'        #import pdb; pdb.set_trace()','coverage':'           : ',},
{'lineNum':'   71','line':'','coverage':'           : ',},
{'lineNum':'   72','line':'        if not arch.isConditionFlagSetter(insn.getOpcode()) or \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   73','line':'            not arch.isConditionFlagUser(curInstruction.getOpcode()):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   74','line':'            return','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   75','line':'        if curInstruction == insn:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   76','line':'            return','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   77','line':'        inthezone = False','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   78','line':'        for i in curInstruction.getFunction().getAll():','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   79','line':'            if not isinstance(i, Instruction):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'                continue','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   81','line':'            if inthezone and arch.isConditionFlagSetter(i.getOpcode()):','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   82','line':'                return','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   83','line':'            if i == insn:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   84','line':'                inthezone = True','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   85','line':'            if inthezone and i == curInstruction:','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   86','line':'                row[instructionModel.COLUMN_ADDR] = \'<span foreground="green">\' + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   87','line':'                    row[instructionModel.COLUMN_ADDR] + \\','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   88','line':'                    \'</span>\'','coverage':'           : ',},
];
var merged_data = [];
