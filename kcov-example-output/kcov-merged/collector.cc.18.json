var percent_low = 25;var percent_high = 75;
var header = { 'command' : 'ut', 'date' : '2014-06-09 19:19:23', 'instrumented' : 83, 'covered' : 0,};
var data = [
{'lineNum':'    1','line':'#include <collector.hh>','coverage':'           : ',},
{'lineNum':'    2','line':'#include <file-parser.hh>','coverage':'           : ',},
{'lineNum':'    3','line':'#include <utils.hh>','coverage':'           : ',},
{'lineNum':'    4','line':'#include <engine.hh>','coverage':'           : ',},
{'lineNum':'    5','line':'#include <output-handler.hh>','coverage':'           : ',},
{'lineNum':'    6','line':'#include <configuration.hh>','coverage':'           : ',},
{'lineNum':'    7','line':'#include <filter.hh>','coverage':'           : ',},
{'lineNum':'    8','line':'#include <signal.h>','coverage':'           : ',},
{'lineNum':'    9','line':'','coverage':'           : ',},
{'lineNum':'   10','line':'#include <unordered_map>','coverage':'           : ',},
{'lineNum':'   11','line':'#include <string>','coverage':'           : ',},
{'lineNum':'   12','line':'#include <vector>','coverage':'           : ',},
{'lineNum':'   13','line':'','coverage':'           : ',},
{'lineNum':'   14','line':'using namespace kcov;','coverage':'           : ',},
{'lineNum':'   15','line':'','coverage':'           : ',},
{'lineNum':'   16','line':'class Collector :','class':'lineNoCov','coverage':'  0 /   5  : ',},
{'lineNum':'   17','line':'		public ICollector,','coverage':'           : ',},
{'lineNum':'   18','line':'		public IFileParser::ILineListener,','coverage':'           : ',},
{'lineNum':'   19','line':'		public IEngine::IEventListener','coverage':'           : ',},
{'lineNum':'   20','line':'{','coverage':'           : ',},
{'lineNum':'   21','line':'public:','coverage':'           : ',},
{'lineNum':'   22','line':'	Collector(IFileParser &fileParser, IEngine &engine, IFilter &filter) :','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   23','line':'		m_fileParser(fileParser),','coverage':'           : ',},
{'lineNum':'   24','line':'		m_engine(engine),','coverage':'           : ',},
{'lineNum':'   25','line':'		m_exitCode(-1),','coverage':'           : ',},
{'lineNum':'   26','line':'		m_filter(filter)','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   27','line':'	{','coverage':'           : ',},
{'lineNum':'   28','line':'		m_fileParser.registerLineListener(*this);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   29','line':'	}','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'   30','line':'','coverage':'           : ',},
{'lineNum':'   31','line':'	void registerListener(ICollector::IListener &listener)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   32','line':'	{','coverage':'           : ',},
{'lineNum':'   33','line':'		m_listeners.push_back(&listener);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   34','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   35','line':'','coverage':'           : ',},
{'lineNum':'   36','line':'	int run(const std::string &filename)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   37','line':'	{','coverage':'           : ',},
{'lineNum':'   38','line':'		if (!m_engine.start(*this, filename)) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   39','line':'			error("Can\'t start/attach to %s", filename.c_str());','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   40','line':'			return -1;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   41','line':'		}','coverage':'           : ',},
{'lineNum':'   42','line':'','coverage':'           : ',},
{'lineNum':'   43','line':'		IOutputHandler &output = IOutputHandler::getInstance();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   44','line':'		unsigned int outputInterval = IConfiguration::getInstance().getOutputInterval();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   45','line':'','coverage':'           : ',},
{'lineNum':'   46','line':'		// This will set all breakpoints','coverage':'           : ',},
{'lineNum':'   47','line':'		m_fileParser.parse();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   48','line':'		m_engine.setupAllBreakpoints();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   49','line':'','coverage':'           : ',},
{'lineNum':'   50','line':'		uint64_t lastTimestamp = get_ms_timestamp();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   51','line':'','coverage':'           : ',},
{'lineNum':'   52','line':'		while (1) {','coverage':'           : ',},
{'lineNum':'   53','line':'			bool shouldContinue = m_engine.continueExecution();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   54','line':'','coverage':'           : ',},
{'lineNum':'   55','line':'			uint64_t now = get_ms_timestamp();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   56','line':'','coverage':'           : ',},
{'lineNum':'   57','line':'			if (outputInterval != 0 &&','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   58','line':'					now - lastTimestamp >= outputInterval) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   59','line':'				lastTimestamp = now;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   60','line':'','coverage':'           : ',},
{'lineNum':'   61','line':'				output.produce();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   62','line':'			}','coverage':'           : ',},
{'lineNum':'   63','line':'','coverage':'           : ',},
{'lineNum':'   64','line':'			if (!shouldContinue)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   65','line':'				break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   66','line':'		}','coverage':'           : ',},
{'lineNum':'   67','line':'','coverage':'           : ',},
{'lineNum':'   68','line':'		return m_exitCode;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   69','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   70','line':'','coverage':'           : ',},
{'lineNum':'   71','line':'	virtual void stop()','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   72','line':'	{','coverage':'           : ',},
{'lineNum':'   73','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   74','line':'','coverage':'           : ',},
{'lineNum':'   75','line':'private:','coverage':'           : ',},
{'lineNum':'   76','line':'','coverage':'           : ',},
{'lineNum':'   77','line':'	std::string eventToName(IEngine::Event ev)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   78','line':'	{','coverage':'           : ',},
{'lineNum':'   79','line':'		switch (ev.type)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   80','line':'		{','coverage':'           : ',},
{'lineNum':'   81','line':'		case ev_breakpoint:','coverage':'           : ',},
{'lineNum':'   82','line':'			return fmt("breakpoint at 0x%llx", (unsigned long long)ev.addr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   83','line':'		case ev_exit:','coverage':'           : ',},
{'lineNum':'   84','line':'			return fmt("exit code %d", ev.data);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   85','line':'		case ev_signal:','coverage':'           : ',},
{'lineNum':'   86','line':'		case ev_signal_exit:','coverage':'           : ',},
{'lineNum':'   87','line':'		{','coverage':'           : ',},
{'lineNum':'   88','line':'			if (ev.data == SIGABRT)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   89','line':'				return std::string("SIGABRT");','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   90','line':'			if (ev.data == SIGSEGV)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   91','line':'				return std::string("SIGSEGV");','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   92','line':'			if (ev.data == SIGILL)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   93','line':'				return std::string("SIGILL");','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   94','line':'			if (ev.data == SIGTERM)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   95','line':'				return std::string("SIGTERM");','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   96','line':'			if (ev.data == SIGINT)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   97','line':'				return std::string("SIGINT");','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'   98','line':'			if (ev.data == SIGBUS)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'   99','line':'				return std::string("SIGBUS");','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  100','line':'			if (ev.data == SIGFPE)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  101','line':'				return std::string("SIGFPE");','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  102','line':'','coverage':'           : ',},
{'lineNum':'  103','line':'			return fmt("unknown signal %d", ev.data);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  104','line':'		}','coverage':'           : ',},
{'lineNum':'  105','line':'		case ev_error:','coverage':'           : ',},
{'lineNum':'  106','line':'			return std::string("error");','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  107','line':'		default:','coverage':'           : ',},
{'lineNum':'  108','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  109','line':'		}','coverage':'           : ',},
{'lineNum':'  110','line':'','coverage':'           : ',},
{'lineNum':'  111','line':'		return std::string("unknown");','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  112','line':'	}','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  113','line':'','coverage':'           : ',},
{'lineNum':'  114','line':'','coverage':'           : ',},
{'lineNum':'  115','line':'	// From IEngine','coverage':'           : ',},
{'lineNum':'  116','line':'	void onEvent(const IEngine::Event &ev)','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  117','line':'	{','coverage':'           : ',},
{'lineNum':'  118','line':'		switch (ev.type)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  119','line':'		{','coverage':'           : ',},
{'lineNum':'  120','line':'		case ev_error:','coverage':'           : ',},
{'lineNum':'  121','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  122','line':'		case ev_signal:','coverage':'           : ',},
{'lineNum':'  123','line':'			break;','coverage':'           : ',},
{'lineNum':'  124','line':'		case ev_signal_exit:','coverage':'           : ',},
{'lineNum':'  125','line':'			kcov_debug(STATUS_MSG, "kcov: Process exited with signal %d (%s)\\n",','coverage':'           : ',},
{'lineNum':'  126','line':'					ev.data, eventToName(ev).c_str());','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  127','line':'','coverage':'           : ',},
{'lineNum':'  128','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  129','line':'','coverage':'           : ',},
{'lineNum':'  130','line':'		case ev_exit_first_process:','coverage':'           : ',},
{'lineNum':'  131','line':'			if (IConfiguration::getInstance().getExitFirstProcess()) {','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  132','line':'				IConfiguration &conf = IConfiguration::getInstance();','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  133','line':'				std::string fifoName = conf.getOutDirectory() + conf.getBinaryName() + "/done.fifo";','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  134','line':'','coverage':'           : ',},
{'lineNum':'  135','line':'				std::string exitCode = fmt("%u", ev.data);','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  136','line':'','coverage':'           : ',},
{'lineNum':'  137','line':'				write_file(exitCode.c_str(), exitCode.size(), "%s", fifoName.c_str());','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  138','line':'			}','coverage':'           : ',},
{'lineNum':'  139','line':'			m_exitCode = ev.data;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  140','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  141','line':'		case ev_exit:','coverage':'           : ',},
{'lineNum':'  142','line':'			m_exitCode = ev.data;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  143','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  144','line':'		case ev_breakpoint:','coverage':'           : ',},
{'lineNum':'  145','line':'			for (const auto &it : m_listeners)','class':'lineNoCov','coverage':'  0 /   2  : ',},
{'lineNum':'  146','line':'				it->onAddress(ev.addr, 1);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  147','line':'','coverage':'           : ',},
{'lineNum':'  148','line':'			// Disable this breakpoint','coverage':'           : ',},
{'lineNum':'  149','line':'			m_engine.clearBreakpoint(ev.data);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  150','line':'','coverage':'           : ',},
{'lineNum':'  151','line':'			break;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  152','line':'','coverage':'           : ',},
{'lineNum':'  153','line':'		default:','coverage':'           : ',},
{'lineNum':'  154','line':'			panic("Unknown event %d", ev.type);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  155','line':'		}','coverage':'           : ',},
{'lineNum':'  156','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  157','line':'','coverage':'           : ',},
{'lineNum':'  158','line':'','coverage':'           : ',},
{'lineNum':'  159','line':'	// From IFileParser','coverage':'           : ',},
{'lineNum':'  160','line':'	void onLine(const std::string &file, unsigned int lineNr, unsigned long addr)','class':'lineNoCov','coverage':'  0 /   3  : ',},
{'lineNum':'  161','line':'	{','coverage':'           : ',},
{'lineNum':'  162','line':'		if (!m_filter.runFilters(file))','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  163','line':'		{','coverage':'           : ',},
{'lineNum':'  164','line':'			return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  165','line':'		}','coverage':'           : ',},
{'lineNum':'  166','line':'','coverage':'           : ',},
{'lineNum':'  167','line':'		if (addr == 0)','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  168','line':'			return;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  169','line':'','coverage':'           : ',},
{'lineNum':'  170','line':'		m_engine.registerBreakpoint(addr);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  171','line':'		m_addrs[addr]++;','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  172','line':'	}','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  173','line':'','coverage':'           : ',},
{'lineNum':'  174','line':'	typedef std::unordered_map<unsigned long, int> AddrMap_t;','coverage':'           : ',},
{'lineNum':'  175','line':'	typedef std::vector<ICollector::IListener *> ListenerList_t;','coverage':'           : ',},
{'lineNum':'  176','line':'','coverage':'           : ',},
{'lineNum':'  177','line':'	AddrMap_t m_addrs;','coverage':'           : ',},
{'lineNum':'  178','line':'	IFileParser &m_fileParser;','coverage':'           : ',},
{'lineNum':'  179','line':'	IEngine &m_engine;','coverage':'           : ',},
{'lineNum':'  180','line':'	ListenerList_t m_listeners;','coverage':'           : ',},
{'lineNum':'  181','line':'	int m_exitCode;','coverage':'           : ',},
{'lineNum':'  182','line':'','coverage':'           : ',},
{'lineNum':'  183','line':'	IFilter &m_filter;','coverage':'           : ',},
{'lineNum':'  184','line':'};','coverage':'           : ',},
{'lineNum':'  185','line':'','coverage':'           : ',},
{'lineNum':'  186','line':'ICollector &ICollector::create(IFileParser &elf, IEngine &engine, IFilter &filter)','coverage':'           : ',},
{'lineNum':'  187','line':'{','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  188','line':'	return *new Collector(elf, engine, filter);','class':'lineNoCov','coverage':'  0 /   1  : ',},
{'lineNum':'  189','line':'}','class':'lineNoCov','coverage':'  0 /   2  : ',},
];
var merged_data = [];
